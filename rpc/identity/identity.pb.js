/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.pubg = (function() {

    /**
     * Namespace pubg.
     * @exports pubg
     * @namespace
     */
    var pubg = {};

    pubg.globalaccounts = (function() {

        /**
         * Namespace globalaccounts.
         * @memberof pubg
         * @namespace
         */
        var globalaccounts = {};

        globalaccounts.Identity = (function() {

            /**
             * Constructs a new Identity service.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an Identity
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function Identity(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (Identity.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Identity;

            /**
             * Creates new Identity service using the specified rpc implementation.
             * @function create
             * @memberof pubg.globalaccounts.Identity
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {Identity} RPC service. Useful where requests and/or responses are streamed.
             */
            Identity.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#createGlobalAccount}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CreateGlobalAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.GlobalAccountResponse} [response] GlobalAccountResponse
             */

            /**
             * Calls CreateGlobalAccount.
             * @function createGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICreateAccountParams} request CreateAccountParams message or plain object
             * @param {pubg.globalaccounts.Identity.CreateGlobalAccountCallback} callback Node-style callback called with the error, if any, and GlobalAccountResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.createGlobalAccount = function createGlobalAccount(request, callback) {
                return this.rpcCall(createGlobalAccount, $root.pubg.globalaccounts.CreateAccountParams, $root.pubg.globalaccounts.GlobalAccountResponse, request, callback);
            }, "name", { value: "CreateGlobalAccount" });

            /**
             * Calls CreateGlobalAccount.
             * @function createGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICreateAccountParams} request CreateAccountParams message or plain object
             * @returns {Promise<pubg.globalaccounts.GlobalAccountResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#deleteGlobalAccount}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef DeleteGlobalAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls DeleteGlobalAccount.
             * @function deleteGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IDeleteAccountParams} request DeleteAccountParams message or plain object
             * @param {pubg.globalaccounts.Identity.DeleteGlobalAccountCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.deleteGlobalAccount = function deleteGlobalAccount(request, callback) {
                return this.rpcCall(deleteGlobalAccount, $root.pubg.globalaccounts.DeleteAccountParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "DeleteGlobalAccount" });

            /**
             * Calls DeleteGlobalAccount.
             * @function deleteGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IDeleteAccountParams} request DeleteAccountParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#getGlobalAccount}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef GetGlobalAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.GlobalAccountResponse} [response] GlobalAccountResponse
             */

            /**
             * Calls GetGlobalAccount.
             * @function getGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICriteriaQuery} request CriteriaQuery message or plain object
             * @param {pubg.globalaccounts.Identity.GetGlobalAccountCallback} callback Node-style callback called with the error, if any, and GlobalAccountResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.getGlobalAccount = function getGlobalAccount(request, callback) {
                return this.rpcCall(getGlobalAccount, $root.pubg.globalaccounts.CriteriaQuery, $root.pubg.globalaccounts.GlobalAccountResponse, request, callback);
            }, "name", { value: "GetGlobalAccount" });

            /**
             * Calls GetGlobalAccount.
             * @function getGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICriteriaQuery} request CriteriaQuery message or plain object
             * @returns {Promise<pubg.globalaccounts.GlobalAccountResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#activateGlobalAccount}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef ActivateGlobalAccountCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.TokenClaimResponse} [response] TokenClaimResponse
             */

            /**
             * Calls ActivateGlobalAccount.
             * @function activateGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IActivateAccountParams} request ActivateAccountParams message or plain object
             * @param {pubg.globalaccounts.Identity.ActivateGlobalAccountCallback} callback Node-style callback called with the error, if any, and TokenClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.activateGlobalAccount = function activateGlobalAccount(request, callback) {
                return this.rpcCall(activateGlobalAccount, $root.pubg.globalaccounts.ActivateAccountParams, $root.pubg.globalaccounts.TokenClaimResponse, request, callback);
            }, "name", { value: "ActivateGlobalAccount" });

            /**
             * Calls ActivateGlobalAccount.
             * @function activateGlobalAccount
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IActivateAccountParams} request ActivateAccountParams message or plain object
             * @returns {Promise<pubg.globalaccounts.TokenClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#resendActivation}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef ResendActivationCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls ResendActivation.
             * @function resendActivation
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IResendActivationParams} request ResendActivationParams message or plain object
             * @param {pubg.globalaccounts.Identity.ResendActivationCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.resendActivation = function resendActivation(request, callback) {
                return this.rpcCall(resendActivation, $root.pubg.globalaccounts.ResendActivationParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "ResendActivation" });

            /**
             * Calls ResendActivation.
             * @function resendActivation
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IResendActivationParams} request ResendActivationParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#beginEmailChange}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef BeginEmailChangeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls BeginEmailChange.
             * @function beginEmailChange
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IBeginEmailChangeParams} request BeginEmailChangeParams message or plain object
             * @param {pubg.globalaccounts.Identity.BeginEmailChangeCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.beginEmailChange = function beginEmailChange(request, callback) {
                return this.rpcCall(beginEmailChange, $root.pubg.globalaccounts.BeginEmailChangeParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "BeginEmailChange" });

            /**
             * Calls BeginEmailChange.
             * @function beginEmailChange
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IBeginEmailChangeParams} request BeginEmailChangeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#completeEmailChange}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CompleteEmailChangeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.TokenClaimResponse} [response] TokenClaimResponse
             */

            /**
             * Calls CompleteEmailChange.
             * @function completeEmailChange
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICompleteEmailChangeParams} request CompleteEmailChangeParams message or plain object
             * @param {pubg.globalaccounts.Identity.CompleteEmailChangeCallback} callback Node-style callback called with the error, if any, and TokenClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.completeEmailChange = function completeEmailChange(request, callback) {
                return this.rpcCall(completeEmailChange, $root.pubg.globalaccounts.CompleteEmailChangeParams, $root.pubg.globalaccounts.TokenClaimResponse, request, callback);
            }, "name", { value: "CompleteEmailChange" });

            /**
             * Calls CompleteEmailChange.
             * @function completeEmailChange
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICompleteEmailChangeParams} request CompleteEmailChangeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.TokenClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#updateUsername}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef UpdateUsernameCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls UpdateUsername.
             * @function updateUsername
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IUpdateUsernameParams} request UpdateUsernameParams message or plain object
             * @param {pubg.globalaccounts.Identity.UpdateUsernameCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.updateUsername = function updateUsername(request, callback) {
                return this.rpcCall(updateUsername, $root.pubg.globalaccounts.UpdateUsernameParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "UpdateUsername" });

            /**
             * Calls UpdateUsername.
             * @function updateUsername
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IUpdateUsernameParams} request UpdateUsernameParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#updatePassword}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef UpdatePasswordCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls UpdatePassword.
             * @function updatePassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IUpdatePasswordParams} request UpdatePasswordParams message or plain object
             * @param {pubg.globalaccounts.Identity.UpdatePasswordCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.updatePassword = function updatePassword(request, callback) {
                return this.rpcCall(updatePassword, $root.pubg.globalaccounts.UpdatePasswordParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "UpdatePassword" });

            /**
             * Calls UpdatePassword.
             * @function updatePassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IUpdatePasswordParams} request UpdatePasswordParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#beginForgotPassword}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef BeginForgotPasswordCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls BeginForgotPassword.
             * @function beginForgotPassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IBeginForgotPasswordParams} request BeginForgotPasswordParams message or plain object
             * @param {pubg.globalaccounts.Identity.BeginForgotPasswordCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.beginForgotPassword = function beginForgotPassword(request, callback) {
                return this.rpcCall(beginForgotPassword, $root.pubg.globalaccounts.BeginForgotPasswordParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "BeginForgotPassword" });

            /**
             * Calls BeginForgotPassword.
             * @function beginForgotPassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IBeginForgotPasswordParams} request BeginForgotPasswordParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#completeForgotPassword}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CompleteForgotPasswordCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.TokenClaimResponse} [response] TokenClaimResponse
             */

            /**
             * Calls CompleteForgotPassword.
             * @function completeForgotPassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICompleteForgotPasswordParams} request CompleteForgotPasswordParams message or plain object
             * @param {pubg.globalaccounts.Identity.CompleteForgotPasswordCallback} callback Node-style callback called with the error, if any, and TokenClaimResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.completeForgotPassword = function completeForgotPassword(request, callback) {
                return this.rpcCall(completeForgotPassword, $root.pubg.globalaccounts.CompleteForgotPasswordParams, $root.pubg.globalaccounts.TokenClaimResponse, request, callback);
            }, "name", { value: "CompleteForgotPassword" });

            /**
             * Calls CompleteForgotPassword.
             * @function completeForgotPassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICompleteForgotPasswordParams} request CompleteForgotPasswordParams message or plain object
             * @returns {Promise<pubg.globalaccounts.TokenClaimResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#setCommPrefs}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef SetCommPrefsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls SetCommPrefs.
             * @function setCommPrefs
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ISetCommPrefsParams} request SetCommPrefsParams message or plain object
             * @param {pubg.globalaccounts.Identity.SetCommPrefsCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.setCommPrefs = function setCommPrefs(request, callback) {
                return this.rpcCall(setCommPrefs, $root.pubg.globalaccounts.SetCommPrefsParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "SetCommPrefs" });

            /**
             * Calls SetCommPrefs.
             * @function setCommPrefs
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ISetCommPrefsParams} request SetCommPrefsParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#setPersona}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef SetPersonaCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls SetPersona.
             * @function setPersona
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ISetPersonaParams} request SetPersonaParams message or plain object
             * @param {pubg.globalaccounts.Identity.SetPersonaCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.setPersona = function setPersona(request, callback) {
                return this.rpcCall(setPersona, $root.pubg.globalaccounts.SetPersonaParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "SetPersona" });

            /**
             * Calls SetPersona.
             * @function setPersona
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ISetPersonaParams} request SetPersonaParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#linkYoutube}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef LinkYoutubeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls LinkYoutube.
             * @function linkYoutube
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @param {pubg.globalaccounts.Identity.LinkYoutubeCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.linkYoutube = function linkYoutube(request, callback) {
                return this.rpcCall(linkYoutube, $root.pubg.globalaccounts.GuidInput, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "LinkYoutube" });

            /**
             * Calls LinkYoutube.
             * @function linkYoutube
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#linkLitePC}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef LinkLitePCCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls LinkLitePC.
             * @function linkLitePC
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @param {pubg.globalaccounts.Identity.LinkLitePCCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.linkLitePC = function linkLitePC(request, callback) {
                return this.rpcCall(linkLitePC, $root.pubg.globalaccounts.GuidInput, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "LinkLitePC" });

            /**
             * Calls LinkLitePC.
             * @function linkLitePC
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#createRelyingPartyLink}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CreateRelyingPartyLinkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls CreateRelyingPartyLink.
             * @function createRelyingPartyLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICreateRelyingPartyLinkParams} request CreateRelyingPartyLinkParams message or plain object
             * @param {pubg.globalaccounts.Identity.CreateRelyingPartyLinkCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.createRelyingPartyLink = function createRelyingPartyLink(request, callback) {
                return this.rpcCall(createRelyingPartyLink, $root.pubg.globalaccounts.CreateRelyingPartyLinkParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "CreateRelyingPartyLink" });

            /**
             * Calls CreateRelyingPartyLink.
             * @function createRelyingPartyLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICreateRelyingPartyLinkParams} request CreateRelyingPartyLinkParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#createLink}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CreateLinkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls CreateLink.
             * @function createLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICreateLinkParams} request CreateLinkParams message or plain object
             * @param {pubg.globalaccounts.Identity.CreateLinkCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.createLink = function createLink(request, callback) {
                return this.rpcCall(createLink, $root.pubg.globalaccounts.CreateLinkParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "CreateLink" });

            /**
             * Calls CreateLink.
             * @function createLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICreateLinkParams} request CreateLinkParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#destroyLink}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef DestroyLinkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls DestroyLink.
             * @function destroyLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IDestroyLinkParams} request DestroyLinkParams message or plain object
             * @param {pubg.globalaccounts.Identity.DestroyLinkCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.destroyLink = function destroyLink(request, callback) {
                return this.rpcCall(destroyLink, $root.pubg.globalaccounts.DestroyLinkParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "DestroyLink" });

            /**
             * Calls DestroyLink.
             * @function destroyLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IDestroyLinkParams} request DestroyLinkParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#checkLink}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CheckLinkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls CheckLink.
             * @function checkLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidProviderCombo} request GuidProviderCombo message or plain object
             * @param {pubg.globalaccounts.Identity.CheckLinkCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.checkLink = function checkLink(request, callback) {
                return this.rpcCall(checkLink, $root.pubg.globalaccounts.GuidProviderCombo, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "CheckLink" });

            /**
             * Calls CheckLink.
             * @function checkLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidProviderCombo} request GuidProviderCombo message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#getLink}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef GetLinkCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.GetLinkResponse} [response] GetLinkResponse
             */

            /**
             * Calls GetLink.
             * @function getLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidProviderCombo} request GuidProviderCombo message or plain object
             * @param {pubg.globalaccounts.Identity.GetLinkCallback} callback Node-style callback called with the error, if any, and GetLinkResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.getLink = function getLink(request, callback) {
                return this.rpcCall(getLink, $root.pubg.globalaccounts.GuidProviderCombo, $root.pubg.globalaccounts.GetLinkResponse, request, callback);
            }, "name", { value: "GetLink" });

            /**
             * Calls GetLink.
             * @function getLink
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidProviderCombo} request GuidProviderCombo message or plain object
             * @returns {Promise<pubg.globalaccounts.GetLinkResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#verifyPassword}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef VerifyPasswordCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.GlobalAccountResponse} [response] GlobalAccountResponse
             */

            /**
             * Calls VerifyPassword.
             * @function verifyPassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IVerifyPasswordParams} request VerifyPasswordParams message or plain object
             * @param {pubg.globalaccounts.Identity.VerifyPasswordCallback} callback Node-style callback called with the error, if any, and GlobalAccountResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.verifyPassword = function verifyPassword(request, callback) {
                return this.rpcCall(verifyPassword, $root.pubg.globalaccounts.VerifyPasswordParams, $root.pubg.globalaccounts.GlobalAccountResponse, request, callback);
            }, "name", { value: "VerifyPassword" });

            /**
             * Calls VerifyPassword.
             * @function verifyPassword
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IVerifyPasswordParams} request VerifyPasswordParams message or plain object
             * @returns {Promise<pubg.globalaccounts.GlobalAccountResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#getPrevTwitch}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef GetPrevTwitchCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.PrevTwitchResponse} [response] PrevTwitchResponse
             */

            /**
             * Calls GetPrevTwitch.
             * @function getPrevTwitch
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGetPrevTwitchParams} request GetPrevTwitchParams message or plain object
             * @param {pubg.globalaccounts.Identity.GetPrevTwitchCallback} callback Node-style callback called with the error, if any, and PrevTwitchResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.getPrevTwitch = function getPrevTwitch(request, callback) {
                return this.rpcCall(getPrevTwitch, $root.pubg.globalaccounts.GetPrevTwitchParams, $root.pubg.globalaccounts.PrevTwitchResponse, request, callback);
            }, "name", { value: "GetPrevTwitch" });

            /**
             * Calls GetPrevTwitch.
             * @function getPrevTwitch
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGetPrevTwitchParams} request GetPrevTwitchParams message or plain object
             * @returns {Promise<pubg.globalaccounts.PrevTwitchResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#beginEnableTOTP}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef BeginEnableTOTPCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.BeginEnableTOTPResponse} [response] BeginEnableTOTPResponse
             */

            /**
             * Calls BeginEnableTOTP.
             * @function beginEnableTOTP
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @param {pubg.globalaccounts.Identity.BeginEnableTOTPCallback} callback Node-style callback called with the error, if any, and BeginEnableTOTPResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.beginEnableTOTP = function beginEnableTOTP(request, callback) {
                return this.rpcCall(beginEnableTOTP, $root.pubg.globalaccounts.GuidInput, $root.pubg.globalaccounts.BeginEnableTOTPResponse, request, callback);
            }, "name", { value: "BeginEnableTOTP" });

            /**
             * Calls BeginEnableTOTP.
             * @function beginEnableTOTP
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @returns {Promise<pubg.globalaccounts.BeginEnableTOTPResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#completeEnableTOTP}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CompleteEnableTOTPCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.CompleteEnableTOTPResponse} [response] CompleteEnableTOTPResponse
             */

            /**
             * Calls CompleteEnableTOTP.
             * @function completeEnableTOTP
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICompleteEnableTOTPParams} request CompleteEnableTOTPParams message or plain object
             * @param {pubg.globalaccounts.Identity.CompleteEnableTOTPCallback} callback Node-style callback called with the error, if any, and CompleteEnableTOTPResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.completeEnableTOTP = function completeEnableTOTP(request, callback) {
                return this.rpcCall(completeEnableTOTP, $root.pubg.globalaccounts.CompleteEnableTOTPParams, $root.pubg.globalaccounts.CompleteEnableTOTPResponse, request, callback);
            }, "name", { value: "CompleteEnableTOTP" });

            /**
             * Calls CompleteEnableTOTP.
             * @function completeEnableTOTP
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ICompleteEnableTOTPParams} request CompleteEnableTOTPParams message or plain object
             * @returns {Promise<pubg.globalaccounts.CompleteEnableTOTPResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#regenerateRecoveryTOPTCodes}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef RegenerateRecoveryTOPTCodesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls RegenerateRecoveryTOPTCodes.
             * @function regenerateRecoveryTOPTCodes
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @param {pubg.globalaccounts.Identity.RegenerateRecoveryTOPTCodesCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.regenerateRecoveryTOPTCodes = function regenerateRecoveryTOPTCodes(request, callback) {
                return this.rpcCall(regenerateRecoveryTOPTCodes, $root.pubg.globalaccounts.GuidInput, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "RegenerateRecoveryTOPTCodes" });

            /**
             * Calls RegenerateRecoveryTOPTCodes.
             * @function regenerateRecoveryTOPTCodes
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#sendTOTPCode}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef SendTOTPCodeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls SendTOTPCode.
             * @function sendTOTPCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @param {pubg.globalaccounts.Identity.SendTOTPCodeCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.sendTOTPCode = function sendTOTPCode(request, callback) {
                return this.rpcCall(sendTOTPCode, $root.pubg.globalaccounts.GuidInput, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "SendTOTPCode" });

            /**
             * Calls SendTOTPCode.
             * @function sendTOTPCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#verifyTOTPCode}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef VerifyTOTPCodeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls VerifyTOTPCode.
             * @function verifyTOTPCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IVerifyTOTPCodeParams} request VerifyTOTPCodeParams message or plain object
             * @param {pubg.globalaccounts.Identity.VerifyTOTPCodeCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.verifyTOTPCode = function verifyTOTPCode(request, callback) {
                return this.rpcCall(verifyTOTPCode, $root.pubg.globalaccounts.VerifyTOTPCodeParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "VerifyTOTPCode" });

            /**
             * Calls VerifyTOTPCode.
             * @function verifyTOTPCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IVerifyTOTPCodeParams} request VerifyTOTPCodeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#checkGUIDLinkDelay}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef CheckGUIDLinkDelayCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls CheckGUIDLinkDelay.
             * @function checkGUIDLinkDelay
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidProviderCombo} request GuidProviderCombo message or plain object
             * @param {pubg.globalaccounts.Identity.CheckGUIDLinkDelayCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.checkGUIDLinkDelay = function checkGUIDLinkDelay(request, callback) {
                return this.rpcCall(checkGUIDLinkDelay, $root.pubg.globalaccounts.GuidProviderCombo, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "CheckGUIDLinkDelay" });

            /**
             * Calls CheckGUIDLinkDelay.
             * @function checkGUIDLinkDelay
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidProviderCombo} request GuidProviderCombo message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#socialLoginLookup}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef SocialLoginLookupCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.GlobalAccountResponse} [response] GlobalAccountResponse
             */

            /**
             * Calls SocialLoginLookup.
             * @function socialLoginLookup
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ISocialLoginParams} request SocialLoginParams message or plain object
             * @param {pubg.globalaccounts.Identity.SocialLoginLookupCallback} callback Node-style callback called with the error, if any, and GlobalAccountResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.socialLoginLookup = function socialLoginLookup(request, callback) {
                return this.rpcCall(socialLoginLookup, $root.pubg.globalaccounts.SocialLoginParams, $root.pubg.globalaccounts.GlobalAccountResponse, request, callback);
            }, "name", { value: "SocialLoginLookup" });

            /**
             * Calls SocialLoginLookup.
             * @function socialLoginLookup
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.ISocialLoginParams} request SocialLoginParams message or plain object
             * @returns {Promise<pubg.globalaccounts.GlobalAccountResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#setPrefLang}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef SetPrefLangCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls SetPrefLang.
             * @function setPrefLang
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IPreferredLangParams} request PreferredLangParams message or plain object
             * @param {pubg.globalaccounts.Identity.SetPrefLangCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.setPrefLang = function setPrefLang(request, callback) {
                return this.rpcCall(setPrefLang, $root.pubg.globalaccounts.PreferredLangParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "SetPrefLang" });

            /**
             * Calls SetPrefLang.
             * @function setPrefLang
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IPreferredLangParams} request PreferredLangParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#magicLinkGenerate}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef MagicLinkGenerateCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.MagicLinkGenerateResponse} [response] MagicLinkGenerateResponse
             */

            /**
             * Calls MagicLinkGenerate.
             * @function magicLinkGenerate
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IMagicLinkGenerateParams} request MagicLinkGenerateParams message or plain object
             * @param {pubg.globalaccounts.Identity.MagicLinkGenerateCallback} callback Node-style callback called with the error, if any, and MagicLinkGenerateResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.magicLinkGenerate = function magicLinkGenerate(request, callback) {
                return this.rpcCall(magicLinkGenerate, $root.pubg.globalaccounts.MagicLinkGenerateParams, $root.pubg.globalaccounts.MagicLinkGenerateResponse, request, callback);
            }, "name", { value: "MagicLinkGenerate" });

            /**
             * Calls MagicLinkGenerate.
             * @function magicLinkGenerate
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IMagicLinkGenerateParams} request MagicLinkGenerateParams message or plain object
             * @returns {Promise<pubg.globalaccounts.MagicLinkGenerateResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#magicLinkValidate}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef MagicLinkValidateCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.MagicLinkValidateResponse} [response] MagicLinkValidateResponse
             */

            /**
             * Calls MagicLinkValidate.
             * @function magicLinkValidate
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IMagicLinkCodeParams} request MagicLinkCodeParams message or plain object
             * @param {pubg.globalaccounts.Identity.MagicLinkValidateCallback} callback Node-style callback called with the error, if any, and MagicLinkValidateResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.magicLinkValidate = function magicLinkValidate(request, callback) {
                return this.rpcCall(magicLinkValidate, $root.pubg.globalaccounts.MagicLinkCodeParams, $root.pubg.globalaccounts.MagicLinkValidateResponse, request, callback);
            }, "name", { value: "MagicLinkValidate" });

            /**
             * Calls MagicLinkValidate.
             * @function magicLinkValidate
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IMagicLinkCodeParams} request MagicLinkCodeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.MagicLinkValidateResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#magicLinkCheckComplete}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef MagicLinkCheckCompleteCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.MagicLinkCheckCompleteResponse} [response] MagicLinkCheckCompleteResponse
             */

            /**
             * Calls MagicLinkCheckComplete.
             * @function magicLinkCheckComplete
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IMagicLinkCodeParams} request MagicLinkCodeParams message or plain object
             * @param {pubg.globalaccounts.Identity.MagicLinkCheckCompleteCallback} callback Node-style callback called with the error, if any, and MagicLinkCheckCompleteResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.magicLinkCheckComplete = function magicLinkCheckComplete(request, callback) {
                return this.rpcCall(magicLinkCheckComplete, $root.pubg.globalaccounts.MagicLinkCodeParams, $root.pubg.globalaccounts.MagicLinkCheckCompleteResponse, request, callback);
            }, "name", { value: "MagicLinkCheckComplete" });

            /**
             * Calls MagicLinkCheckComplete.
             * @function magicLinkCheckComplete
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IMagicLinkCodeParams} request MagicLinkCodeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.MagicLinkCheckCompleteResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#updateCreatorCode}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef UpdateCreatorCodeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls UpdateCreatorCode.
             * @function updateCreatorCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IUpdateCreatorCodeParams} request UpdateCreatorCodeParams message or plain object
             * @param {pubg.globalaccounts.Identity.UpdateCreatorCodeCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.updateCreatorCode = function updateCreatorCode(request, callback) {
                return this.rpcCall(updateCreatorCode, $root.pubg.globalaccounts.UpdateCreatorCodeParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "UpdateCreatorCode" });

            /**
             * Calls UpdateCreatorCode.
             * @function updateCreatorCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IUpdateCreatorCodeParams} request UpdateCreatorCodeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#getCreatorCodes}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef GetCreatorCodesCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.CodesResponse} [response] CodesResponse
             */

            /**
             * Calls GetCreatorCodes.
             * @function getCreatorCodes
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGetCreatorCodesParams} request GetCreatorCodesParams message or plain object
             * @param {pubg.globalaccounts.Identity.GetCreatorCodesCallback} callback Node-style callback called with the error, if any, and CodesResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.getCreatorCodes = function getCreatorCodes(request, callback) {
                return this.rpcCall(getCreatorCodes, $root.pubg.globalaccounts.GetCreatorCodesParams, $root.pubg.globalaccounts.CodesResponse, request, callback);
            }, "name", { value: "GetCreatorCodes" });

            /**
             * Calls GetCreatorCodes.
             * @function getCreatorCodes
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGetCreatorCodesParams} request GetCreatorCodesParams message or plain object
             * @returns {Promise<pubg.globalaccounts.CodesResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#getAccessLogs}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef GetAccessLogsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.AccessLogResponse} [response] AccessLogResponse
             */

            /**
             * Calls GetAccessLogs.
             * @function getAccessLogs
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @param {pubg.globalaccounts.Identity.GetAccessLogsCallback} callback Node-style callback called with the error, if any, and AccessLogResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.getAccessLogs = function getAccessLogs(request, callback) {
                return this.rpcCall(getAccessLogs, $root.pubg.globalaccounts.GuidInput, $root.pubg.globalaccounts.AccessLogResponse, request, callback);
            }, "name", { value: "GetAccessLogs" });

            /**
             * Calls GetAccessLogs.
             * @function getAccessLogs
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGuidInput} request GuidInput message or plain object
             * @returns {Promise<pubg.globalaccounts.AccessLogResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#getPromotions}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef GetPromotionsCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.PromotionsResponse} [response] PromotionsResponse
             */

            /**
             * Calls GetPromotions.
             * @function getPromotions
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGetPromotionsParams} request GetPromotionsParams message or plain object
             * @param {pubg.globalaccounts.Identity.GetPromotionsCallback} callback Node-style callback called with the error, if any, and PromotionsResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.getPromotions = function getPromotions(request, callback) {
                return this.rpcCall(getPromotions, $root.pubg.globalaccounts.GetPromotionsParams, $root.pubg.globalaccounts.PromotionsResponse, request, callback);
            }, "name", { value: "GetPromotions" });

            /**
             * Calls GetPromotions.
             * @function getPromotions
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IGetPromotionsParams} request GetPromotionsParams message or plain object
             * @returns {Promise<pubg.globalaccounts.PromotionsResponse>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link pubg.globalaccounts.Identity#claimPromoCode}.
             * @memberof pubg.globalaccounts.Identity
             * @typedef ClaimPromoCodeCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {pubg.globalaccounts.StatusResponse} [response] StatusResponse
             */

            /**
             * Calls ClaimPromoCode.
             * @function claimPromoCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IClaimPromoCodeParams} request ClaimPromoCodeParams message or plain object
             * @param {pubg.globalaccounts.Identity.ClaimPromoCodeCallback} callback Node-style callback called with the error, if any, and StatusResponse
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Identity.prototype.claimPromoCode = function claimPromoCode(request, callback) {
                return this.rpcCall(claimPromoCode, $root.pubg.globalaccounts.ClaimPromoCodeParams, $root.pubg.globalaccounts.StatusResponse, request, callback);
            }, "name", { value: "ClaimPromoCode" });

            /**
             * Calls ClaimPromoCode.
             * @function claimPromoCode
             * @memberof pubg.globalaccounts.Identity
             * @instance
             * @param {pubg.globalaccounts.IClaimPromoCodeParams} request ClaimPromoCodeParams message or plain object
             * @returns {Promise<pubg.globalaccounts.StatusResponse>} Promise
             * @variation 2
             */

            return Identity;
        })();

        globalaccounts.UserData = (function() {

            /**
             * Properties of a UserData.
             * @memberof pubg.globalaccounts
             * @interface IUserData
             * @property {string|null} [IP] UserData IP
             * @property {string|null} [Locale] UserData Locale
             * @property {string|null} [Relying] UserData Relying
             * @property {Object.<string,string>|null} [Meta] UserData Meta
             */

            /**
             * Constructs a new UserData.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a UserData.
             * @implements IUserData
             * @constructor
             * @param {pubg.globalaccounts.IUserData=} [properties] Properties to set
             */
            function UserData(properties) {
                this.Meta = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UserData IP.
             * @member {string} IP
             * @memberof pubg.globalaccounts.UserData
             * @instance
             */
            UserData.prototype.IP = "";

            /**
             * UserData Locale.
             * @member {string} Locale
             * @memberof pubg.globalaccounts.UserData
             * @instance
             */
            UserData.prototype.Locale = "";

            /**
             * UserData Relying.
             * @member {string} Relying
             * @memberof pubg.globalaccounts.UserData
             * @instance
             */
            UserData.prototype.Relying = "";

            /**
             * UserData Meta.
             * @member {Object.<string,string>} Meta
             * @memberof pubg.globalaccounts.UserData
             * @instance
             */
            UserData.prototype.Meta = $util.emptyObject;

            /**
             * Creates a new UserData instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {pubg.globalaccounts.IUserData=} [properties] Properties to set
             * @returns {pubg.globalaccounts.UserData} UserData instance
             */
            UserData.create = function create(properties) {
                return new UserData(properties);
            };

            /**
             * Encodes the specified UserData message. Does not implicitly {@link pubg.globalaccounts.UserData.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {pubg.globalaccounts.IUserData} message UserData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.IP != null && message.hasOwnProperty("IP"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.IP);
                if (message.Locale != null && message.hasOwnProperty("Locale"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Locale);
                if (message.Relying != null && message.hasOwnProperty("Relying"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Relying);
                if (message.Meta != null && message.hasOwnProperty("Meta"))
                    for (var keys = Object.keys(message.Meta), i = 0; i < keys.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.Meta[keys[i]]).ldelim();
                return writer;
            };

            /**
             * Encodes the specified UserData message, length delimited. Does not implicitly {@link pubg.globalaccounts.UserData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {pubg.globalaccounts.IUserData} message UserData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UserData message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.UserData} UserData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.UserData(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.IP = reader.string();
                        break;
                    case 2:
                        message.Locale = reader.string();
                        break;
                    case 3:
                        message.Relying = reader.string();
                        break;
                    case 4:
                        reader.skip().pos++;
                        if (message.Meta === $util.emptyObject)
                            message.Meta = {};
                        key = reader.string();
                        reader.pos++;
                        message.Meta[key] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UserData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.UserData} UserData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UserData message.
             * @function verify
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.IP != null && message.hasOwnProperty("IP"))
                    if (!$util.isString(message.IP))
                        return "IP: string expected";
                if (message.Locale != null && message.hasOwnProperty("Locale"))
                    if (!$util.isString(message.Locale))
                        return "Locale: string expected";
                if (message.Relying != null && message.hasOwnProperty("Relying"))
                    if (!$util.isString(message.Relying))
                        return "Relying: string expected";
                if (message.Meta != null && message.hasOwnProperty("Meta")) {
                    if (!$util.isObject(message.Meta))
                        return "Meta: object expected";
                    var key = Object.keys(message.Meta);
                    for (var i = 0; i < key.length; ++i)
                        if (!$util.isString(message.Meta[key[i]]))
                            return "Meta: string{k:string} expected";
                }
                return null;
            };

            /**
             * Creates a UserData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.UserData} UserData
             */
            UserData.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.UserData)
                    return object;
                var message = new $root.pubg.globalaccounts.UserData();
                if (object.IP != null)
                    message.IP = String(object.IP);
                if (object.Locale != null)
                    message.Locale = String(object.Locale);
                if (object.Relying != null)
                    message.Relying = String(object.Relying);
                if (object.Meta) {
                    if (typeof object.Meta !== "object")
                        throw TypeError(".pubg.globalaccounts.UserData.Meta: object expected");
                    message.Meta = {};
                    for (var keys = Object.keys(object.Meta), i = 0; i < keys.length; ++i)
                        message.Meta[keys[i]] = String(object.Meta[keys[i]]);
                }
                return message;
            };

            /**
             * Creates a plain object from a UserData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.UserData
             * @static
             * @param {pubg.globalaccounts.UserData} message UserData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.Meta = {};
                if (options.defaults) {
                    object.IP = "";
                    object.Locale = "";
                    object.Relying = "";
                }
                if (message.IP != null && message.hasOwnProperty("IP"))
                    object.IP = message.IP;
                if (message.Locale != null && message.hasOwnProperty("Locale"))
                    object.Locale = message.Locale;
                if (message.Relying != null && message.hasOwnProperty("Relying"))
                    object.Relying = message.Relying;
                var keys2;
                if (message.Meta && (keys2 = Object.keys(message.Meta)).length) {
                    object.Meta = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.Meta[keys2[j]] = message.Meta[keys2[j]];
                }
                return object;
            };

            /**
             * Converts this UserData to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.UserData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UserData;
        })();

        globalaccounts.CreateAccountParams = (function() {

            /**
             * Properties of a CreateAccountParams.
             * @memberof pubg.globalaccounts
             * @interface ICreateAccountParams
             * @property {pubg.globalaccounts.IUserData|null} [User] CreateAccountParams User
             * @property {string|null} [Email] CreateAccountParams Email
             * @property {string|null} [Password] CreateAccountParams Password
             * @property {string|null} [PasswordConfirmation] CreateAccountParams PasswordConfirmation
             * @property {number|Long|null} [DateOfBirth] CreateAccountParams DateOfBirth
             * @property {string|null} [Country] CreateAccountParams Country
             * @property {boolean|null} [EmailOptIn] CreateAccountParams EmailOptIn
             * @property {boolean|null} [TosAccepted] CreateAccountParams TosAccepted
             * @property {string|null} [ClientID] CreateAccountParams ClientID
             * @property {pubg.globalaccounts.IAuthLinkInfo|null} [LinkInfo] CreateAccountParams LinkInfo
             * @property {string|null} [ActivateTest] CreateAccountParams ActivateTest
             * @property {string|null} [Username] CreateAccountParams Username
             */

            /**
             * Constructs a new CreateAccountParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CreateAccountParams.
             * @implements ICreateAccountParams
             * @constructor
             * @param {pubg.globalaccounts.ICreateAccountParams=} [properties] Properties to set
             */
            function CreateAccountParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateAccountParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.User = null;

            /**
             * CreateAccountParams Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.Email = "";

            /**
             * CreateAccountParams Password.
             * @member {string} Password
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.Password = "";

            /**
             * CreateAccountParams PasswordConfirmation.
             * @member {string} PasswordConfirmation
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.PasswordConfirmation = "";

            /**
             * CreateAccountParams DateOfBirth.
             * @member {number|Long} DateOfBirth
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.DateOfBirth = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CreateAccountParams Country.
             * @member {string} Country
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.Country = "";

            /**
             * CreateAccountParams EmailOptIn.
             * @member {boolean} EmailOptIn
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.EmailOptIn = false;

            /**
             * CreateAccountParams TosAccepted.
             * @member {boolean} TosAccepted
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.TosAccepted = false;

            /**
             * CreateAccountParams ClientID.
             * @member {string} ClientID
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.ClientID = "";

            /**
             * CreateAccountParams LinkInfo.
             * @member {pubg.globalaccounts.IAuthLinkInfo|null|undefined} LinkInfo
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.LinkInfo = null;

            /**
             * CreateAccountParams ActivateTest.
             * @member {string} ActivateTest
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.ActivateTest = "";

            /**
             * CreateAccountParams Username.
             * @member {string} Username
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             */
            CreateAccountParams.prototype.Username = "";

            /**
             * Creates a new CreateAccountParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {pubg.globalaccounts.ICreateAccountParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CreateAccountParams} CreateAccountParams instance
             */
            CreateAccountParams.create = function create(properties) {
                return new CreateAccountParams(properties);
            };

            /**
             * Encodes the specified CreateAccountParams message. Does not implicitly {@link pubg.globalaccounts.CreateAccountParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {pubg.globalaccounts.ICreateAccountParams} message CreateAccountParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateAccountParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Email);
                if (message.Password != null && message.hasOwnProperty("Password"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Password);
                if (message.PasswordConfirmation != null && message.hasOwnProperty("PasswordConfirmation"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.PasswordConfirmation);
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.DateOfBirth);
                if (message.Country != null && message.hasOwnProperty("Country"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Country);
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.EmailOptIn);
                if (message.TosAccepted != null && message.hasOwnProperty("TosAccepted"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.TosAccepted);
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.ClientID);
                if (message.LinkInfo != null && message.hasOwnProperty("LinkInfo"))
                    $root.pubg.globalaccounts.AuthLinkInfo.encode(message.LinkInfo, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.ActivateTest != null && message.hasOwnProperty("ActivateTest"))
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.ActivateTest);
                if (message.Username != null && message.hasOwnProperty("Username"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.Username);
                return writer;
            };

            /**
             * Encodes the specified CreateAccountParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.CreateAccountParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {pubg.globalaccounts.ICreateAccountParams} message CreateAccountParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateAccountParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateAccountParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CreateAccountParams} CreateAccountParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateAccountParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CreateAccountParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.Email = reader.string();
                        break;
                    case 4:
                        message.Password = reader.string();
                        break;
                    case 5:
                        message.PasswordConfirmation = reader.string();
                        break;
                    case 6:
                        message.DateOfBirth = reader.int64();
                        break;
                    case 7:
                        message.Country = reader.string();
                        break;
                    case 8:
                        message.EmailOptIn = reader.bool();
                        break;
                    case 9:
                        message.TosAccepted = reader.bool();
                        break;
                    case 10:
                        message.ClientID = reader.string();
                        break;
                    case 12:
                        message.LinkInfo = $root.pubg.globalaccounts.AuthLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.ActivateTest = reader.string();
                        break;
                    case 14:
                        message.Username = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CreateAccountParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CreateAccountParams} CreateAccountParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateAccountParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateAccountParams message.
             * @function verify
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateAccountParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.Password != null && message.hasOwnProperty("Password"))
                    if (!$util.isString(message.Password))
                        return "Password: string expected";
                if (message.PasswordConfirmation != null && message.hasOwnProperty("PasswordConfirmation"))
                    if (!$util.isString(message.PasswordConfirmation))
                        return "PasswordConfirmation: string expected";
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    if (!$util.isInteger(message.DateOfBirth) && !(message.DateOfBirth && $util.isInteger(message.DateOfBirth.low) && $util.isInteger(message.DateOfBirth.high)))
                        return "DateOfBirth: integer|Long expected";
                if (message.Country != null && message.hasOwnProperty("Country"))
                    if (!$util.isString(message.Country))
                        return "Country: string expected";
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    if (typeof message.EmailOptIn !== "boolean")
                        return "EmailOptIn: boolean expected";
                if (message.TosAccepted != null && message.hasOwnProperty("TosAccepted"))
                    if (typeof message.TosAccepted !== "boolean")
                        return "TosAccepted: boolean expected";
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    if (!$util.isString(message.ClientID))
                        return "ClientID: string expected";
                if (message.LinkInfo != null && message.hasOwnProperty("LinkInfo")) {
                    var error = $root.pubg.globalaccounts.AuthLinkInfo.verify(message.LinkInfo);
                    if (error)
                        return "LinkInfo." + error;
                }
                if (message.ActivateTest != null && message.hasOwnProperty("ActivateTest"))
                    if (!$util.isString(message.ActivateTest))
                        return "ActivateTest: string expected";
                if (message.Username != null && message.hasOwnProperty("Username"))
                    if (!$util.isString(message.Username))
                        return "Username: string expected";
                return null;
            };

            /**
             * Creates a CreateAccountParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CreateAccountParams} CreateAccountParams
             */
            CreateAccountParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CreateAccountParams)
                    return object;
                var message = new $root.pubg.globalaccounts.CreateAccountParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.CreateAccountParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.Password != null)
                    message.Password = String(object.Password);
                if (object.PasswordConfirmation != null)
                    message.PasswordConfirmation = String(object.PasswordConfirmation);
                if (object.DateOfBirth != null)
                    if ($util.Long)
                        (message.DateOfBirth = $util.Long.fromValue(object.DateOfBirth)).unsigned = false;
                    else if (typeof object.DateOfBirth === "string")
                        message.DateOfBirth = parseInt(object.DateOfBirth, 10);
                    else if (typeof object.DateOfBirth === "number")
                        message.DateOfBirth = object.DateOfBirth;
                    else if (typeof object.DateOfBirth === "object")
                        message.DateOfBirth = new $util.LongBits(object.DateOfBirth.low >>> 0, object.DateOfBirth.high >>> 0).toNumber();
                if (object.Country != null)
                    message.Country = String(object.Country);
                if (object.EmailOptIn != null)
                    message.EmailOptIn = Boolean(object.EmailOptIn);
                if (object.TosAccepted != null)
                    message.TosAccepted = Boolean(object.TosAccepted);
                if (object.ClientID != null)
                    message.ClientID = String(object.ClientID);
                if (object.LinkInfo != null) {
                    if (typeof object.LinkInfo !== "object")
                        throw TypeError(".pubg.globalaccounts.CreateAccountParams.LinkInfo: object expected");
                    message.LinkInfo = $root.pubg.globalaccounts.AuthLinkInfo.fromObject(object.LinkInfo);
                }
                if (object.ActivateTest != null)
                    message.ActivateTest = String(object.ActivateTest);
                if (object.Username != null)
                    message.Username = String(object.Username);
                return message;
            };

            /**
             * Creates a plain object from a CreateAccountParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @static
             * @param {pubg.globalaccounts.CreateAccountParams} message CreateAccountParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateAccountParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.Email = "";
                    object.Password = "";
                    object.PasswordConfirmation = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.DateOfBirth = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.DateOfBirth = options.longs === String ? "0" : 0;
                    object.Country = "";
                    object.EmailOptIn = false;
                    object.TosAccepted = false;
                    object.ClientID = "";
                    object.LinkInfo = null;
                    object.ActivateTest = "";
                    object.Username = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.Password != null && message.hasOwnProperty("Password"))
                    object.Password = message.Password;
                if (message.PasswordConfirmation != null && message.hasOwnProperty("PasswordConfirmation"))
                    object.PasswordConfirmation = message.PasswordConfirmation;
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    if (typeof message.DateOfBirth === "number")
                        object.DateOfBirth = options.longs === String ? String(message.DateOfBirth) : message.DateOfBirth;
                    else
                        object.DateOfBirth = options.longs === String ? $util.Long.prototype.toString.call(message.DateOfBirth) : options.longs === Number ? new $util.LongBits(message.DateOfBirth.low >>> 0, message.DateOfBirth.high >>> 0).toNumber() : message.DateOfBirth;
                if (message.Country != null && message.hasOwnProperty("Country"))
                    object.Country = message.Country;
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    object.EmailOptIn = message.EmailOptIn;
                if (message.TosAccepted != null && message.hasOwnProperty("TosAccepted"))
                    object.TosAccepted = message.TosAccepted;
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    object.ClientID = message.ClientID;
                if (message.LinkInfo != null && message.hasOwnProperty("LinkInfo"))
                    object.LinkInfo = $root.pubg.globalaccounts.AuthLinkInfo.toObject(message.LinkInfo, options);
                if (message.ActivateTest != null && message.hasOwnProperty("ActivateTest"))
                    object.ActivateTest = message.ActivateTest;
                if (message.Username != null && message.hasOwnProperty("Username"))
                    object.Username = message.Username;
                return object;
            };

            /**
             * Converts this CreateAccountParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CreateAccountParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateAccountParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CreateAccountParams;
        })();

        globalaccounts.AuthLinkInfo = (function() {

            /**
             * Properties of an AuthLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IAuthLinkInfo
             * @property {string|null} [Provider] AuthLinkInfo Provider
             * @property {pubg.globalaccounts.IFacebookLinkInfo|null} [Facebook] AuthLinkInfo Facebook
             * @property {pubg.globalaccounts.IGoogleLinkInfo|null} [Google] AuthLinkInfo Google
             * @property {pubg.globalaccounts.ILineLinkInfo|null} [Line] AuthLinkInfo Line
             * @property {pubg.globalaccounts.IPlaystationLinkInfo|null} [Playstation] AuthLinkInfo Playstation
             * @property {pubg.globalaccounts.ISteamLinkInfo|null} [Steam] AuthLinkInfo Steam
             * @property {pubg.globalaccounts.ITwitchLinkInfo|null} [Twitch] AuthLinkInfo Twitch
             * @property {pubg.globalaccounts.ITwitterLinkInfo|null} [Twitter] AuthLinkInfo Twitter
             * @property {pubg.globalaccounts.IVKLinkInfo|null} [VK] AuthLinkInfo VK
             * @property {pubg.globalaccounts.IXboxLinkInfo|null} [Xbox] AuthLinkInfo Xbox
             * @property {pubg.globalaccounts.IStadiaLinkInfo|null} [Stadia] AuthLinkInfo Stadia
             * @property {pubg.globalaccounts.IDiscordLinkInfo|null} [Discord] AuthLinkInfo Discord
             * @property {pubg.globalaccounts.IRedditLinkInfo|null} [Reddit] AuthLinkInfo Reddit
             */

            /**
             * Constructs a new AuthLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an AuthLinkInfo.
             * @implements IAuthLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IAuthLinkInfo=} [properties] Properties to set
             */
            function AuthLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuthLinkInfo Provider.
             * @member {string} Provider
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Provider = "";

            /**
             * AuthLinkInfo Facebook.
             * @member {pubg.globalaccounts.IFacebookLinkInfo|null|undefined} Facebook
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Facebook = null;

            /**
             * AuthLinkInfo Google.
             * @member {pubg.globalaccounts.IGoogleLinkInfo|null|undefined} Google
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Google = null;

            /**
             * AuthLinkInfo Line.
             * @member {pubg.globalaccounts.ILineLinkInfo|null|undefined} Line
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Line = null;

            /**
             * AuthLinkInfo Playstation.
             * @member {pubg.globalaccounts.IPlaystationLinkInfo|null|undefined} Playstation
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Playstation = null;

            /**
             * AuthLinkInfo Steam.
             * @member {pubg.globalaccounts.ISteamLinkInfo|null|undefined} Steam
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Steam = null;

            /**
             * AuthLinkInfo Twitch.
             * @member {pubg.globalaccounts.ITwitchLinkInfo|null|undefined} Twitch
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Twitch = null;

            /**
             * AuthLinkInfo Twitter.
             * @member {pubg.globalaccounts.ITwitterLinkInfo|null|undefined} Twitter
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Twitter = null;

            /**
             * AuthLinkInfo VK.
             * @member {pubg.globalaccounts.IVKLinkInfo|null|undefined} VK
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.VK = null;

            /**
             * AuthLinkInfo Xbox.
             * @member {pubg.globalaccounts.IXboxLinkInfo|null|undefined} Xbox
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Xbox = null;

            /**
             * AuthLinkInfo Stadia.
             * @member {pubg.globalaccounts.IStadiaLinkInfo|null|undefined} Stadia
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Stadia = null;

            /**
             * AuthLinkInfo Discord.
             * @member {pubg.globalaccounts.IDiscordLinkInfo|null|undefined} Discord
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Discord = null;

            /**
             * AuthLinkInfo Reddit.
             * @member {pubg.globalaccounts.IRedditLinkInfo|null|undefined} Reddit
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             */
            AuthLinkInfo.prototype.Reddit = null;

            /**
             * Creates a new AuthLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {pubg.globalaccounts.IAuthLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.AuthLinkInfo} AuthLinkInfo instance
             */
            AuthLinkInfo.create = function create(properties) {
                return new AuthLinkInfo(properties);
            };

            /**
             * Encodes the specified AuthLinkInfo message. Does not implicitly {@link pubg.globalaccounts.AuthLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {pubg.globalaccounts.IAuthLinkInfo} message AuthLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.Provider);
                if (message.Facebook != null && message.hasOwnProperty("Facebook"))
                    $root.pubg.globalaccounts.FacebookLinkInfo.encode(message.Facebook, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.Google != null && message.hasOwnProperty("Google"))
                    $root.pubg.globalaccounts.GoogleLinkInfo.encode(message.Google, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.Line != null && message.hasOwnProperty("Line"))
                    $root.pubg.globalaccounts.LineLinkInfo.encode(message.Line, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.Playstation != null && message.hasOwnProperty("Playstation"))
                    $root.pubg.globalaccounts.PlaystationLinkInfo.encode(message.Playstation, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.Steam != null && message.hasOwnProperty("Steam"))
                    $root.pubg.globalaccounts.SteamLinkInfo.encode(message.Steam, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.Twitch != null && message.hasOwnProperty("Twitch"))
                    $root.pubg.globalaccounts.TwitchLinkInfo.encode(message.Twitch, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.Twitter != null && message.hasOwnProperty("Twitter"))
                    $root.pubg.globalaccounts.TwitterLinkInfo.encode(message.Twitter, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.VK != null && message.hasOwnProperty("VK"))
                    $root.pubg.globalaccounts.VKLinkInfo.encode(message.VK, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.Xbox != null && message.hasOwnProperty("Xbox"))
                    $root.pubg.globalaccounts.XboxLinkInfo.encode(message.Xbox, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.Stadia != null && message.hasOwnProperty("Stadia"))
                    $root.pubg.globalaccounts.StadiaLinkInfo.encode(message.Stadia, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.Discord != null && message.hasOwnProperty("Discord"))
                    $root.pubg.globalaccounts.DiscordLinkInfo.encode(message.Discord, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.Reddit != null && message.hasOwnProperty("Reddit"))
                    $root.pubg.globalaccounts.RedditLinkInfo.encode(message.Reddit, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AuthLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.AuthLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {pubg.globalaccounts.IAuthLinkInfo} message AuthLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuthLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.AuthLinkInfo} AuthLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.AuthLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Provider = reader.string();
                        break;
                    case 3:
                        message.Facebook = $root.pubg.globalaccounts.FacebookLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.Google = $root.pubg.globalaccounts.GoogleLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.Line = $root.pubg.globalaccounts.LineLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.Playstation = $root.pubg.globalaccounts.PlaystationLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.Steam = $root.pubg.globalaccounts.SteamLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.Twitch = $root.pubg.globalaccounts.TwitchLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.Twitter = $root.pubg.globalaccounts.TwitterLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.VK = $root.pubg.globalaccounts.VKLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.Xbox = $root.pubg.globalaccounts.XboxLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.Stadia = $root.pubg.globalaccounts.StadiaLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.Discord = $root.pubg.globalaccounts.DiscordLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.Reddit = $root.pubg.globalaccounts.RedditLinkInfo.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuthLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.AuthLinkInfo} AuthLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuthLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuthLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    if (!$util.isString(message.Provider))
                        return "Provider: string expected";
                if (message.Facebook != null && message.hasOwnProperty("Facebook")) {
                    var error = $root.pubg.globalaccounts.FacebookLinkInfo.verify(message.Facebook);
                    if (error)
                        return "Facebook." + error;
                }
                if (message.Google != null && message.hasOwnProperty("Google")) {
                    var error = $root.pubg.globalaccounts.GoogleLinkInfo.verify(message.Google);
                    if (error)
                        return "Google." + error;
                }
                if (message.Line != null && message.hasOwnProperty("Line")) {
                    var error = $root.pubg.globalaccounts.LineLinkInfo.verify(message.Line);
                    if (error)
                        return "Line." + error;
                }
                if (message.Playstation != null && message.hasOwnProperty("Playstation")) {
                    var error = $root.pubg.globalaccounts.PlaystationLinkInfo.verify(message.Playstation);
                    if (error)
                        return "Playstation." + error;
                }
                if (message.Steam != null && message.hasOwnProperty("Steam")) {
                    var error = $root.pubg.globalaccounts.SteamLinkInfo.verify(message.Steam);
                    if (error)
                        return "Steam." + error;
                }
                if (message.Twitch != null && message.hasOwnProperty("Twitch")) {
                    var error = $root.pubg.globalaccounts.TwitchLinkInfo.verify(message.Twitch);
                    if (error)
                        return "Twitch." + error;
                }
                if (message.Twitter != null && message.hasOwnProperty("Twitter")) {
                    var error = $root.pubg.globalaccounts.TwitterLinkInfo.verify(message.Twitter);
                    if (error)
                        return "Twitter." + error;
                }
                if (message.VK != null && message.hasOwnProperty("VK")) {
                    var error = $root.pubg.globalaccounts.VKLinkInfo.verify(message.VK);
                    if (error)
                        return "VK." + error;
                }
                if (message.Xbox != null && message.hasOwnProperty("Xbox")) {
                    var error = $root.pubg.globalaccounts.XboxLinkInfo.verify(message.Xbox);
                    if (error)
                        return "Xbox." + error;
                }
                if (message.Stadia != null && message.hasOwnProperty("Stadia")) {
                    var error = $root.pubg.globalaccounts.StadiaLinkInfo.verify(message.Stadia);
                    if (error)
                        return "Stadia." + error;
                }
                if (message.Discord != null && message.hasOwnProperty("Discord")) {
                    var error = $root.pubg.globalaccounts.DiscordLinkInfo.verify(message.Discord);
                    if (error)
                        return "Discord." + error;
                }
                if (message.Reddit != null && message.hasOwnProperty("Reddit")) {
                    var error = $root.pubg.globalaccounts.RedditLinkInfo.verify(message.Reddit);
                    if (error)
                        return "Reddit." + error;
                }
                return null;
            };

            /**
             * Creates an AuthLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.AuthLinkInfo} AuthLinkInfo
             */
            AuthLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.AuthLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.AuthLinkInfo();
                if (object.Provider != null)
                    message.Provider = String(object.Provider);
                if (object.Facebook != null) {
                    if (typeof object.Facebook !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Facebook: object expected");
                    message.Facebook = $root.pubg.globalaccounts.FacebookLinkInfo.fromObject(object.Facebook);
                }
                if (object.Google != null) {
                    if (typeof object.Google !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Google: object expected");
                    message.Google = $root.pubg.globalaccounts.GoogleLinkInfo.fromObject(object.Google);
                }
                if (object.Line != null) {
                    if (typeof object.Line !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Line: object expected");
                    message.Line = $root.pubg.globalaccounts.LineLinkInfo.fromObject(object.Line);
                }
                if (object.Playstation != null) {
                    if (typeof object.Playstation !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Playstation: object expected");
                    message.Playstation = $root.pubg.globalaccounts.PlaystationLinkInfo.fromObject(object.Playstation);
                }
                if (object.Steam != null) {
                    if (typeof object.Steam !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Steam: object expected");
                    message.Steam = $root.pubg.globalaccounts.SteamLinkInfo.fromObject(object.Steam);
                }
                if (object.Twitch != null) {
                    if (typeof object.Twitch !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Twitch: object expected");
                    message.Twitch = $root.pubg.globalaccounts.TwitchLinkInfo.fromObject(object.Twitch);
                }
                if (object.Twitter != null) {
                    if (typeof object.Twitter !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Twitter: object expected");
                    message.Twitter = $root.pubg.globalaccounts.TwitterLinkInfo.fromObject(object.Twitter);
                }
                if (object.VK != null) {
                    if (typeof object.VK !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.VK: object expected");
                    message.VK = $root.pubg.globalaccounts.VKLinkInfo.fromObject(object.VK);
                }
                if (object.Xbox != null) {
                    if (typeof object.Xbox !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Xbox: object expected");
                    message.Xbox = $root.pubg.globalaccounts.XboxLinkInfo.fromObject(object.Xbox);
                }
                if (object.Stadia != null) {
                    if (typeof object.Stadia !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Stadia: object expected");
                    message.Stadia = $root.pubg.globalaccounts.StadiaLinkInfo.fromObject(object.Stadia);
                }
                if (object.Discord != null) {
                    if (typeof object.Discord !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Discord: object expected");
                    message.Discord = $root.pubg.globalaccounts.DiscordLinkInfo.fromObject(object.Discord);
                }
                if (object.Reddit != null) {
                    if (typeof object.Reddit !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthLinkInfo.Reddit: object expected");
                    message.Reddit = $root.pubg.globalaccounts.RedditLinkInfo.fromObject(object.Reddit);
                }
                return message;
            };

            /**
             * Creates a plain object from an AuthLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @static
             * @param {pubg.globalaccounts.AuthLinkInfo} message AuthLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuthLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Provider = "";
                    object.Facebook = null;
                    object.Google = null;
                    object.Line = null;
                    object.Playstation = null;
                    object.Steam = null;
                    object.Twitch = null;
                    object.Twitter = null;
                    object.VK = null;
                    object.Xbox = null;
                    object.Stadia = null;
                    object.Discord = null;
                    object.Reddit = null;
                }
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    object.Provider = message.Provider;
                if (message.Facebook != null && message.hasOwnProperty("Facebook"))
                    object.Facebook = $root.pubg.globalaccounts.FacebookLinkInfo.toObject(message.Facebook, options);
                if (message.Google != null && message.hasOwnProperty("Google"))
                    object.Google = $root.pubg.globalaccounts.GoogleLinkInfo.toObject(message.Google, options);
                if (message.Line != null && message.hasOwnProperty("Line"))
                    object.Line = $root.pubg.globalaccounts.LineLinkInfo.toObject(message.Line, options);
                if (message.Playstation != null && message.hasOwnProperty("Playstation"))
                    object.Playstation = $root.pubg.globalaccounts.PlaystationLinkInfo.toObject(message.Playstation, options);
                if (message.Steam != null && message.hasOwnProperty("Steam"))
                    object.Steam = $root.pubg.globalaccounts.SteamLinkInfo.toObject(message.Steam, options);
                if (message.Twitch != null && message.hasOwnProperty("Twitch"))
                    object.Twitch = $root.pubg.globalaccounts.TwitchLinkInfo.toObject(message.Twitch, options);
                if (message.Twitter != null && message.hasOwnProperty("Twitter"))
                    object.Twitter = $root.pubg.globalaccounts.TwitterLinkInfo.toObject(message.Twitter, options);
                if (message.VK != null && message.hasOwnProperty("VK"))
                    object.VK = $root.pubg.globalaccounts.VKLinkInfo.toObject(message.VK, options);
                if (message.Xbox != null && message.hasOwnProperty("Xbox"))
                    object.Xbox = $root.pubg.globalaccounts.XboxLinkInfo.toObject(message.Xbox, options);
                if (message.Stadia != null && message.hasOwnProperty("Stadia"))
                    object.Stadia = $root.pubg.globalaccounts.StadiaLinkInfo.toObject(message.Stadia, options);
                if (message.Discord != null && message.hasOwnProperty("Discord"))
                    object.Discord = $root.pubg.globalaccounts.DiscordLinkInfo.toObject(message.Discord, options);
                if (message.Reddit != null && message.hasOwnProperty("Reddit"))
                    object.Reddit = $root.pubg.globalaccounts.RedditLinkInfo.toObject(message.Reddit, options);
                return object;
            };

            /**
             * Converts this AuthLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.AuthLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuthLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuthLinkInfo;
        })();

        globalaccounts.FacebookLinkInfo = (function() {

            /**
             * Properties of a FacebookLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IFacebookLinkInfo
             * @property {string|null} [ID] FacebookLinkInfo ID
             * @property {string|null} [DisplayName] FacebookLinkInfo DisplayName
             * @property {string|null} [AccessToken] FacebookLinkInfo AccessToken
             * @property {string|null} [Email] FacebookLinkInfo Email
             */

            /**
             * Constructs a new FacebookLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a FacebookLinkInfo.
             * @implements IFacebookLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IFacebookLinkInfo=} [properties] Properties to set
             */
            function FacebookLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FacebookLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @instance
             */
            FacebookLinkInfo.prototype.ID = "";

            /**
             * FacebookLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @instance
             */
            FacebookLinkInfo.prototype.DisplayName = "";

            /**
             * FacebookLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @instance
             */
            FacebookLinkInfo.prototype.AccessToken = "";

            /**
             * FacebookLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @instance
             */
            FacebookLinkInfo.prototype.Email = "";

            /**
             * Creates a new FacebookLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {pubg.globalaccounts.IFacebookLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.FacebookLinkInfo} FacebookLinkInfo instance
             */
            FacebookLinkInfo.create = function create(properties) {
                return new FacebookLinkInfo(properties);
            };

            /**
             * Encodes the specified FacebookLinkInfo message. Does not implicitly {@link pubg.globalaccounts.FacebookLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {pubg.globalaccounts.IFacebookLinkInfo} message FacebookLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FacebookLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                return writer;
            };

            /**
             * Encodes the specified FacebookLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.FacebookLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {pubg.globalaccounts.IFacebookLinkInfo} message FacebookLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FacebookLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FacebookLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.FacebookLinkInfo} FacebookLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FacebookLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.FacebookLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FacebookLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.FacebookLinkInfo} FacebookLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FacebookLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FacebookLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FacebookLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                return null;
            };

            /**
             * Creates a FacebookLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.FacebookLinkInfo} FacebookLinkInfo
             */
            FacebookLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.FacebookLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.FacebookLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.Email != null)
                    message.Email = String(object.Email);
                return message;
            };

            /**
             * Creates a plain object from a FacebookLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @static
             * @param {pubg.globalaccounts.FacebookLinkInfo} message FacebookLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FacebookLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.Email = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                return object;
            };

            /**
             * Converts this FacebookLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.FacebookLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FacebookLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FacebookLinkInfo;
        })();

        globalaccounts.GoogleLinkInfo = (function() {

            /**
             * Properties of a GoogleLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IGoogleLinkInfo
             * @property {string|null} [ID] GoogleLinkInfo ID
             * @property {string|null} [DisplayName] GoogleLinkInfo DisplayName
             * @property {string|null} [AccessToken] GoogleLinkInfo AccessToken
             * @property {string|null} [RefreshToken] GoogleLinkInfo RefreshToken
             * @property {string|null} [Email] GoogleLinkInfo Email
             */

            /**
             * Constructs a new GoogleLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GoogleLinkInfo.
             * @implements IGoogleLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IGoogleLinkInfo=} [properties] Properties to set
             */
            function GoogleLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GoogleLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @instance
             */
            GoogleLinkInfo.prototype.ID = "";

            /**
             * GoogleLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @instance
             */
            GoogleLinkInfo.prototype.DisplayName = "";

            /**
             * GoogleLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @instance
             */
            GoogleLinkInfo.prototype.AccessToken = "";

            /**
             * GoogleLinkInfo RefreshToken.
             * @member {string} RefreshToken
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @instance
             */
            GoogleLinkInfo.prototype.RefreshToken = "";

            /**
             * GoogleLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @instance
             */
            GoogleLinkInfo.prototype.Email = "";

            /**
             * Creates a new GoogleLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {pubg.globalaccounts.IGoogleLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GoogleLinkInfo} GoogleLinkInfo instance
             */
            GoogleLinkInfo.create = function create(properties) {
                return new GoogleLinkInfo(properties);
            };

            /**
             * Encodes the specified GoogleLinkInfo message. Does not implicitly {@link pubg.globalaccounts.GoogleLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {pubg.globalaccounts.IGoogleLinkInfo} message GoogleLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoogleLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.RefreshToken);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Email);
                return writer;
            };

            /**
             * Encodes the specified GoogleLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.GoogleLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {pubg.globalaccounts.IGoogleLinkInfo} message GoogleLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoogleLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GoogleLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GoogleLinkInfo} GoogleLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoogleLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GoogleLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.RefreshToken = reader.string();
                        break;
                    case 5:
                        message.Email = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GoogleLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GoogleLinkInfo} GoogleLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoogleLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GoogleLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GoogleLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    if (!$util.isString(message.RefreshToken))
                        return "RefreshToken: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                return null;
            };

            /**
             * Creates a GoogleLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GoogleLinkInfo} GoogleLinkInfo
             */
            GoogleLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GoogleLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.GoogleLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.RefreshToken != null)
                    message.RefreshToken = String(object.RefreshToken);
                if (object.Email != null)
                    message.Email = String(object.Email);
                return message;
            };

            /**
             * Creates a plain object from a GoogleLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @static
             * @param {pubg.globalaccounts.GoogleLinkInfo} message GoogleLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GoogleLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.RefreshToken = "";
                    object.Email = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    object.RefreshToken = message.RefreshToken;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                return object;
            };

            /**
             * Converts this GoogleLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GoogleLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GoogleLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GoogleLinkInfo;
        })();

        globalaccounts.LineLinkInfo = (function() {

            /**
             * Properties of a LineLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface ILineLinkInfo
             * @property {string|null} [ID] LineLinkInfo ID
             * @property {string|null} [DisplayName] LineLinkInfo DisplayName
             * @property {string|null} [AccessToken] LineLinkInfo AccessToken
             * @property {string|null} [RefreshToken] LineLinkInfo RefreshToken
             * @property {string|null} [Email] LineLinkInfo Email
             */

            /**
             * Constructs a new LineLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a LineLinkInfo.
             * @implements ILineLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.ILineLinkInfo=} [properties] Properties to set
             */
            function LineLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LineLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @instance
             */
            LineLinkInfo.prototype.ID = "";

            /**
             * LineLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @instance
             */
            LineLinkInfo.prototype.DisplayName = "";

            /**
             * LineLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @instance
             */
            LineLinkInfo.prototype.AccessToken = "";

            /**
             * LineLinkInfo RefreshToken.
             * @member {string} RefreshToken
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @instance
             */
            LineLinkInfo.prototype.RefreshToken = "";

            /**
             * LineLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @instance
             */
            LineLinkInfo.prototype.Email = "";

            /**
             * Creates a new LineLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {pubg.globalaccounts.ILineLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.LineLinkInfo} LineLinkInfo instance
             */
            LineLinkInfo.create = function create(properties) {
                return new LineLinkInfo(properties);
            };

            /**
             * Encodes the specified LineLinkInfo message. Does not implicitly {@link pubg.globalaccounts.LineLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {pubg.globalaccounts.ILineLinkInfo} message LineLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LineLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.RefreshToken);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Email);
                return writer;
            };

            /**
             * Encodes the specified LineLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.LineLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {pubg.globalaccounts.ILineLinkInfo} message LineLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LineLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LineLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.LineLinkInfo} LineLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LineLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.LineLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.RefreshToken = reader.string();
                        break;
                    case 5:
                        message.Email = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LineLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.LineLinkInfo} LineLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LineLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LineLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LineLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    if (!$util.isString(message.RefreshToken))
                        return "RefreshToken: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                return null;
            };

            /**
             * Creates a LineLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.LineLinkInfo} LineLinkInfo
             */
            LineLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.LineLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.LineLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.RefreshToken != null)
                    message.RefreshToken = String(object.RefreshToken);
                if (object.Email != null)
                    message.Email = String(object.Email);
                return message;
            };

            /**
             * Creates a plain object from a LineLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @static
             * @param {pubg.globalaccounts.LineLinkInfo} message LineLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LineLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.RefreshToken = "";
                    object.Email = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    object.RefreshToken = message.RefreshToken;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                return object;
            };

            /**
             * Converts this LineLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.LineLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LineLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LineLinkInfo;
        })();

        globalaccounts.PlaystationLinkInfo = (function() {

            /**
             * Properties of a PlaystationLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IPlaystationLinkInfo
             * @property {string|null} [AccountID] PlaystationLinkInfo AccountID
             * @property {string|null} [DisplayName] PlaystationLinkInfo DisplayName
             * @property {string|null} [AccessToken] PlaystationLinkInfo AccessToken
             * @property {number|null} [Age] PlaystationLinkInfo Age
             * @property {string|null} [CommunityDomain] PlaystationLinkInfo CommunityDomain
             * @property {string|null} [DateOfBirth] PlaystationLinkInfo DateOfBirth
             * @property {string|null} [Language] PlaystationLinkInfo Language
             * @property {pubg.globalaccounts.IPSNParentalControl|null} [ParentalControl] PlaystationLinkInfo ParentalControl
             * @property {string|null} [Region] PlaystationLinkInfo Region
             * @property {boolean|null} [IsSubAccount] PlaystationLinkInfo IsSubAccount
             */

            /**
             * Constructs a new PlaystationLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PlaystationLinkInfo.
             * @implements IPlaystationLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IPlaystationLinkInfo=} [properties] Properties to set
             */
            function PlaystationLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlaystationLinkInfo AccountID.
             * @member {string} AccountID
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.AccountID = "";

            /**
             * PlaystationLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.DisplayName = "";

            /**
             * PlaystationLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.AccessToken = "";

            /**
             * PlaystationLinkInfo Age.
             * @member {number} Age
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.Age = 0;

            /**
             * PlaystationLinkInfo CommunityDomain.
             * @member {string} CommunityDomain
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.CommunityDomain = "";

            /**
             * PlaystationLinkInfo DateOfBirth.
             * @member {string} DateOfBirth
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.DateOfBirth = "";

            /**
             * PlaystationLinkInfo Language.
             * @member {string} Language
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.Language = "";

            /**
             * PlaystationLinkInfo ParentalControl.
             * @member {pubg.globalaccounts.IPSNParentalControl|null|undefined} ParentalControl
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.ParentalControl = null;

            /**
             * PlaystationLinkInfo Region.
             * @member {string} Region
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.Region = "";

            /**
             * PlaystationLinkInfo IsSubAccount.
             * @member {boolean} IsSubAccount
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             */
            PlaystationLinkInfo.prototype.IsSubAccount = false;

            /**
             * Creates a new PlaystationLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {pubg.globalaccounts.IPlaystationLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PlaystationLinkInfo} PlaystationLinkInfo instance
             */
            PlaystationLinkInfo.create = function create(properties) {
                return new PlaystationLinkInfo(properties);
            };

            /**
             * Encodes the specified PlaystationLinkInfo message. Does not implicitly {@link pubg.globalaccounts.PlaystationLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {pubg.globalaccounts.IPlaystationLinkInfo} message PlaystationLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaystationLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.AccountID != null && message.hasOwnProperty("AccountID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.AccountID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.Age != null && message.hasOwnProperty("Age"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.Age);
                if (message.CommunityDomain != null && message.hasOwnProperty("CommunityDomain"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.CommunityDomain);
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.DateOfBirth);
                if (message.Language != null && message.hasOwnProperty("Language"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Language);
                if (message.ParentalControl != null && message.hasOwnProperty("ParentalControl"))
                    $root.pubg.globalaccounts.PSNParentalControl.encode(message.ParentalControl, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.Region != null && message.hasOwnProperty("Region"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.Region);
                if (message.IsSubAccount != null && message.hasOwnProperty("IsSubAccount"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.IsSubAccount);
                return writer;
            };

            /**
             * Encodes the specified PlaystationLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.PlaystationLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {pubg.globalaccounts.IPlaystationLinkInfo} message PlaystationLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaystationLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlaystationLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PlaystationLinkInfo} PlaystationLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaystationLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PlaystationLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.AccountID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.Age = reader.int32();
                        break;
                    case 5:
                        message.CommunityDomain = reader.string();
                        break;
                    case 6:
                        message.DateOfBirth = reader.string();
                        break;
                    case 7:
                        message.Language = reader.string();
                        break;
                    case 8:
                        message.ParentalControl = $root.pubg.globalaccounts.PSNParentalControl.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.Region = reader.string();
                        break;
                    case 10:
                        message.IsSubAccount = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlaystationLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PlaystationLinkInfo} PlaystationLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaystationLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlaystationLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaystationLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.AccountID != null && message.hasOwnProperty("AccountID"))
                    if (!$util.isString(message.AccountID))
                        return "AccountID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.Age != null && message.hasOwnProperty("Age"))
                    if (!$util.isInteger(message.Age))
                        return "Age: integer expected";
                if (message.CommunityDomain != null && message.hasOwnProperty("CommunityDomain"))
                    if (!$util.isString(message.CommunityDomain))
                        return "CommunityDomain: string expected";
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    if (!$util.isString(message.DateOfBirth))
                        return "DateOfBirth: string expected";
                if (message.Language != null && message.hasOwnProperty("Language"))
                    if (!$util.isString(message.Language))
                        return "Language: string expected";
                if (message.ParentalControl != null && message.hasOwnProperty("ParentalControl")) {
                    var error = $root.pubg.globalaccounts.PSNParentalControl.verify(message.ParentalControl);
                    if (error)
                        return "ParentalControl." + error;
                }
                if (message.Region != null && message.hasOwnProperty("Region"))
                    if (!$util.isString(message.Region))
                        return "Region: string expected";
                if (message.IsSubAccount != null && message.hasOwnProperty("IsSubAccount"))
                    if (typeof message.IsSubAccount !== "boolean")
                        return "IsSubAccount: boolean expected";
                return null;
            };

            /**
             * Creates a PlaystationLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PlaystationLinkInfo} PlaystationLinkInfo
             */
            PlaystationLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PlaystationLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.PlaystationLinkInfo();
                if (object.AccountID != null)
                    message.AccountID = String(object.AccountID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.Age != null)
                    message.Age = object.Age | 0;
                if (object.CommunityDomain != null)
                    message.CommunityDomain = String(object.CommunityDomain);
                if (object.DateOfBirth != null)
                    message.DateOfBirth = String(object.DateOfBirth);
                if (object.Language != null)
                    message.Language = String(object.Language);
                if (object.ParentalControl != null) {
                    if (typeof object.ParentalControl !== "object")
                        throw TypeError(".pubg.globalaccounts.PlaystationLinkInfo.ParentalControl: object expected");
                    message.ParentalControl = $root.pubg.globalaccounts.PSNParentalControl.fromObject(object.ParentalControl);
                }
                if (object.Region != null)
                    message.Region = String(object.Region);
                if (object.IsSubAccount != null)
                    message.IsSubAccount = Boolean(object.IsSubAccount);
                return message;
            };

            /**
             * Creates a plain object from a PlaystationLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @static
             * @param {pubg.globalaccounts.PlaystationLinkInfo} message PlaystationLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaystationLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.AccountID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.Age = 0;
                    object.CommunityDomain = "";
                    object.DateOfBirth = "";
                    object.Language = "";
                    object.ParentalControl = null;
                    object.Region = "";
                    object.IsSubAccount = false;
                }
                if (message.AccountID != null && message.hasOwnProperty("AccountID"))
                    object.AccountID = message.AccountID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.Age != null && message.hasOwnProperty("Age"))
                    object.Age = message.Age;
                if (message.CommunityDomain != null && message.hasOwnProperty("CommunityDomain"))
                    object.CommunityDomain = message.CommunityDomain;
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    object.DateOfBirth = message.DateOfBirth;
                if (message.Language != null && message.hasOwnProperty("Language"))
                    object.Language = message.Language;
                if (message.ParentalControl != null && message.hasOwnProperty("ParentalControl"))
                    object.ParentalControl = $root.pubg.globalaccounts.PSNParentalControl.toObject(message.ParentalControl, options);
                if (message.Region != null && message.hasOwnProperty("Region"))
                    object.Region = message.Region;
                if (message.IsSubAccount != null && message.hasOwnProperty("IsSubAccount"))
                    object.IsSubAccount = message.IsSubAccount;
                return object;
            };

            /**
             * Converts this PlaystationLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PlaystationLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaystationLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlaystationLinkInfo;
        })();

        globalaccounts.PSNParentalControl = (function() {

            /**
             * Properties of a PSNParentalControl.
             * @memberof pubg.globalaccounts
             * @interface IPSNParentalControl
             * @property {boolean|null} [RestrictChat] PSNParentalControl RestrictChat
             * @property {boolean|null} [RestrictUGM] PSNParentalControl RestrictUGM
             * @property {boolean|null} [RestrictStoreContent] PSNParentalControl RestrictStoreContent
             */

            /**
             * Constructs a new PSNParentalControl.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PSNParentalControl.
             * @implements IPSNParentalControl
             * @constructor
             * @param {pubg.globalaccounts.IPSNParentalControl=} [properties] Properties to set
             */
            function PSNParentalControl(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PSNParentalControl RestrictChat.
             * @member {boolean} RestrictChat
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @instance
             */
            PSNParentalControl.prototype.RestrictChat = false;

            /**
             * PSNParentalControl RestrictUGM.
             * @member {boolean} RestrictUGM
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @instance
             */
            PSNParentalControl.prototype.RestrictUGM = false;

            /**
             * PSNParentalControl RestrictStoreContent.
             * @member {boolean} RestrictStoreContent
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @instance
             */
            PSNParentalControl.prototype.RestrictStoreContent = false;

            /**
             * Creates a new PSNParentalControl instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {pubg.globalaccounts.IPSNParentalControl=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PSNParentalControl} PSNParentalControl instance
             */
            PSNParentalControl.create = function create(properties) {
                return new PSNParentalControl(properties);
            };

            /**
             * Encodes the specified PSNParentalControl message. Does not implicitly {@link pubg.globalaccounts.PSNParentalControl.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {pubg.globalaccounts.IPSNParentalControl} message PSNParentalControl message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PSNParentalControl.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.RestrictChat != null && message.hasOwnProperty("RestrictChat"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.RestrictChat);
                if (message.RestrictUGM != null && message.hasOwnProperty("RestrictUGM"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.RestrictUGM);
                if (message.RestrictStoreContent != null && message.hasOwnProperty("RestrictStoreContent"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.RestrictStoreContent);
                return writer;
            };

            /**
             * Encodes the specified PSNParentalControl message, length delimited. Does not implicitly {@link pubg.globalaccounts.PSNParentalControl.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {pubg.globalaccounts.IPSNParentalControl} message PSNParentalControl message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PSNParentalControl.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PSNParentalControl message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PSNParentalControl} PSNParentalControl
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PSNParentalControl.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PSNParentalControl();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.RestrictChat = reader.bool();
                        break;
                    case 2:
                        message.RestrictUGM = reader.bool();
                        break;
                    case 3:
                        message.RestrictStoreContent = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PSNParentalControl message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PSNParentalControl} PSNParentalControl
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PSNParentalControl.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PSNParentalControl message.
             * @function verify
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PSNParentalControl.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.RestrictChat != null && message.hasOwnProperty("RestrictChat"))
                    if (typeof message.RestrictChat !== "boolean")
                        return "RestrictChat: boolean expected";
                if (message.RestrictUGM != null && message.hasOwnProperty("RestrictUGM"))
                    if (typeof message.RestrictUGM !== "boolean")
                        return "RestrictUGM: boolean expected";
                if (message.RestrictStoreContent != null && message.hasOwnProperty("RestrictStoreContent"))
                    if (typeof message.RestrictStoreContent !== "boolean")
                        return "RestrictStoreContent: boolean expected";
                return null;
            };

            /**
             * Creates a PSNParentalControl message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PSNParentalControl} PSNParentalControl
             */
            PSNParentalControl.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PSNParentalControl)
                    return object;
                var message = new $root.pubg.globalaccounts.PSNParentalControl();
                if (object.RestrictChat != null)
                    message.RestrictChat = Boolean(object.RestrictChat);
                if (object.RestrictUGM != null)
                    message.RestrictUGM = Boolean(object.RestrictUGM);
                if (object.RestrictStoreContent != null)
                    message.RestrictStoreContent = Boolean(object.RestrictStoreContent);
                return message;
            };

            /**
             * Creates a plain object from a PSNParentalControl message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @static
             * @param {pubg.globalaccounts.PSNParentalControl} message PSNParentalControl
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PSNParentalControl.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.RestrictChat = false;
                    object.RestrictUGM = false;
                    object.RestrictStoreContent = false;
                }
                if (message.RestrictChat != null && message.hasOwnProperty("RestrictChat"))
                    object.RestrictChat = message.RestrictChat;
                if (message.RestrictUGM != null && message.hasOwnProperty("RestrictUGM"))
                    object.RestrictUGM = message.RestrictUGM;
                if (message.RestrictStoreContent != null && message.hasOwnProperty("RestrictStoreContent"))
                    object.RestrictStoreContent = message.RestrictStoreContent;
                return object;
            };

            /**
             * Converts this PSNParentalControl to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PSNParentalControl
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PSNParentalControl.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PSNParentalControl;
        })();

        globalaccounts.RedditLinkInfo = (function() {

            /**
             * Properties of a RedditLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IRedditLinkInfo
             * @property {string|null} [ID] RedditLinkInfo ID
             * @property {string|null} [DisplayName] RedditLinkInfo DisplayName
             * @property {string|null} [AccessToken] RedditLinkInfo AccessToken
             * @property {string|null} [RefreshToken] RedditLinkInfo RefreshToken
             */

            /**
             * Constructs a new RedditLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a RedditLinkInfo.
             * @implements IRedditLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IRedditLinkInfo=} [properties] Properties to set
             */
            function RedditLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RedditLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @instance
             */
            RedditLinkInfo.prototype.ID = "";

            /**
             * RedditLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @instance
             */
            RedditLinkInfo.prototype.DisplayName = "";

            /**
             * RedditLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @instance
             */
            RedditLinkInfo.prototype.AccessToken = "";

            /**
             * RedditLinkInfo RefreshToken.
             * @member {string} RefreshToken
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @instance
             */
            RedditLinkInfo.prototype.RefreshToken = "";

            /**
             * Creates a new RedditLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {pubg.globalaccounts.IRedditLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.RedditLinkInfo} RedditLinkInfo instance
             */
            RedditLinkInfo.create = function create(properties) {
                return new RedditLinkInfo(properties);
            };

            /**
             * Encodes the specified RedditLinkInfo message. Does not implicitly {@link pubg.globalaccounts.RedditLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {pubg.globalaccounts.IRedditLinkInfo} message RedditLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RedditLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.RefreshToken);
                return writer;
            };

            /**
             * Encodes the specified RedditLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.RedditLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {pubg.globalaccounts.IRedditLinkInfo} message RedditLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RedditLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RedditLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.RedditLinkInfo} RedditLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RedditLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.RedditLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.RefreshToken = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RedditLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.RedditLinkInfo} RedditLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RedditLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RedditLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RedditLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    if (!$util.isString(message.RefreshToken))
                        return "RefreshToken: string expected";
                return null;
            };

            /**
             * Creates a RedditLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.RedditLinkInfo} RedditLinkInfo
             */
            RedditLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.RedditLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.RedditLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.RefreshToken != null)
                    message.RefreshToken = String(object.RefreshToken);
                return message;
            };

            /**
             * Creates a plain object from a RedditLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @static
             * @param {pubg.globalaccounts.RedditLinkInfo} message RedditLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RedditLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.RefreshToken = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    object.RefreshToken = message.RefreshToken;
                return object;
            };

            /**
             * Converts this RedditLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.RedditLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RedditLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RedditLinkInfo;
        })();

        globalaccounts.StadiaLinkInfo = (function() {

            /**
             * Properties of a StadiaLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IStadiaLinkInfo
             * @property {string|null} [ID] StadiaLinkInfo ID
             * @property {string|null} [DisplayName] StadiaLinkInfo DisplayName
             */

            /**
             * Constructs a new StadiaLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a StadiaLinkInfo.
             * @implements IStadiaLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IStadiaLinkInfo=} [properties] Properties to set
             */
            function StadiaLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StadiaLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @instance
             */
            StadiaLinkInfo.prototype.ID = "";

            /**
             * StadiaLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @instance
             */
            StadiaLinkInfo.prototype.DisplayName = "";

            /**
             * Creates a new StadiaLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {pubg.globalaccounts.IStadiaLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.StadiaLinkInfo} StadiaLinkInfo instance
             */
            StadiaLinkInfo.create = function create(properties) {
                return new StadiaLinkInfo(properties);
            };

            /**
             * Encodes the specified StadiaLinkInfo message. Does not implicitly {@link pubg.globalaccounts.StadiaLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {pubg.globalaccounts.IStadiaLinkInfo} message StadiaLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StadiaLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                return writer;
            };

            /**
             * Encodes the specified StadiaLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.StadiaLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {pubg.globalaccounts.IStadiaLinkInfo} message StadiaLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StadiaLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StadiaLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.StadiaLinkInfo} StadiaLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StadiaLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.StadiaLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StadiaLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.StadiaLinkInfo} StadiaLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StadiaLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StadiaLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StadiaLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                return null;
            };

            /**
             * Creates a StadiaLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.StadiaLinkInfo} StadiaLinkInfo
             */
            StadiaLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.StadiaLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.StadiaLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                return message;
            };

            /**
             * Creates a plain object from a StadiaLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @static
             * @param {pubg.globalaccounts.StadiaLinkInfo} message StadiaLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StadiaLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                return object;
            };

            /**
             * Converts this StadiaLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.StadiaLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StadiaLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StadiaLinkInfo;
        })();

        globalaccounts.SteamLinkInfo = (function() {

            /**
             * Properties of a SteamLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface ISteamLinkInfo
             * @property {string|null} [ID] SteamLinkInfo ID
             * @property {string|null} [DisplayName] SteamLinkInfo DisplayName
             * @property {Array.<pubg.globalaccounts.ISteamPhoto>|null} [Photos] SteamLinkInfo Photos
             */

            /**
             * Constructs a new SteamLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a SteamLinkInfo.
             * @implements ISteamLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.ISteamLinkInfo=} [properties] Properties to set
             */
            function SteamLinkInfo(properties) {
                this.Photos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SteamLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @instance
             */
            SteamLinkInfo.prototype.ID = "";

            /**
             * SteamLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @instance
             */
            SteamLinkInfo.prototype.DisplayName = "";

            /**
             * SteamLinkInfo Photos.
             * @member {Array.<pubg.globalaccounts.ISteamPhoto>} Photos
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @instance
             */
            SteamLinkInfo.prototype.Photos = $util.emptyArray;

            /**
             * Creates a new SteamLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {pubg.globalaccounts.ISteamLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.SteamLinkInfo} SteamLinkInfo instance
             */
            SteamLinkInfo.create = function create(properties) {
                return new SteamLinkInfo(properties);
            };

            /**
             * Encodes the specified SteamLinkInfo message. Does not implicitly {@link pubg.globalaccounts.SteamLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {pubg.globalaccounts.ISteamLinkInfo} message SteamLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SteamLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Photos != null && message.Photos.length)
                    for (var i = 0; i < message.Photos.length; ++i)
                        $root.pubg.globalaccounts.SteamPhoto.encode(message.Photos[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SteamLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.SteamLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {pubg.globalaccounts.ISteamLinkInfo} message SteamLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SteamLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SteamLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.SteamLinkInfo} SteamLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SteamLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.SteamLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        if (!(message.Photos && message.Photos.length))
                            message.Photos = [];
                        message.Photos.push($root.pubg.globalaccounts.SteamPhoto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SteamLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.SteamLinkInfo} SteamLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SteamLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SteamLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SteamLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Photos != null && message.hasOwnProperty("Photos")) {
                    if (!Array.isArray(message.Photos))
                        return "Photos: array expected";
                    for (var i = 0; i < message.Photos.length; ++i) {
                        var error = $root.pubg.globalaccounts.SteamPhoto.verify(message.Photos[i]);
                        if (error)
                            return "Photos." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SteamLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.SteamLinkInfo} SteamLinkInfo
             */
            SteamLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.SteamLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.SteamLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Photos) {
                    if (!Array.isArray(object.Photos))
                        throw TypeError(".pubg.globalaccounts.SteamLinkInfo.Photos: array expected");
                    message.Photos = [];
                    for (var i = 0; i < object.Photos.length; ++i) {
                        if (typeof object.Photos[i] !== "object")
                            throw TypeError(".pubg.globalaccounts.SteamLinkInfo.Photos: object expected");
                        message.Photos[i] = $root.pubg.globalaccounts.SteamPhoto.fromObject(object.Photos[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SteamLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @static
             * @param {pubg.globalaccounts.SteamLinkInfo} message SteamLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SteamLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.Photos = [];
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Photos && message.Photos.length) {
                    object.Photos = [];
                    for (var j = 0; j < message.Photos.length; ++j)
                        object.Photos[j] = $root.pubg.globalaccounts.SteamPhoto.toObject(message.Photos[j], options);
                }
                return object;
            };

            /**
             * Converts this SteamLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.SteamLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SteamLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SteamLinkInfo;
        })();

        globalaccounts.SteamPhoto = (function() {

            /**
             * Properties of a SteamPhoto.
             * @memberof pubg.globalaccounts
             * @interface ISteamPhoto
             * @property {string|null} [Value] SteamPhoto Value
             */

            /**
             * Constructs a new SteamPhoto.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a SteamPhoto.
             * @implements ISteamPhoto
             * @constructor
             * @param {pubg.globalaccounts.ISteamPhoto=} [properties] Properties to set
             */
            function SteamPhoto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SteamPhoto Value.
             * @member {string} Value
             * @memberof pubg.globalaccounts.SteamPhoto
             * @instance
             */
            SteamPhoto.prototype.Value = "";

            /**
             * Creates a new SteamPhoto instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {pubg.globalaccounts.ISteamPhoto=} [properties] Properties to set
             * @returns {pubg.globalaccounts.SteamPhoto} SteamPhoto instance
             */
            SteamPhoto.create = function create(properties) {
                return new SteamPhoto(properties);
            };

            /**
             * Encodes the specified SteamPhoto message. Does not implicitly {@link pubg.globalaccounts.SteamPhoto.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {pubg.globalaccounts.ISteamPhoto} message SteamPhoto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SteamPhoto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Value != null && message.hasOwnProperty("Value"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.Value);
                return writer;
            };

            /**
             * Encodes the specified SteamPhoto message, length delimited. Does not implicitly {@link pubg.globalaccounts.SteamPhoto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {pubg.globalaccounts.ISteamPhoto} message SteamPhoto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SteamPhoto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SteamPhoto message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.SteamPhoto} SteamPhoto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SteamPhoto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.SteamPhoto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SteamPhoto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.SteamPhoto} SteamPhoto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SteamPhoto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SteamPhoto message.
             * @function verify
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SteamPhoto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Value != null && message.hasOwnProperty("Value"))
                    if (!$util.isString(message.Value))
                        return "Value: string expected";
                return null;
            };

            /**
             * Creates a SteamPhoto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.SteamPhoto} SteamPhoto
             */
            SteamPhoto.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.SteamPhoto)
                    return object;
                var message = new $root.pubg.globalaccounts.SteamPhoto();
                if (object.Value != null)
                    message.Value = String(object.Value);
                return message;
            };

            /**
             * Creates a plain object from a SteamPhoto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.SteamPhoto
             * @static
             * @param {pubg.globalaccounts.SteamPhoto} message SteamPhoto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SteamPhoto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.Value = "";
                if (message.Value != null && message.hasOwnProperty("Value"))
                    object.Value = message.Value;
                return object;
            };

            /**
             * Converts this SteamPhoto to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.SteamPhoto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SteamPhoto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SteamPhoto;
        })();

        globalaccounts.TwitchLinkInfo = (function() {

            /**
             * Properties of a TwitchLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface ITwitchLinkInfo
             * @property {string|null} [ID] TwitchLinkInfo ID
             * @property {string|null} [DisplayName] TwitchLinkInfo DisplayName
             * @property {string|null} [AccessToken] TwitchLinkInfo AccessToken
             * @property {string|null} [RefreshToken] TwitchLinkInfo RefreshToken
             * @property {string|null} [Email] TwitchLinkInfo Email
             * @property {string|null} [Username] TwitchLinkInfo Username
             */

            /**
             * Constructs a new TwitchLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a TwitchLinkInfo.
             * @implements ITwitchLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.ITwitchLinkInfo=} [properties] Properties to set
             */
            function TwitchLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TwitchLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             */
            TwitchLinkInfo.prototype.ID = "";

            /**
             * TwitchLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             */
            TwitchLinkInfo.prototype.DisplayName = "";

            /**
             * TwitchLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             */
            TwitchLinkInfo.prototype.AccessToken = "";

            /**
             * TwitchLinkInfo RefreshToken.
             * @member {string} RefreshToken
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             */
            TwitchLinkInfo.prototype.RefreshToken = "";

            /**
             * TwitchLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             */
            TwitchLinkInfo.prototype.Email = "";

            /**
             * TwitchLinkInfo Username.
             * @member {string} Username
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             */
            TwitchLinkInfo.prototype.Username = "";

            /**
             * Creates a new TwitchLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {pubg.globalaccounts.ITwitchLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.TwitchLinkInfo} TwitchLinkInfo instance
             */
            TwitchLinkInfo.create = function create(properties) {
                return new TwitchLinkInfo(properties);
            };

            /**
             * Encodes the specified TwitchLinkInfo message. Does not implicitly {@link pubg.globalaccounts.TwitchLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {pubg.globalaccounts.ITwitchLinkInfo} message TwitchLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitchLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.RefreshToken);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Email);
                if (message.Username != null && message.hasOwnProperty("Username"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.Username);
                return writer;
            };

            /**
             * Encodes the specified TwitchLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.TwitchLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {pubg.globalaccounts.ITwitchLinkInfo} message TwitchLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitchLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TwitchLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.TwitchLinkInfo} TwitchLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitchLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.TwitchLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.RefreshToken = reader.string();
                        break;
                    case 5:
                        message.Email = reader.string();
                        break;
                    case 6:
                        message.Username = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TwitchLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.TwitchLinkInfo} TwitchLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitchLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TwitchLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TwitchLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    if (!$util.isString(message.RefreshToken))
                        return "RefreshToken: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.Username != null && message.hasOwnProperty("Username"))
                    if (!$util.isString(message.Username))
                        return "Username: string expected";
                return null;
            };

            /**
             * Creates a TwitchLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.TwitchLinkInfo} TwitchLinkInfo
             */
            TwitchLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.TwitchLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.TwitchLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.RefreshToken != null)
                    message.RefreshToken = String(object.RefreshToken);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.Username != null)
                    message.Username = String(object.Username);
                return message;
            };

            /**
             * Creates a plain object from a TwitchLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @static
             * @param {pubg.globalaccounts.TwitchLinkInfo} message TwitchLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TwitchLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.RefreshToken = "";
                    object.Email = "";
                    object.Username = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    object.RefreshToken = message.RefreshToken;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.Username != null && message.hasOwnProperty("Username"))
                    object.Username = message.Username;
                return object;
            };

            /**
             * Converts this TwitchLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.TwitchLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TwitchLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TwitchLinkInfo;
        })();

        globalaccounts.TwitterLinkInfo = (function() {

            /**
             * Properties of a TwitterLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface ITwitterLinkInfo
             * @property {string|null} [ID] TwitterLinkInfo ID
             * @property {string|null} [DisplayName] TwitterLinkInfo DisplayName
             * @property {string|null} [AccessToken] TwitterLinkInfo AccessToken
             * @property {string|null} [Email] TwitterLinkInfo Email
             */

            /**
             * Constructs a new TwitterLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a TwitterLinkInfo.
             * @implements ITwitterLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.ITwitterLinkInfo=} [properties] Properties to set
             */
            function TwitterLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TwitterLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @instance
             */
            TwitterLinkInfo.prototype.ID = "";

            /**
             * TwitterLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @instance
             */
            TwitterLinkInfo.prototype.DisplayName = "";

            /**
             * TwitterLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @instance
             */
            TwitterLinkInfo.prototype.AccessToken = "";

            /**
             * TwitterLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @instance
             */
            TwitterLinkInfo.prototype.Email = "";

            /**
             * Creates a new TwitterLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {pubg.globalaccounts.ITwitterLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.TwitterLinkInfo} TwitterLinkInfo instance
             */
            TwitterLinkInfo.create = function create(properties) {
                return new TwitterLinkInfo(properties);
            };

            /**
             * Encodes the specified TwitterLinkInfo message. Does not implicitly {@link pubg.globalaccounts.TwitterLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {pubg.globalaccounts.ITwitterLinkInfo} message TwitterLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitterLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                return writer;
            };

            /**
             * Encodes the specified TwitterLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.TwitterLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {pubg.globalaccounts.ITwitterLinkInfo} message TwitterLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitterLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TwitterLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.TwitterLinkInfo} TwitterLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitterLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.TwitterLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TwitterLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.TwitterLinkInfo} TwitterLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitterLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TwitterLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TwitterLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                return null;
            };

            /**
             * Creates a TwitterLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.TwitterLinkInfo} TwitterLinkInfo
             */
            TwitterLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.TwitterLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.TwitterLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.Email != null)
                    message.Email = String(object.Email);
                return message;
            };

            /**
             * Creates a plain object from a TwitterLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @static
             * @param {pubg.globalaccounts.TwitterLinkInfo} message TwitterLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TwitterLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.Email = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                return object;
            };

            /**
             * Converts this TwitterLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.TwitterLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TwitterLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TwitterLinkInfo;
        })();

        globalaccounts.VKLinkInfo = (function() {

            /**
             * Properties of a VKLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IVKLinkInfo
             * @property {string|null} [ID] VKLinkInfo ID
             * @property {string|null} [DisplayName] VKLinkInfo DisplayName
             * @property {string|null} [AccessToken] VKLinkInfo AccessToken
             * @property {string|null} [Email] VKLinkInfo Email
             */

            /**
             * Constructs a new VKLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a VKLinkInfo.
             * @implements IVKLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IVKLinkInfo=} [properties] Properties to set
             */
            function VKLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VKLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @instance
             */
            VKLinkInfo.prototype.ID = "";

            /**
             * VKLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @instance
             */
            VKLinkInfo.prototype.DisplayName = "";

            /**
             * VKLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @instance
             */
            VKLinkInfo.prototype.AccessToken = "";

            /**
             * VKLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @instance
             */
            VKLinkInfo.prototype.Email = "";

            /**
             * Creates a new VKLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {pubg.globalaccounts.IVKLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.VKLinkInfo} VKLinkInfo instance
             */
            VKLinkInfo.create = function create(properties) {
                return new VKLinkInfo(properties);
            };

            /**
             * Encodes the specified VKLinkInfo message. Does not implicitly {@link pubg.globalaccounts.VKLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {pubg.globalaccounts.IVKLinkInfo} message VKLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VKLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                return writer;
            };

            /**
             * Encodes the specified VKLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.VKLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {pubg.globalaccounts.IVKLinkInfo} message VKLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VKLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VKLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.VKLinkInfo} VKLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VKLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.VKLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VKLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.VKLinkInfo} VKLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VKLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VKLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VKLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                return null;
            };

            /**
             * Creates a VKLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.VKLinkInfo} VKLinkInfo
             */
            VKLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.VKLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.VKLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.Email != null)
                    message.Email = String(object.Email);
                return message;
            };

            /**
             * Creates a plain object from a VKLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @static
             * @param {pubg.globalaccounts.VKLinkInfo} message VKLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VKLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.Email = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                return object;
            };

            /**
             * Converts this VKLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.VKLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VKLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VKLinkInfo;
        })();

        globalaccounts.XboxLinkInfo = (function() {

            /**
             * Properties of a XboxLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IXboxLinkInfo
             * @property {string|null} [XUID] XboxLinkInfo XUID
             * @property {string|null} [DisplayName] XboxLinkInfo DisplayName
             * @property {string|null} [AccessToken] XboxLinkInfo AccessToken
             * @property {string|null} [RefreshToken] XboxLinkInfo RefreshToken
             * @property {number|Long|null} [ValidUntil] XboxLinkInfo ValidUntil
             */

            /**
             * Constructs a new XboxLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a XboxLinkInfo.
             * @implements IXboxLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IXboxLinkInfo=} [properties] Properties to set
             */
            function XboxLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * XboxLinkInfo XUID.
             * @member {string} XUID
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @instance
             */
            XboxLinkInfo.prototype.XUID = "";

            /**
             * XboxLinkInfo DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @instance
             */
            XboxLinkInfo.prototype.DisplayName = "";

            /**
             * XboxLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @instance
             */
            XboxLinkInfo.prototype.AccessToken = "";

            /**
             * XboxLinkInfo RefreshToken.
             * @member {string} RefreshToken
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @instance
             */
            XboxLinkInfo.prototype.RefreshToken = "";

            /**
             * XboxLinkInfo ValidUntil.
             * @member {number|Long} ValidUntil
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @instance
             */
            XboxLinkInfo.prototype.ValidUntil = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new XboxLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {pubg.globalaccounts.IXboxLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.XboxLinkInfo} XboxLinkInfo instance
             */
            XboxLinkInfo.create = function create(properties) {
                return new XboxLinkInfo(properties);
            };

            /**
             * Encodes the specified XboxLinkInfo message. Does not implicitly {@link pubg.globalaccounts.XboxLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {pubg.globalaccounts.IXboxLinkInfo} message XboxLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XboxLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.XUID != null && message.hasOwnProperty("XUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.XUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.AccessToken);
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.RefreshToken);
                if (message.ValidUntil != null && message.hasOwnProperty("ValidUntil"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.ValidUntil);
                return writer;
            };

            /**
             * Encodes the specified XboxLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.XboxLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {pubg.globalaccounts.IXboxLinkInfo} message XboxLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XboxLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a XboxLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.XboxLinkInfo} XboxLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XboxLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.XboxLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.XUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.AccessToken = reader.string();
                        break;
                    case 4:
                        message.RefreshToken = reader.string();
                        break;
                    case 5:
                        message.ValidUntil = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a XboxLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.XboxLinkInfo} XboxLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XboxLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a XboxLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            XboxLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.XUID != null && message.hasOwnProperty("XUID"))
                    if (!$util.isString(message.XUID))
                        return "XUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    if (!$util.isString(message.RefreshToken))
                        return "RefreshToken: string expected";
                if (message.ValidUntil != null && message.hasOwnProperty("ValidUntil"))
                    if (!$util.isInteger(message.ValidUntil) && !(message.ValidUntil && $util.isInteger(message.ValidUntil.low) && $util.isInteger(message.ValidUntil.high)))
                        return "ValidUntil: integer|Long expected";
                return null;
            };

            /**
             * Creates a XboxLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.XboxLinkInfo} XboxLinkInfo
             */
            XboxLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.XboxLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.XboxLinkInfo();
                if (object.XUID != null)
                    message.XUID = String(object.XUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.RefreshToken != null)
                    message.RefreshToken = String(object.RefreshToken);
                if (object.ValidUntil != null)
                    if ($util.Long)
                        (message.ValidUntil = $util.Long.fromValue(object.ValidUntil)).unsigned = false;
                    else if (typeof object.ValidUntil === "string")
                        message.ValidUntil = parseInt(object.ValidUntil, 10);
                    else if (typeof object.ValidUntil === "number")
                        message.ValidUntil = object.ValidUntil;
                    else if (typeof object.ValidUntil === "object")
                        message.ValidUntil = new $util.LongBits(object.ValidUntil.low >>> 0, object.ValidUntil.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a XboxLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @static
             * @param {pubg.globalaccounts.XboxLinkInfo} message XboxLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            XboxLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.XUID = "";
                    object.DisplayName = "";
                    object.AccessToken = "";
                    object.RefreshToken = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ValidUntil = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ValidUntil = options.longs === String ? "0" : 0;
                }
                if (message.XUID != null && message.hasOwnProperty("XUID"))
                    object.XUID = message.XUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    object.RefreshToken = message.RefreshToken;
                if (message.ValidUntil != null && message.hasOwnProperty("ValidUntil"))
                    if (typeof message.ValidUntil === "number")
                        object.ValidUntil = options.longs === String ? String(message.ValidUntil) : message.ValidUntil;
                    else
                        object.ValidUntil = options.longs === String ? $util.Long.prototype.toString.call(message.ValidUntil) : options.longs === Number ? new $util.LongBits(message.ValidUntil.low >>> 0, message.ValidUntil.high >>> 0).toNumber() : message.ValidUntil;
                return object;
            };

            /**
             * Converts this XboxLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.XboxLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            XboxLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return XboxLinkInfo;
        })();

        globalaccounts.DiscordLinkInfo = (function() {

            /**
             * Properties of a DiscordLinkInfo.
             * @memberof pubg.globalaccounts
             * @interface IDiscordLinkInfo
             * @property {string|null} [ID] DiscordLinkInfo ID
             * @property {string|null} [Username] DiscordLinkInfo Username
             * @property {string|null} [Discriminator] DiscordLinkInfo Discriminator
             * @property {string|null} [Email] DiscordLinkInfo Email
             * @property {boolean|null} [Verified] DiscordLinkInfo Verified
             * @property {boolean|null} [Bot] DiscordLinkInfo Bot
             * @property {string|null} [AccessToken] DiscordLinkInfo AccessToken
             * @property {string|null} [RefreshToken] DiscordLinkInfo RefreshToken
             * @property {number|Long|null} [ExpiresIn] DiscordLinkInfo ExpiresIn
             * @property {string|null} [AvatarHash] DiscordLinkInfo AvatarHash
             * @property {number|Long|null} [PremiumType] DiscordLinkInfo PremiumType
             * @property {number|Long|null} [Flags] DiscordLinkInfo Flags
             * @property {number|Long|null} [PublicFlags] DiscordLinkInfo PublicFlags
             */

            /**
             * Constructs a new DiscordLinkInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a DiscordLinkInfo.
             * @implements IDiscordLinkInfo
             * @constructor
             * @param {pubg.globalaccounts.IDiscordLinkInfo=} [properties] Properties to set
             */
            function DiscordLinkInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DiscordLinkInfo ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.ID = "";

            /**
             * DiscordLinkInfo Username.
             * @member {string} Username
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.Username = "";

            /**
             * DiscordLinkInfo Discriminator.
             * @member {string} Discriminator
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.Discriminator = "";

            /**
             * DiscordLinkInfo Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.Email = "";

            /**
             * DiscordLinkInfo Verified.
             * @member {boolean} Verified
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.Verified = false;

            /**
             * DiscordLinkInfo Bot.
             * @member {boolean} Bot
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.Bot = false;

            /**
             * DiscordLinkInfo AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.AccessToken = "";

            /**
             * DiscordLinkInfo RefreshToken.
             * @member {string} RefreshToken
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.RefreshToken = "";

            /**
             * DiscordLinkInfo ExpiresIn.
             * @member {number|Long} ExpiresIn
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.ExpiresIn = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DiscordLinkInfo AvatarHash.
             * @member {string} AvatarHash
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.AvatarHash = "";

            /**
             * DiscordLinkInfo PremiumType.
             * @member {number|Long} PremiumType
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.PremiumType = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DiscordLinkInfo Flags.
             * @member {number|Long} Flags
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.Flags = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DiscordLinkInfo PublicFlags.
             * @member {number|Long} PublicFlags
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             */
            DiscordLinkInfo.prototype.PublicFlags = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new DiscordLinkInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {pubg.globalaccounts.IDiscordLinkInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.DiscordLinkInfo} DiscordLinkInfo instance
             */
            DiscordLinkInfo.create = function create(properties) {
                return new DiscordLinkInfo(properties);
            };

            /**
             * Encodes the specified DiscordLinkInfo message. Does not implicitly {@link pubg.globalaccounts.DiscordLinkInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {pubg.globalaccounts.IDiscordLinkInfo} message DiscordLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiscordLinkInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.Username != null && message.hasOwnProperty("Username"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Username);
                if (message.Discriminator != null && message.hasOwnProperty("Discriminator"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Discriminator);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                if (message.Verified != null && message.hasOwnProperty("Verified"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.Verified);
                if (message.Bot != null && message.hasOwnProperty("Bot"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.Bot);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.AccessToken);
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.RefreshToken);
                if (message.ExpiresIn != null && message.hasOwnProperty("ExpiresIn"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.ExpiresIn);
                if (message.AvatarHash != null && message.hasOwnProperty("AvatarHash"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.AvatarHash);
                if (message.PremiumType != null && message.hasOwnProperty("PremiumType"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int64(message.PremiumType);
                if (message.Flags != null && message.hasOwnProperty("Flags"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int64(message.Flags);
                if (message.PublicFlags != null && message.hasOwnProperty("PublicFlags"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int64(message.PublicFlags);
                return writer;
            };

            /**
             * Encodes the specified DiscordLinkInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.DiscordLinkInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {pubg.globalaccounts.IDiscordLinkInfo} message DiscordLinkInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiscordLinkInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DiscordLinkInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.DiscordLinkInfo} DiscordLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiscordLinkInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.DiscordLinkInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.Username = reader.string();
                        break;
                    case 3:
                        message.Discriminator = reader.string();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    case 5:
                        message.Verified = reader.bool();
                        break;
                    case 6:
                        message.Bot = reader.bool();
                        break;
                    case 7:
                        message.AccessToken = reader.string();
                        break;
                    case 8:
                        message.RefreshToken = reader.string();
                        break;
                    case 9:
                        message.ExpiresIn = reader.int64();
                        break;
                    case 10:
                        message.AvatarHash = reader.string();
                        break;
                    case 11:
                        message.PremiumType = reader.int64();
                        break;
                    case 12:
                        message.Flags = reader.int64();
                        break;
                    case 13:
                        message.PublicFlags = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DiscordLinkInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.DiscordLinkInfo} DiscordLinkInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiscordLinkInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DiscordLinkInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DiscordLinkInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.Username != null && message.hasOwnProperty("Username"))
                    if (!$util.isString(message.Username))
                        return "Username: string expected";
                if (message.Discriminator != null && message.hasOwnProperty("Discriminator"))
                    if (!$util.isString(message.Discriminator))
                        return "Discriminator: string expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.Verified != null && message.hasOwnProperty("Verified"))
                    if (typeof message.Verified !== "boolean")
                        return "Verified: boolean expected";
                if (message.Bot != null && message.hasOwnProperty("Bot"))
                    if (typeof message.Bot !== "boolean")
                        return "Bot: boolean expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    if (!$util.isString(message.RefreshToken))
                        return "RefreshToken: string expected";
                if (message.ExpiresIn != null && message.hasOwnProperty("ExpiresIn"))
                    if (!$util.isInteger(message.ExpiresIn) && !(message.ExpiresIn && $util.isInteger(message.ExpiresIn.low) && $util.isInteger(message.ExpiresIn.high)))
                        return "ExpiresIn: integer|Long expected";
                if (message.AvatarHash != null && message.hasOwnProperty("AvatarHash"))
                    if (!$util.isString(message.AvatarHash))
                        return "AvatarHash: string expected";
                if (message.PremiumType != null && message.hasOwnProperty("PremiumType"))
                    if (!$util.isInteger(message.PremiumType) && !(message.PremiumType && $util.isInteger(message.PremiumType.low) && $util.isInteger(message.PremiumType.high)))
                        return "PremiumType: integer|Long expected";
                if (message.Flags != null && message.hasOwnProperty("Flags"))
                    if (!$util.isInteger(message.Flags) && !(message.Flags && $util.isInteger(message.Flags.low) && $util.isInteger(message.Flags.high)))
                        return "Flags: integer|Long expected";
                if (message.PublicFlags != null && message.hasOwnProperty("PublicFlags"))
                    if (!$util.isInteger(message.PublicFlags) && !(message.PublicFlags && $util.isInteger(message.PublicFlags.low) && $util.isInteger(message.PublicFlags.high)))
                        return "PublicFlags: integer|Long expected";
                return null;
            };

            /**
             * Creates a DiscordLinkInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.DiscordLinkInfo} DiscordLinkInfo
             */
            DiscordLinkInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.DiscordLinkInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.DiscordLinkInfo();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.Username != null)
                    message.Username = String(object.Username);
                if (object.Discriminator != null)
                    message.Discriminator = String(object.Discriminator);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.Verified != null)
                    message.Verified = Boolean(object.Verified);
                if (object.Bot != null)
                    message.Bot = Boolean(object.Bot);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.RefreshToken != null)
                    message.RefreshToken = String(object.RefreshToken);
                if (object.ExpiresIn != null)
                    if ($util.Long)
                        (message.ExpiresIn = $util.Long.fromValue(object.ExpiresIn)).unsigned = false;
                    else if (typeof object.ExpiresIn === "string")
                        message.ExpiresIn = parseInt(object.ExpiresIn, 10);
                    else if (typeof object.ExpiresIn === "number")
                        message.ExpiresIn = object.ExpiresIn;
                    else if (typeof object.ExpiresIn === "object")
                        message.ExpiresIn = new $util.LongBits(object.ExpiresIn.low >>> 0, object.ExpiresIn.high >>> 0).toNumber();
                if (object.AvatarHash != null)
                    message.AvatarHash = String(object.AvatarHash);
                if (object.PremiumType != null)
                    if ($util.Long)
                        (message.PremiumType = $util.Long.fromValue(object.PremiumType)).unsigned = false;
                    else if (typeof object.PremiumType === "string")
                        message.PremiumType = parseInt(object.PremiumType, 10);
                    else if (typeof object.PremiumType === "number")
                        message.PremiumType = object.PremiumType;
                    else if (typeof object.PremiumType === "object")
                        message.PremiumType = new $util.LongBits(object.PremiumType.low >>> 0, object.PremiumType.high >>> 0).toNumber();
                if (object.Flags != null)
                    if ($util.Long)
                        (message.Flags = $util.Long.fromValue(object.Flags)).unsigned = false;
                    else if (typeof object.Flags === "string")
                        message.Flags = parseInt(object.Flags, 10);
                    else if (typeof object.Flags === "number")
                        message.Flags = object.Flags;
                    else if (typeof object.Flags === "object")
                        message.Flags = new $util.LongBits(object.Flags.low >>> 0, object.Flags.high >>> 0).toNumber();
                if (object.PublicFlags != null)
                    if ($util.Long)
                        (message.PublicFlags = $util.Long.fromValue(object.PublicFlags)).unsigned = false;
                    else if (typeof object.PublicFlags === "string")
                        message.PublicFlags = parseInt(object.PublicFlags, 10);
                    else if (typeof object.PublicFlags === "number")
                        message.PublicFlags = object.PublicFlags;
                    else if (typeof object.PublicFlags === "object")
                        message.PublicFlags = new $util.LongBits(object.PublicFlags.low >>> 0, object.PublicFlags.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a DiscordLinkInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @static
             * @param {pubg.globalaccounts.DiscordLinkInfo} message DiscordLinkInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DiscordLinkInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.Username = "";
                    object.Discriminator = "";
                    object.Email = "";
                    object.Verified = false;
                    object.Bot = false;
                    object.AccessToken = "";
                    object.RefreshToken = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.ExpiresIn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ExpiresIn = options.longs === String ? "0" : 0;
                    object.AvatarHash = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.PremiumType = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.PremiumType = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Flags = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Flags = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.PublicFlags = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.PublicFlags = options.longs === String ? "0" : 0;
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.Username != null && message.hasOwnProperty("Username"))
                    object.Username = message.Username;
                if (message.Discriminator != null && message.hasOwnProperty("Discriminator"))
                    object.Discriminator = message.Discriminator;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.Verified != null && message.hasOwnProperty("Verified"))
                    object.Verified = message.Verified;
                if (message.Bot != null && message.hasOwnProperty("Bot"))
                    object.Bot = message.Bot;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.RefreshToken != null && message.hasOwnProperty("RefreshToken"))
                    object.RefreshToken = message.RefreshToken;
                if (message.ExpiresIn != null && message.hasOwnProperty("ExpiresIn"))
                    if (typeof message.ExpiresIn === "number")
                        object.ExpiresIn = options.longs === String ? String(message.ExpiresIn) : message.ExpiresIn;
                    else
                        object.ExpiresIn = options.longs === String ? $util.Long.prototype.toString.call(message.ExpiresIn) : options.longs === Number ? new $util.LongBits(message.ExpiresIn.low >>> 0, message.ExpiresIn.high >>> 0).toNumber() : message.ExpiresIn;
                if (message.AvatarHash != null && message.hasOwnProperty("AvatarHash"))
                    object.AvatarHash = message.AvatarHash;
                if (message.PremiumType != null && message.hasOwnProperty("PremiumType"))
                    if (typeof message.PremiumType === "number")
                        object.PremiumType = options.longs === String ? String(message.PremiumType) : message.PremiumType;
                    else
                        object.PremiumType = options.longs === String ? $util.Long.prototype.toString.call(message.PremiumType) : options.longs === Number ? new $util.LongBits(message.PremiumType.low >>> 0, message.PremiumType.high >>> 0).toNumber() : message.PremiumType;
                if (message.Flags != null && message.hasOwnProperty("Flags"))
                    if (typeof message.Flags === "number")
                        object.Flags = options.longs === String ? String(message.Flags) : message.Flags;
                    else
                        object.Flags = options.longs === String ? $util.Long.prototype.toString.call(message.Flags) : options.longs === Number ? new $util.LongBits(message.Flags.low >>> 0, message.Flags.high >>> 0).toNumber() : message.Flags;
                if (message.PublicFlags != null && message.hasOwnProperty("PublicFlags"))
                    if (typeof message.PublicFlags === "number")
                        object.PublicFlags = options.longs === String ? String(message.PublicFlags) : message.PublicFlags;
                    else
                        object.PublicFlags = options.longs === String ? $util.Long.prototype.toString.call(message.PublicFlags) : options.longs === Number ? new $util.LongBits(message.PublicFlags.low >>> 0, message.PublicFlags.high >>> 0).toNumber() : message.PublicFlags;
                return object;
            };

            /**
             * Converts this DiscordLinkInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.DiscordLinkInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DiscordLinkInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DiscordLinkInfo;
        })();

        globalaccounts.DeleteAccountParams = (function() {

            /**
             * Properties of a DeleteAccountParams.
             * @memberof pubg.globalaccounts
             * @interface IDeleteAccountParams
             * @property {pubg.globalaccounts.IUserData|null} [User] DeleteAccountParams User
             * @property {string|null} [GUID] DeleteAccountParams GUID
             * @property {string|null} [Password] DeleteAccountParams Password
             */

            /**
             * Constructs a new DeleteAccountParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a DeleteAccountParams.
             * @implements IDeleteAccountParams
             * @constructor
             * @param {pubg.globalaccounts.IDeleteAccountParams=} [properties] Properties to set
             */
            function DeleteAccountParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DeleteAccountParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @instance
             */
            DeleteAccountParams.prototype.User = null;

            /**
             * DeleteAccountParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @instance
             */
            DeleteAccountParams.prototype.GUID = "";

            /**
             * DeleteAccountParams Password.
             * @member {string} Password
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @instance
             */
            DeleteAccountParams.prototype.Password = "";

            /**
             * Creates a new DeleteAccountParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {pubg.globalaccounts.IDeleteAccountParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.DeleteAccountParams} DeleteAccountParams instance
             */
            DeleteAccountParams.create = function create(properties) {
                return new DeleteAccountParams(properties);
            };

            /**
             * Encodes the specified DeleteAccountParams message. Does not implicitly {@link pubg.globalaccounts.DeleteAccountParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {pubg.globalaccounts.IDeleteAccountParams} message DeleteAccountParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeleteAccountParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.Password != null && message.hasOwnProperty("Password"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Password);
                return writer;
            };

            /**
             * Encodes the specified DeleteAccountParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.DeleteAccountParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {pubg.globalaccounts.IDeleteAccountParams} message DeleteAccountParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DeleteAccountParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DeleteAccountParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.DeleteAccountParams} DeleteAccountParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeleteAccountParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.DeleteAccountParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.Password = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DeleteAccountParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.DeleteAccountParams} DeleteAccountParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DeleteAccountParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DeleteAccountParams message.
             * @function verify
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DeleteAccountParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Password != null && message.hasOwnProperty("Password"))
                    if (!$util.isString(message.Password))
                        return "Password: string expected";
                return null;
            };

            /**
             * Creates a DeleteAccountParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.DeleteAccountParams} DeleteAccountParams
             */
            DeleteAccountParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.DeleteAccountParams)
                    return object;
                var message = new $root.pubg.globalaccounts.DeleteAccountParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.DeleteAccountParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Password != null)
                    message.Password = String(object.Password);
                return message;
            };

            /**
             * Creates a plain object from a DeleteAccountParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @static
             * @param {pubg.globalaccounts.DeleteAccountParams} message DeleteAccountParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DeleteAccountParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.Password = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Password != null && message.hasOwnProperty("Password"))
                    object.Password = message.Password;
                return object;
            };

            /**
             * Converts this DeleteAccountParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.DeleteAccountParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DeleteAccountParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DeleteAccountParams;
        })();

        globalaccounts.ResendActivationParams = (function() {

            /**
             * Properties of a ResendActivationParams.
             * @memberof pubg.globalaccounts
             * @interface IResendActivationParams
             * @property {pubg.globalaccounts.IUserData|null} [User] ResendActivationParams User
             * @property {string|null} [GUID] ResendActivationParams GUID
             * @property {string|null} [ClientID] ResendActivationParams ClientID
             * @property {string|null} [ActivateTest] ResendActivationParams ActivateTest
             */

            /**
             * Constructs a new ResendActivationParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a ResendActivationParams.
             * @implements IResendActivationParams
             * @constructor
             * @param {pubg.globalaccounts.IResendActivationParams=} [properties] Properties to set
             */
            function ResendActivationParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ResendActivationParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @instance
             */
            ResendActivationParams.prototype.User = null;

            /**
             * ResendActivationParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @instance
             */
            ResendActivationParams.prototype.GUID = "";

            /**
             * ResendActivationParams ClientID.
             * @member {string} ClientID
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @instance
             */
            ResendActivationParams.prototype.ClientID = "";

            /**
             * ResendActivationParams ActivateTest.
             * @member {string} ActivateTest
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @instance
             */
            ResendActivationParams.prototype.ActivateTest = "";

            /**
             * Creates a new ResendActivationParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {pubg.globalaccounts.IResendActivationParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.ResendActivationParams} ResendActivationParams instance
             */
            ResendActivationParams.create = function create(properties) {
                return new ResendActivationParams(properties);
            };

            /**
             * Encodes the specified ResendActivationParams message. Does not implicitly {@link pubg.globalaccounts.ResendActivationParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {pubg.globalaccounts.IResendActivationParams} message ResendActivationParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResendActivationParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.ClientID);
                if (message.ActivateTest != null && message.hasOwnProperty("ActivateTest"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.ActivateTest);
                return writer;
            };

            /**
             * Encodes the specified ResendActivationParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.ResendActivationParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {pubg.globalaccounts.IResendActivationParams} message ResendActivationParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ResendActivationParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ResendActivationParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.ResendActivationParams} ResendActivationParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResendActivationParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.ResendActivationParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.ClientID = reader.string();
                        break;
                    case 4:
                        message.ActivateTest = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ResendActivationParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.ResendActivationParams} ResendActivationParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ResendActivationParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ResendActivationParams message.
             * @function verify
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ResendActivationParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    if (!$util.isString(message.ClientID))
                        return "ClientID: string expected";
                if (message.ActivateTest != null && message.hasOwnProperty("ActivateTest"))
                    if (!$util.isString(message.ActivateTest))
                        return "ActivateTest: string expected";
                return null;
            };

            /**
             * Creates a ResendActivationParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.ResendActivationParams} ResendActivationParams
             */
            ResendActivationParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.ResendActivationParams)
                    return object;
                var message = new $root.pubg.globalaccounts.ResendActivationParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.ResendActivationParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ClientID != null)
                    message.ClientID = String(object.ClientID);
                if (object.ActivateTest != null)
                    message.ActivateTest = String(object.ActivateTest);
                return message;
            };

            /**
             * Creates a plain object from a ResendActivationParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @static
             * @param {pubg.globalaccounts.ResendActivationParams} message ResendActivationParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ResendActivationParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.ClientID = "";
                    object.ActivateTest = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    object.ClientID = message.ClientID;
                if (message.ActivateTest != null && message.hasOwnProperty("ActivateTest"))
                    object.ActivateTest = message.ActivateTest;
                return object;
            };

            /**
             * Converts this ResendActivationParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.ResendActivationParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ResendActivationParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ResendActivationParams;
        })();

        globalaccounts.GuidInput = (function() {

            /**
             * Properties of a GuidInput.
             * @memberof pubg.globalaccounts
             * @interface IGuidInput
             * @property {pubg.globalaccounts.IUserData|null} [User] GuidInput User
             * @property {string|null} [GUID] GuidInput GUID
             * @property {string|null} [ClientID] GuidInput ClientID
             */

            /**
             * Constructs a new GuidInput.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GuidInput.
             * @implements IGuidInput
             * @constructor
             * @param {pubg.globalaccounts.IGuidInput=} [properties] Properties to set
             */
            function GuidInput(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GuidInput User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.GuidInput
             * @instance
             */
            GuidInput.prototype.User = null;

            /**
             * GuidInput GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.GuidInput
             * @instance
             */
            GuidInput.prototype.GUID = "";

            /**
             * GuidInput ClientID.
             * @member {string} ClientID
             * @memberof pubg.globalaccounts.GuidInput
             * @instance
             */
            GuidInput.prototype.ClientID = "";

            /**
             * Creates a new GuidInput instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {pubg.globalaccounts.IGuidInput=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GuidInput} GuidInput instance
             */
            GuidInput.create = function create(properties) {
                return new GuidInput(properties);
            };

            /**
             * Encodes the specified GuidInput message. Does not implicitly {@link pubg.globalaccounts.GuidInput.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {pubg.globalaccounts.IGuidInput} message GuidInput message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GuidInput.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.ClientID);
                return writer;
            };

            /**
             * Encodes the specified GuidInput message, length delimited. Does not implicitly {@link pubg.globalaccounts.GuidInput.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {pubg.globalaccounts.IGuidInput} message GuidInput message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GuidInput.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GuidInput message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GuidInput} GuidInput
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GuidInput.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GuidInput();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.ClientID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GuidInput message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GuidInput} GuidInput
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GuidInput.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GuidInput message.
             * @function verify
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GuidInput.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    if (!$util.isString(message.ClientID))
                        return "ClientID: string expected";
                return null;
            };

            /**
             * Creates a GuidInput message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GuidInput} GuidInput
             */
            GuidInput.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GuidInput)
                    return object;
                var message = new $root.pubg.globalaccounts.GuidInput();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.GuidInput.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ClientID != null)
                    message.ClientID = String(object.ClientID);
                return message;
            };

            /**
             * Creates a plain object from a GuidInput message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GuidInput
             * @static
             * @param {pubg.globalaccounts.GuidInput} message GuidInput
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GuidInput.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.ClientID = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    object.ClientID = message.ClientID;
                return object;
            };

            /**
             * Converts this GuidInput to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GuidInput
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GuidInput.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GuidInput;
        })();

        globalaccounts.GuidProviderCombo = (function() {

            /**
             * Properties of a GuidProviderCombo.
             * @memberof pubg.globalaccounts
             * @interface IGuidProviderCombo
             * @property {string|null} [GUID] GuidProviderCombo GUID
             * @property {string|null} [Provider] GuidProviderCombo Provider
             */

            /**
             * Constructs a new GuidProviderCombo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GuidProviderCombo.
             * @implements IGuidProviderCombo
             * @constructor
             * @param {pubg.globalaccounts.IGuidProviderCombo=} [properties] Properties to set
             */
            function GuidProviderCombo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GuidProviderCombo GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @instance
             */
            GuidProviderCombo.prototype.GUID = "";

            /**
             * GuidProviderCombo Provider.
             * @member {string} Provider
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @instance
             */
            GuidProviderCombo.prototype.Provider = "";

            /**
             * Creates a new GuidProviderCombo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {pubg.globalaccounts.IGuidProviderCombo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GuidProviderCombo} GuidProviderCombo instance
             */
            GuidProviderCombo.create = function create(properties) {
                return new GuidProviderCombo(properties);
            };

            /**
             * Encodes the specified GuidProviderCombo message. Does not implicitly {@link pubg.globalaccounts.GuidProviderCombo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {pubg.globalaccounts.IGuidProviderCombo} message GuidProviderCombo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GuidProviderCombo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Provider);
                return writer;
            };

            /**
             * Encodes the specified GuidProviderCombo message, length delimited. Does not implicitly {@link pubg.globalaccounts.GuidProviderCombo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {pubg.globalaccounts.IGuidProviderCombo} message GuidProviderCombo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GuidProviderCombo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GuidProviderCombo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GuidProviderCombo} GuidProviderCombo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GuidProviderCombo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GuidProviderCombo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.Provider = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GuidProviderCombo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GuidProviderCombo} GuidProviderCombo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GuidProviderCombo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GuidProviderCombo message.
             * @function verify
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GuidProviderCombo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    if (!$util.isString(message.Provider))
                        return "Provider: string expected";
                return null;
            };

            /**
             * Creates a GuidProviderCombo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GuidProviderCombo} GuidProviderCombo
             */
            GuidProviderCombo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GuidProviderCombo)
                    return object;
                var message = new $root.pubg.globalaccounts.GuidProviderCombo();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Provider != null)
                    message.Provider = String(object.Provider);
                return message;
            };

            /**
             * Creates a plain object from a GuidProviderCombo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @static
             * @param {pubg.globalaccounts.GuidProviderCombo} message GuidProviderCombo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GuidProviderCombo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.Provider = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    object.Provider = message.Provider;
                return object;
            };

            /**
             * Converts this GuidProviderCombo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GuidProviderCombo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GuidProviderCombo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GuidProviderCombo;
        })();

        globalaccounts.DestroyLinkParams = (function() {

            /**
             * Properties of a DestroyLinkParams.
             * @memberof pubg.globalaccounts
             * @interface IDestroyLinkParams
             * @property {pubg.globalaccounts.IUserData|null} [User] DestroyLinkParams User
             * @property {string|null} [GUID] DestroyLinkParams GUID
             * @property {string|null} [Provider] DestroyLinkParams Provider
             */

            /**
             * Constructs a new DestroyLinkParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a DestroyLinkParams.
             * @implements IDestroyLinkParams
             * @constructor
             * @param {pubg.globalaccounts.IDestroyLinkParams=} [properties] Properties to set
             */
            function DestroyLinkParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DestroyLinkParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @instance
             */
            DestroyLinkParams.prototype.User = null;

            /**
             * DestroyLinkParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @instance
             */
            DestroyLinkParams.prototype.GUID = "";

            /**
             * DestroyLinkParams Provider.
             * @member {string} Provider
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @instance
             */
            DestroyLinkParams.prototype.Provider = "";

            /**
             * Creates a new DestroyLinkParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {pubg.globalaccounts.IDestroyLinkParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.DestroyLinkParams} DestroyLinkParams instance
             */
            DestroyLinkParams.create = function create(properties) {
                return new DestroyLinkParams(properties);
            };

            /**
             * Encodes the specified DestroyLinkParams message. Does not implicitly {@link pubg.globalaccounts.DestroyLinkParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {pubg.globalaccounts.IDestroyLinkParams} message DestroyLinkParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DestroyLinkParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Provider);
                return writer;
            };

            /**
             * Encodes the specified DestroyLinkParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.DestroyLinkParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {pubg.globalaccounts.IDestroyLinkParams} message DestroyLinkParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DestroyLinkParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DestroyLinkParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.DestroyLinkParams} DestroyLinkParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DestroyLinkParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.DestroyLinkParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.Provider = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DestroyLinkParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.DestroyLinkParams} DestroyLinkParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DestroyLinkParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DestroyLinkParams message.
             * @function verify
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DestroyLinkParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    if (!$util.isString(message.Provider))
                        return "Provider: string expected";
                return null;
            };

            /**
             * Creates a DestroyLinkParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.DestroyLinkParams} DestroyLinkParams
             */
            DestroyLinkParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.DestroyLinkParams)
                    return object;
                var message = new $root.pubg.globalaccounts.DestroyLinkParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.DestroyLinkParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Provider != null)
                    message.Provider = String(object.Provider);
                return message;
            };

            /**
             * Creates a plain object from a DestroyLinkParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @static
             * @param {pubg.globalaccounts.DestroyLinkParams} message DestroyLinkParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DestroyLinkParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.Provider = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    object.Provider = message.Provider;
                return object;
            };

            /**
             * Converts this DestroyLinkParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.DestroyLinkParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DestroyLinkParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DestroyLinkParams;
        })();

        globalaccounts.CriteriaQuery = (function() {

            /**
             * Properties of a CriteriaQuery.
             * @memberof pubg.globalaccounts
             * @interface ICriteriaQuery
             * @property {string|null} [Criteria] CriteriaQuery Criteria
             * @property {string|null} [CriteriaType] CriteriaQuery CriteriaType
             */

            /**
             * Constructs a new CriteriaQuery.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CriteriaQuery.
             * @implements ICriteriaQuery
             * @constructor
             * @param {pubg.globalaccounts.ICriteriaQuery=} [properties] Properties to set
             */
            function CriteriaQuery(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CriteriaQuery Criteria.
             * @member {string} Criteria
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @instance
             */
            CriteriaQuery.prototype.Criteria = "";

            /**
             * CriteriaQuery CriteriaType.
             * @member {string} CriteriaType
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @instance
             */
            CriteriaQuery.prototype.CriteriaType = "";

            /**
             * Creates a new CriteriaQuery instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {pubg.globalaccounts.ICriteriaQuery=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CriteriaQuery} CriteriaQuery instance
             */
            CriteriaQuery.create = function create(properties) {
                return new CriteriaQuery(properties);
            };

            /**
             * Encodes the specified CriteriaQuery message. Does not implicitly {@link pubg.globalaccounts.CriteriaQuery.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {pubg.globalaccounts.ICriteriaQuery} message CriteriaQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CriteriaQuery.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Criteria != null && message.hasOwnProperty("Criteria"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.Criteria);
                if (message.CriteriaType != null && message.hasOwnProperty("CriteriaType"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.CriteriaType);
                return writer;
            };

            /**
             * Encodes the specified CriteriaQuery message, length delimited. Does not implicitly {@link pubg.globalaccounts.CriteriaQuery.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {pubg.globalaccounts.ICriteriaQuery} message CriteriaQuery message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CriteriaQuery.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CriteriaQuery message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CriteriaQuery} CriteriaQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CriteriaQuery.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CriteriaQuery();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Criteria = reader.string();
                        break;
                    case 2:
                        message.CriteriaType = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CriteriaQuery message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CriteriaQuery} CriteriaQuery
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CriteriaQuery.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CriteriaQuery message.
             * @function verify
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CriteriaQuery.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Criteria != null && message.hasOwnProperty("Criteria"))
                    if (!$util.isString(message.Criteria))
                        return "Criteria: string expected";
                if (message.CriteriaType != null && message.hasOwnProperty("CriteriaType"))
                    if (!$util.isString(message.CriteriaType))
                        return "CriteriaType: string expected";
                return null;
            };

            /**
             * Creates a CriteriaQuery message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CriteriaQuery} CriteriaQuery
             */
            CriteriaQuery.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CriteriaQuery)
                    return object;
                var message = new $root.pubg.globalaccounts.CriteriaQuery();
                if (object.Criteria != null)
                    message.Criteria = String(object.Criteria);
                if (object.CriteriaType != null)
                    message.CriteriaType = String(object.CriteriaType);
                return message;
            };

            /**
             * Creates a plain object from a CriteriaQuery message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @static
             * @param {pubg.globalaccounts.CriteriaQuery} message CriteriaQuery
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CriteriaQuery.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Criteria = "";
                    object.CriteriaType = "";
                }
                if (message.Criteria != null && message.hasOwnProperty("Criteria"))
                    object.Criteria = message.Criteria;
                if (message.CriteriaType != null && message.hasOwnProperty("CriteriaType"))
                    object.CriteriaType = message.CriteriaType;
                return object;
            };

            /**
             * Converts this CriteriaQuery to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CriteriaQuery
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CriteriaQuery.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CriteriaQuery;
        })();

        globalaccounts.ActivateAccountParams = (function() {

            /**
             * Properties of an ActivateAccountParams.
             * @memberof pubg.globalaccounts
             * @interface IActivateAccountParams
             * @property {pubg.globalaccounts.IUserData|null} [User] ActivateAccountParams User
             * @property {string|null} [ActivationToken] ActivateAccountParams ActivationToken
             */

            /**
             * Constructs a new ActivateAccountParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an ActivateAccountParams.
             * @implements IActivateAccountParams
             * @constructor
             * @param {pubg.globalaccounts.IActivateAccountParams=} [properties] Properties to set
             */
            function ActivateAccountParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ActivateAccountParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @instance
             */
            ActivateAccountParams.prototype.User = null;

            /**
             * ActivateAccountParams ActivationToken.
             * @member {string} ActivationToken
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @instance
             */
            ActivateAccountParams.prototype.ActivationToken = "";

            /**
             * Creates a new ActivateAccountParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {pubg.globalaccounts.IActivateAccountParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.ActivateAccountParams} ActivateAccountParams instance
             */
            ActivateAccountParams.create = function create(properties) {
                return new ActivateAccountParams(properties);
            };

            /**
             * Encodes the specified ActivateAccountParams message. Does not implicitly {@link pubg.globalaccounts.ActivateAccountParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {pubg.globalaccounts.IActivateAccountParams} message ActivateAccountParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivateAccountParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.ActivationToken != null && message.hasOwnProperty("ActivationToken"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.ActivationToken);
                return writer;
            };

            /**
             * Encodes the specified ActivateAccountParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.ActivateAccountParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {pubg.globalaccounts.IActivateAccountParams} message ActivateAccountParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ActivateAccountParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ActivateAccountParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.ActivateAccountParams} ActivateAccountParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivateAccountParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.ActivateAccountParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.ActivationToken = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ActivateAccountParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.ActivateAccountParams} ActivateAccountParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ActivateAccountParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ActivateAccountParams message.
             * @function verify
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ActivateAccountParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.ActivationToken != null && message.hasOwnProperty("ActivationToken"))
                    if (!$util.isString(message.ActivationToken))
                        return "ActivationToken: string expected";
                return null;
            };

            /**
             * Creates an ActivateAccountParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.ActivateAccountParams} ActivateAccountParams
             */
            ActivateAccountParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.ActivateAccountParams)
                    return object;
                var message = new $root.pubg.globalaccounts.ActivateAccountParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.ActivateAccountParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.ActivationToken != null)
                    message.ActivationToken = String(object.ActivationToken);
                return message;
            };

            /**
             * Creates a plain object from an ActivateAccountParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @static
             * @param {pubg.globalaccounts.ActivateAccountParams} message ActivateAccountParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ActivateAccountParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.ActivationToken = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.ActivationToken != null && message.hasOwnProperty("ActivationToken"))
                    object.ActivationToken = message.ActivationToken;
                return object;
            };

            /**
             * Converts this ActivateAccountParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.ActivateAccountParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ActivateAccountParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ActivateAccountParams;
        })();

        globalaccounts.BeginEmailChangeParams = (function() {

            /**
             * Properties of a BeginEmailChangeParams.
             * @memberof pubg.globalaccounts
             * @interface IBeginEmailChangeParams
             * @property {pubg.globalaccounts.IUserData|null} [User] BeginEmailChangeParams User
             * @property {string|null} [GUID] BeginEmailChangeParams GUID
             * @property {string|null} [NewEmail] BeginEmailChangeParams NewEmail
             * @property {string|null} [Password] BeginEmailChangeParams Password
             */

            /**
             * Constructs a new BeginEmailChangeParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a BeginEmailChangeParams.
             * @implements IBeginEmailChangeParams
             * @constructor
             * @param {pubg.globalaccounts.IBeginEmailChangeParams=} [properties] Properties to set
             */
            function BeginEmailChangeParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BeginEmailChangeParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @instance
             */
            BeginEmailChangeParams.prototype.User = null;

            /**
             * BeginEmailChangeParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @instance
             */
            BeginEmailChangeParams.prototype.GUID = "";

            /**
             * BeginEmailChangeParams NewEmail.
             * @member {string} NewEmail
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @instance
             */
            BeginEmailChangeParams.prototype.NewEmail = "";

            /**
             * BeginEmailChangeParams Password.
             * @member {string} Password
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @instance
             */
            BeginEmailChangeParams.prototype.Password = "";

            /**
             * Creates a new BeginEmailChangeParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.IBeginEmailChangeParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.BeginEmailChangeParams} BeginEmailChangeParams instance
             */
            BeginEmailChangeParams.create = function create(properties) {
                return new BeginEmailChangeParams(properties);
            };

            /**
             * Encodes the specified BeginEmailChangeParams message. Does not implicitly {@link pubg.globalaccounts.BeginEmailChangeParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.IBeginEmailChangeParams} message BeginEmailChangeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BeginEmailChangeParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.NewEmail != null && message.hasOwnProperty("NewEmail"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.NewEmail);
                if (message.Password != null && message.hasOwnProperty("Password"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Password);
                return writer;
            };

            /**
             * Encodes the specified BeginEmailChangeParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.BeginEmailChangeParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.IBeginEmailChangeParams} message BeginEmailChangeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BeginEmailChangeParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BeginEmailChangeParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.BeginEmailChangeParams} BeginEmailChangeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BeginEmailChangeParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.BeginEmailChangeParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.NewEmail = reader.string();
                        break;
                    case 5:
                        message.Password = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BeginEmailChangeParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.BeginEmailChangeParams} BeginEmailChangeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BeginEmailChangeParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BeginEmailChangeParams message.
             * @function verify
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BeginEmailChangeParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.NewEmail != null && message.hasOwnProperty("NewEmail"))
                    if (!$util.isString(message.NewEmail))
                        return "NewEmail: string expected";
                if (message.Password != null && message.hasOwnProperty("Password"))
                    if (!$util.isString(message.Password))
                        return "Password: string expected";
                return null;
            };

            /**
             * Creates a BeginEmailChangeParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.BeginEmailChangeParams} BeginEmailChangeParams
             */
            BeginEmailChangeParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.BeginEmailChangeParams)
                    return object;
                var message = new $root.pubg.globalaccounts.BeginEmailChangeParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.BeginEmailChangeParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.NewEmail != null)
                    message.NewEmail = String(object.NewEmail);
                if (object.Password != null)
                    message.Password = String(object.Password);
                return message;
            };

            /**
             * Creates a plain object from a BeginEmailChangeParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.BeginEmailChangeParams} message BeginEmailChangeParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BeginEmailChangeParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.NewEmail = "";
                    object.Password = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.NewEmail != null && message.hasOwnProperty("NewEmail"))
                    object.NewEmail = message.NewEmail;
                if (message.Password != null && message.hasOwnProperty("Password"))
                    object.Password = message.Password;
                return object;
            };

            /**
             * Converts this BeginEmailChangeParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.BeginEmailChangeParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BeginEmailChangeParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BeginEmailChangeParams;
        })();

        globalaccounts.CompleteEmailChangeParams = (function() {

            /**
             * Properties of a CompleteEmailChangeParams.
             * @memberof pubg.globalaccounts
             * @interface ICompleteEmailChangeParams
             * @property {pubg.globalaccounts.IUserData|null} [User] CompleteEmailChangeParams User
             * @property {string|null} [Token] CompleteEmailChangeParams Token
             */

            /**
             * Constructs a new CompleteEmailChangeParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CompleteEmailChangeParams.
             * @implements ICompleteEmailChangeParams
             * @constructor
             * @param {pubg.globalaccounts.ICompleteEmailChangeParams=} [properties] Properties to set
             */
            function CompleteEmailChangeParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteEmailChangeParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @instance
             */
            CompleteEmailChangeParams.prototype.User = null;

            /**
             * CompleteEmailChangeParams Token.
             * @member {string} Token
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @instance
             */
            CompleteEmailChangeParams.prototype.Token = "";

            /**
             * Creates a new CompleteEmailChangeParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.ICompleteEmailChangeParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CompleteEmailChangeParams} CompleteEmailChangeParams instance
             */
            CompleteEmailChangeParams.create = function create(properties) {
                return new CompleteEmailChangeParams(properties);
            };

            /**
             * Encodes the specified CompleteEmailChangeParams message. Does not implicitly {@link pubg.globalaccounts.CompleteEmailChangeParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.ICompleteEmailChangeParams} message CompleteEmailChangeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteEmailChangeParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.Token != null && message.hasOwnProperty("Token"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Token);
                return writer;
            };

            /**
             * Encodes the specified CompleteEmailChangeParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.CompleteEmailChangeParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.ICompleteEmailChangeParams} message CompleteEmailChangeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteEmailChangeParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteEmailChangeParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CompleteEmailChangeParams} CompleteEmailChangeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteEmailChangeParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CompleteEmailChangeParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.Token = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteEmailChangeParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CompleteEmailChangeParams} CompleteEmailChangeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteEmailChangeParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteEmailChangeParams message.
             * @function verify
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteEmailChangeParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.Token != null && message.hasOwnProperty("Token"))
                    if (!$util.isString(message.Token))
                        return "Token: string expected";
                return null;
            };

            /**
             * Creates a CompleteEmailChangeParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CompleteEmailChangeParams} CompleteEmailChangeParams
             */
            CompleteEmailChangeParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CompleteEmailChangeParams)
                    return object;
                var message = new $root.pubg.globalaccounts.CompleteEmailChangeParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.CompleteEmailChangeParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.Token != null)
                    message.Token = String(object.Token);
                return message;
            };

            /**
             * Creates a plain object from a CompleteEmailChangeParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @static
             * @param {pubg.globalaccounts.CompleteEmailChangeParams} message CompleteEmailChangeParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteEmailChangeParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.Token = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.Token != null && message.hasOwnProperty("Token"))
                    object.Token = message.Token;
                return object;
            };

            /**
             * Converts this CompleteEmailChangeParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CompleteEmailChangeParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteEmailChangeParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteEmailChangeParams;
        })();

        globalaccounts.UpdateUsernameParams = (function() {

            /**
             * Properties of an UpdateUsernameParams.
             * @memberof pubg.globalaccounts
             * @interface IUpdateUsernameParams
             * @property {pubg.globalaccounts.IUserData|null} [User] UpdateUsernameParams User
             * @property {string|null} [GUID] UpdateUsernameParams GUID
             * @property {string|null} [NewUsername] UpdateUsernameParams NewUsername
             */

            /**
             * Constructs a new UpdateUsernameParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an UpdateUsernameParams.
             * @implements IUpdateUsernameParams
             * @constructor
             * @param {pubg.globalaccounts.IUpdateUsernameParams=} [properties] Properties to set
             */
            function UpdateUsernameParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUsernameParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @instance
             */
            UpdateUsernameParams.prototype.User = null;

            /**
             * UpdateUsernameParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @instance
             */
            UpdateUsernameParams.prototype.GUID = "";

            /**
             * UpdateUsernameParams NewUsername.
             * @member {string} NewUsername
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @instance
             */
            UpdateUsernameParams.prototype.NewUsername = "";

            /**
             * Creates a new UpdateUsernameParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {pubg.globalaccounts.IUpdateUsernameParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.UpdateUsernameParams} UpdateUsernameParams instance
             */
            UpdateUsernameParams.create = function create(properties) {
                return new UpdateUsernameParams(properties);
            };

            /**
             * Encodes the specified UpdateUsernameParams message. Does not implicitly {@link pubg.globalaccounts.UpdateUsernameParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {pubg.globalaccounts.IUpdateUsernameParams} message UpdateUsernameParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUsernameParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.NewUsername != null && message.hasOwnProperty("NewUsername"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.NewUsername);
                return writer;
            };

            /**
             * Encodes the specified UpdateUsernameParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.UpdateUsernameParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {pubg.globalaccounts.IUpdateUsernameParams} message UpdateUsernameParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUsernameParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUsernameParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.UpdateUsernameParams} UpdateUsernameParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUsernameParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.UpdateUsernameParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.NewUsername = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateUsernameParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.UpdateUsernameParams} UpdateUsernameParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUsernameParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUsernameParams message.
             * @function verify
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUsernameParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.NewUsername != null && message.hasOwnProperty("NewUsername"))
                    if (!$util.isString(message.NewUsername))
                        return "NewUsername: string expected";
                return null;
            };

            /**
             * Creates an UpdateUsernameParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.UpdateUsernameParams} UpdateUsernameParams
             */
            UpdateUsernameParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.UpdateUsernameParams)
                    return object;
                var message = new $root.pubg.globalaccounts.UpdateUsernameParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.UpdateUsernameParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.NewUsername != null)
                    message.NewUsername = String(object.NewUsername);
                return message;
            };

            /**
             * Creates a plain object from an UpdateUsernameParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @static
             * @param {pubg.globalaccounts.UpdateUsernameParams} message UpdateUsernameParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUsernameParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.NewUsername = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.NewUsername != null && message.hasOwnProperty("NewUsername"))
                    object.NewUsername = message.NewUsername;
                return object;
            };

            /**
             * Converts this UpdateUsernameParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.UpdateUsernameParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUsernameParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdateUsernameParams;
        })();

        globalaccounts.UpdatePasswordParams = (function() {

            /**
             * Properties of an UpdatePasswordParams.
             * @memberof pubg.globalaccounts
             * @interface IUpdatePasswordParams
             * @property {pubg.globalaccounts.IUserData|null} [User] UpdatePasswordParams User
             * @property {string|null} [GUID] UpdatePasswordParams GUID
             * @property {string|null} [OldPass] UpdatePasswordParams OldPass
             * @property {string|null} [NewPass] UpdatePasswordParams NewPass
             * @property {string|null} [PassConf] UpdatePasswordParams PassConf
             */

            /**
             * Constructs a new UpdatePasswordParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an UpdatePasswordParams.
             * @implements IUpdatePasswordParams
             * @constructor
             * @param {pubg.globalaccounts.IUpdatePasswordParams=} [properties] Properties to set
             */
            function UpdatePasswordParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdatePasswordParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @instance
             */
            UpdatePasswordParams.prototype.User = null;

            /**
             * UpdatePasswordParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @instance
             */
            UpdatePasswordParams.prototype.GUID = "";

            /**
             * UpdatePasswordParams OldPass.
             * @member {string} OldPass
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @instance
             */
            UpdatePasswordParams.prototype.OldPass = "";

            /**
             * UpdatePasswordParams NewPass.
             * @member {string} NewPass
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @instance
             */
            UpdatePasswordParams.prototype.NewPass = "";

            /**
             * UpdatePasswordParams PassConf.
             * @member {string} PassConf
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @instance
             */
            UpdatePasswordParams.prototype.PassConf = "";

            /**
             * Creates a new UpdatePasswordParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {pubg.globalaccounts.IUpdatePasswordParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.UpdatePasswordParams} UpdatePasswordParams instance
             */
            UpdatePasswordParams.create = function create(properties) {
                return new UpdatePasswordParams(properties);
            };

            /**
             * Encodes the specified UpdatePasswordParams message. Does not implicitly {@link pubg.globalaccounts.UpdatePasswordParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {pubg.globalaccounts.IUpdatePasswordParams} message UpdatePasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdatePasswordParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.OldPass != null && message.hasOwnProperty("OldPass"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.OldPass);
                if (message.NewPass != null && message.hasOwnProperty("NewPass"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.NewPass);
                if (message.PassConf != null && message.hasOwnProperty("PassConf"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.PassConf);
                return writer;
            };

            /**
             * Encodes the specified UpdatePasswordParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.UpdatePasswordParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {pubg.globalaccounts.IUpdatePasswordParams} message UpdatePasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdatePasswordParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdatePasswordParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.UpdatePasswordParams} UpdatePasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdatePasswordParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.UpdatePasswordParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.OldPass = reader.string();
                        break;
                    case 4:
                        message.NewPass = reader.string();
                        break;
                    case 5:
                        message.PassConf = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdatePasswordParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.UpdatePasswordParams} UpdatePasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdatePasswordParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdatePasswordParams message.
             * @function verify
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdatePasswordParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.OldPass != null && message.hasOwnProperty("OldPass"))
                    if (!$util.isString(message.OldPass))
                        return "OldPass: string expected";
                if (message.NewPass != null && message.hasOwnProperty("NewPass"))
                    if (!$util.isString(message.NewPass))
                        return "NewPass: string expected";
                if (message.PassConf != null && message.hasOwnProperty("PassConf"))
                    if (!$util.isString(message.PassConf))
                        return "PassConf: string expected";
                return null;
            };

            /**
             * Creates an UpdatePasswordParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.UpdatePasswordParams} UpdatePasswordParams
             */
            UpdatePasswordParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.UpdatePasswordParams)
                    return object;
                var message = new $root.pubg.globalaccounts.UpdatePasswordParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.UpdatePasswordParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.OldPass != null)
                    message.OldPass = String(object.OldPass);
                if (object.NewPass != null)
                    message.NewPass = String(object.NewPass);
                if (object.PassConf != null)
                    message.PassConf = String(object.PassConf);
                return message;
            };

            /**
             * Creates a plain object from an UpdatePasswordParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @static
             * @param {pubg.globalaccounts.UpdatePasswordParams} message UpdatePasswordParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdatePasswordParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.OldPass = "";
                    object.NewPass = "";
                    object.PassConf = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.OldPass != null && message.hasOwnProperty("OldPass"))
                    object.OldPass = message.OldPass;
                if (message.NewPass != null && message.hasOwnProperty("NewPass"))
                    object.NewPass = message.NewPass;
                if (message.PassConf != null && message.hasOwnProperty("PassConf"))
                    object.PassConf = message.PassConf;
                return object;
            };

            /**
             * Converts this UpdatePasswordParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.UpdatePasswordParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdatePasswordParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdatePasswordParams;
        })();

        globalaccounts.BeginForgotPasswordParams = (function() {

            /**
             * Properties of a BeginForgotPasswordParams.
             * @memberof pubg.globalaccounts
             * @interface IBeginForgotPasswordParams
             * @property {pubg.globalaccounts.IUserData|null} [User] BeginForgotPasswordParams User
             * @property {string|null} [Email] BeginForgotPasswordParams Email
             * @property {string|null} [GUID] BeginForgotPasswordParams GUID
             * @property {string|null} [ClientID] BeginForgotPasswordParams ClientID
             */

            /**
             * Constructs a new BeginForgotPasswordParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a BeginForgotPasswordParams.
             * @implements IBeginForgotPasswordParams
             * @constructor
             * @param {pubg.globalaccounts.IBeginForgotPasswordParams=} [properties] Properties to set
             */
            function BeginForgotPasswordParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BeginForgotPasswordParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @instance
             */
            BeginForgotPasswordParams.prototype.User = null;

            /**
             * BeginForgotPasswordParams Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @instance
             */
            BeginForgotPasswordParams.prototype.Email = "";

            /**
             * BeginForgotPasswordParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @instance
             */
            BeginForgotPasswordParams.prototype.GUID = "";

            /**
             * BeginForgotPasswordParams ClientID.
             * @member {string} ClientID
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @instance
             */
            BeginForgotPasswordParams.prototype.ClientID = "";

            /**
             * Creates a new BeginForgotPasswordParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.IBeginForgotPasswordParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.BeginForgotPasswordParams} BeginForgotPasswordParams instance
             */
            BeginForgotPasswordParams.create = function create(properties) {
                return new BeginForgotPasswordParams(properties);
            };

            /**
             * Encodes the specified BeginForgotPasswordParams message. Does not implicitly {@link pubg.globalaccounts.BeginForgotPasswordParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.IBeginForgotPasswordParams} message BeginForgotPasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BeginForgotPasswordParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Email);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.GUID);
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.ClientID);
                return writer;
            };

            /**
             * Encodes the specified BeginForgotPasswordParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.BeginForgotPasswordParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.IBeginForgotPasswordParams} message BeginForgotPasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BeginForgotPasswordParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BeginForgotPasswordParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.BeginForgotPasswordParams} BeginForgotPasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BeginForgotPasswordParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.BeginForgotPasswordParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.Email = reader.string();
                        break;
                    case 3:
                        message.GUID = reader.string();
                        break;
                    case 4:
                        message.ClientID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BeginForgotPasswordParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.BeginForgotPasswordParams} BeginForgotPasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BeginForgotPasswordParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BeginForgotPasswordParams message.
             * @function verify
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BeginForgotPasswordParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    if (!$util.isString(message.ClientID))
                        return "ClientID: string expected";
                return null;
            };

            /**
             * Creates a BeginForgotPasswordParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.BeginForgotPasswordParams} BeginForgotPasswordParams
             */
            BeginForgotPasswordParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.BeginForgotPasswordParams)
                    return object;
                var message = new $root.pubg.globalaccounts.BeginForgotPasswordParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.BeginForgotPasswordParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ClientID != null)
                    message.ClientID = String(object.ClientID);
                return message;
            };

            /**
             * Creates a plain object from a BeginForgotPasswordParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.BeginForgotPasswordParams} message BeginForgotPasswordParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BeginForgotPasswordParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.Email = "";
                    object.GUID = "";
                    object.ClientID = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    object.ClientID = message.ClientID;
                return object;
            };

            /**
             * Converts this BeginForgotPasswordParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.BeginForgotPasswordParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BeginForgotPasswordParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BeginForgotPasswordParams;
        })();

        globalaccounts.CompleteForgotPasswordParams = (function() {

            /**
             * Properties of a CompleteForgotPasswordParams.
             * @memberof pubg.globalaccounts
             * @interface ICompleteForgotPasswordParams
             * @property {pubg.globalaccounts.IUserData|null} [User] CompleteForgotPasswordParams User
             * @property {string|null} [ResetToken] CompleteForgotPasswordParams ResetToken
             * @property {string|null} [NewPass] CompleteForgotPasswordParams NewPass
             * @property {string|null} [PassConf] CompleteForgotPasswordParams PassConf
             */

            /**
             * Constructs a new CompleteForgotPasswordParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CompleteForgotPasswordParams.
             * @implements ICompleteForgotPasswordParams
             * @constructor
             * @param {pubg.globalaccounts.ICompleteForgotPasswordParams=} [properties] Properties to set
             */
            function CompleteForgotPasswordParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteForgotPasswordParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @instance
             */
            CompleteForgotPasswordParams.prototype.User = null;

            /**
             * CompleteForgotPasswordParams ResetToken.
             * @member {string} ResetToken
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @instance
             */
            CompleteForgotPasswordParams.prototype.ResetToken = "";

            /**
             * CompleteForgotPasswordParams NewPass.
             * @member {string} NewPass
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @instance
             */
            CompleteForgotPasswordParams.prototype.NewPass = "";

            /**
             * CompleteForgotPasswordParams PassConf.
             * @member {string} PassConf
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @instance
             */
            CompleteForgotPasswordParams.prototype.PassConf = "";

            /**
             * Creates a new CompleteForgotPasswordParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.ICompleteForgotPasswordParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CompleteForgotPasswordParams} CompleteForgotPasswordParams instance
             */
            CompleteForgotPasswordParams.create = function create(properties) {
                return new CompleteForgotPasswordParams(properties);
            };

            /**
             * Encodes the specified CompleteForgotPasswordParams message. Does not implicitly {@link pubg.globalaccounts.CompleteForgotPasswordParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.ICompleteForgotPasswordParams} message CompleteForgotPasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteForgotPasswordParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.ResetToken != null && message.hasOwnProperty("ResetToken"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ResetToken);
                if (message.NewPass != null && message.hasOwnProperty("NewPass"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.NewPass);
                if (message.PassConf != null && message.hasOwnProperty("PassConf"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.PassConf);
                return writer;
            };

            /**
             * Encodes the specified CompleteForgotPasswordParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.CompleteForgotPasswordParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.ICompleteForgotPasswordParams} message CompleteForgotPasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteForgotPasswordParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteForgotPasswordParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CompleteForgotPasswordParams} CompleteForgotPasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteForgotPasswordParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CompleteForgotPasswordParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.ResetToken = reader.string();
                        break;
                    case 3:
                        message.NewPass = reader.string();
                        break;
                    case 4:
                        message.PassConf = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteForgotPasswordParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CompleteForgotPasswordParams} CompleteForgotPasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteForgotPasswordParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteForgotPasswordParams message.
             * @function verify
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteForgotPasswordParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.ResetToken != null && message.hasOwnProperty("ResetToken"))
                    if (!$util.isString(message.ResetToken))
                        return "ResetToken: string expected";
                if (message.NewPass != null && message.hasOwnProperty("NewPass"))
                    if (!$util.isString(message.NewPass))
                        return "NewPass: string expected";
                if (message.PassConf != null && message.hasOwnProperty("PassConf"))
                    if (!$util.isString(message.PassConf))
                        return "PassConf: string expected";
                return null;
            };

            /**
             * Creates a CompleteForgotPasswordParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CompleteForgotPasswordParams} CompleteForgotPasswordParams
             */
            CompleteForgotPasswordParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CompleteForgotPasswordParams)
                    return object;
                var message = new $root.pubg.globalaccounts.CompleteForgotPasswordParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.CompleteForgotPasswordParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.ResetToken != null)
                    message.ResetToken = String(object.ResetToken);
                if (object.NewPass != null)
                    message.NewPass = String(object.NewPass);
                if (object.PassConf != null)
                    message.PassConf = String(object.PassConf);
                return message;
            };

            /**
             * Creates a plain object from a CompleteForgotPasswordParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @static
             * @param {pubg.globalaccounts.CompleteForgotPasswordParams} message CompleteForgotPasswordParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteForgotPasswordParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.ResetToken = "";
                    object.NewPass = "";
                    object.PassConf = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.ResetToken != null && message.hasOwnProperty("ResetToken"))
                    object.ResetToken = message.ResetToken;
                if (message.NewPass != null && message.hasOwnProperty("NewPass"))
                    object.NewPass = message.NewPass;
                if (message.PassConf != null && message.hasOwnProperty("PassConf"))
                    object.PassConf = message.PassConf;
                return object;
            };

            /**
             * Converts this CompleteForgotPasswordParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CompleteForgotPasswordParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteForgotPasswordParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteForgotPasswordParams;
        })();

        globalaccounts.SetCommPrefsParams = (function() {

            /**
             * Properties of a SetCommPrefsParams.
             * @memberof pubg.globalaccounts
             * @interface ISetCommPrefsParams
             * @property {pubg.globalaccounts.IUserData|null} [User] SetCommPrefsParams User
             * @property {string|null} [GUID] SetCommPrefsParams GUID
             * @property {boolean|null} [EmailOptIn] SetCommPrefsParams EmailOptIn
             */

            /**
             * Constructs a new SetCommPrefsParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a SetCommPrefsParams.
             * @implements ISetCommPrefsParams
             * @constructor
             * @param {pubg.globalaccounts.ISetCommPrefsParams=} [properties] Properties to set
             */
            function SetCommPrefsParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SetCommPrefsParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @instance
             */
            SetCommPrefsParams.prototype.User = null;

            /**
             * SetCommPrefsParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @instance
             */
            SetCommPrefsParams.prototype.GUID = "";

            /**
             * SetCommPrefsParams EmailOptIn.
             * @member {boolean} EmailOptIn
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @instance
             */
            SetCommPrefsParams.prototype.EmailOptIn = false;

            /**
             * Creates a new SetCommPrefsParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {pubg.globalaccounts.ISetCommPrefsParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.SetCommPrefsParams} SetCommPrefsParams instance
             */
            SetCommPrefsParams.create = function create(properties) {
                return new SetCommPrefsParams(properties);
            };

            /**
             * Encodes the specified SetCommPrefsParams message. Does not implicitly {@link pubg.globalaccounts.SetCommPrefsParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {pubg.globalaccounts.ISetCommPrefsParams} message SetCommPrefsParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SetCommPrefsParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.EmailOptIn);
                return writer;
            };

            /**
             * Encodes the specified SetCommPrefsParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.SetCommPrefsParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {pubg.globalaccounts.ISetCommPrefsParams} message SetCommPrefsParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SetCommPrefsParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SetCommPrefsParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.SetCommPrefsParams} SetCommPrefsParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SetCommPrefsParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.SetCommPrefsParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.EmailOptIn = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SetCommPrefsParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.SetCommPrefsParams} SetCommPrefsParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SetCommPrefsParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SetCommPrefsParams message.
             * @function verify
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SetCommPrefsParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    if (typeof message.EmailOptIn !== "boolean")
                        return "EmailOptIn: boolean expected";
                return null;
            };

            /**
             * Creates a SetCommPrefsParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.SetCommPrefsParams} SetCommPrefsParams
             */
            SetCommPrefsParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.SetCommPrefsParams)
                    return object;
                var message = new $root.pubg.globalaccounts.SetCommPrefsParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.SetCommPrefsParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.EmailOptIn != null)
                    message.EmailOptIn = Boolean(object.EmailOptIn);
                return message;
            };

            /**
             * Creates a plain object from a SetCommPrefsParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @static
             * @param {pubg.globalaccounts.SetCommPrefsParams} message SetCommPrefsParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SetCommPrefsParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.EmailOptIn = false;
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    object.EmailOptIn = message.EmailOptIn;
                return object;
            };

            /**
             * Converts this SetCommPrefsParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.SetCommPrefsParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SetCommPrefsParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SetCommPrefsParams;
        })();

        globalaccounts.SetPersonaParams = (function() {

            /**
             * Properties of a SetPersonaParams.
             * @memberof pubg.globalaccounts
             * @interface ISetPersonaParams
             * @property {string|null} [GUID] SetPersonaParams GUID
             * @property {string|null} [Platform] SetPersonaParams Platform
             */

            /**
             * Constructs a new SetPersonaParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a SetPersonaParams.
             * @implements ISetPersonaParams
             * @constructor
             * @param {pubg.globalaccounts.ISetPersonaParams=} [properties] Properties to set
             */
            function SetPersonaParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SetPersonaParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @instance
             */
            SetPersonaParams.prototype.GUID = "";

            /**
             * SetPersonaParams Platform.
             * @member {string} Platform
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @instance
             */
            SetPersonaParams.prototype.Platform = "";

            /**
             * Creates a new SetPersonaParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {pubg.globalaccounts.ISetPersonaParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.SetPersonaParams} SetPersonaParams instance
             */
            SetPersonaParams.create = function create(properties) {
                return new SetPersonaParams(properties);
            };

            /**
             * Encodes the specified SetPersonaParams message. Does not implicitly {@link pubg.globalaccounts.SetPersonaParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {pubg.globalaccounts.ISetPersonaParams} message SetPersonaParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SetPersonaParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.Platform != null && message.hasOwnProperty("Platform"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Platform);
                return writer;
            };

            /**
             * Encodes the specified SetPersonaParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.SetPersonaParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {pubg.globalaccounts.ISetPersonaParams} message SetPersonaParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SetPersonaParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SetPersonaParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.SetPersonaParams} SetPersonaParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SetPersonaParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.SetPersonaParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.Platform = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SetPersonaParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.SetPersonaParams} SetPersonaParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SetPersonaParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SetPersonaParams message.
             * @function verify
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SetPersonaParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Platform != null && message.hasOwnProperty("Platform"))
                    if (!$util.isString(message.Platform))
                        return "Platform: string expected";
                return null;
            };

            /**
             * Creates a SetPersonaParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.SetPersonaParams} SetPersonaParams
             */
            SetPersonaParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.SetPersonaParams)
                    return object;
                var message = new $root.pubg.globalaccounts.SetPersonaParams();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Platform != null)
                    message.Platform = String(object.Platform);
                return message;
            };

            /**
             * Creates a plain object from a SetPersonaParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @static
             * @param {pubg.globalaccounts.SetPersonaParams} message SetPersonaParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SetPersonaParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.Platform = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Platform != null && message.hasOwnProperty("Platform"))
                    object.Platform = message.Platform;
                return object;
            };

            /**
             * Converts this SetPersonaParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.SetPersonaParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SetPersonaParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SetPersonaParams;
        })();

        globalaccounts.CreateLinkParams = (function() {

            /**
             * Properties of a CreateLinkParams.
             * @memberof pubg.globalaccounts
             * @interface ICreateLinkParams
             * @property {pubg.globalaccounts.IUserData|null} [User] CreateLinkParams User
             * @property {string|null} [GUID] CreateLinkParams GUID
             * @property {pubg.globalaccounts.IAuthLinkInfo|null} [LinkInfo] CreateLinkParams LinkInfo
             * @property {string|null} [MagicLinkCode] CreateLinkParams MagicLinkCode
             */

            /**
             * Constructs a new CreateLinkParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CreateLinkParams.
             * @implements ICreateLinkParams
             * @constructor
             * @param {pubg.globalaccounts.ICreateLinkParams=} [properties] Properties to set
             */
            function CreateLinkParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateLinkParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @instance
             */
            CreateLinkParams.prototype.User = null;

            /**
             * CreateLinkParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @instance
             */
            CreateLinkParams.prototype.GUID = "";

            /**
             * CreateLinkParams LinkInfo.
             * @member {pubg.globalaccounts.IAuthLinkInfo|null|undefined} LinkInfo
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @instance
             */
            CreateLinkParams.prototype.LinkInfo = null;

            /**
             * CreateLinkParams MagicLinkCode.
             * @member {string} MagicLinkCode
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @instance
             */
            CreateLinkParams.prototype.MagicLinkCode = "";

            /**
             * Creates a new CreateLinkParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {pubg.globalaccounts.ICreateLinkParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CreateLinkParams} CreateLinkParams instance
             */
            CreateLinkParams.create = function create(properties) {
                return new CreateLinkParams(properties);
            };

            /**
             * Encodes the specified CreateLinkParams message. Does not implicitly {@link pubg.globalaccounts.CreateLinkParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {pubg.globalaccounts.ICreateLinkParams} message CreateLinkParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateLinkParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.LinkInfo != null && message.hasOwnProperty("LinkInfo"))
                    $root.pubg.globalaccounts.AuthLinkInfo.encode(message.LinkInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.MagicLinkCode != null && message.hasOwnProperty("MagicLinkCode"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.MagicLinkCode);
                return writer;
            };

            /**
             * Encodes the specified CreateLinkParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.CreateLinkParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {pubg.globalaccounts.ICreateLinkParams} message CreateLinkParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateLinkParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateLinkParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CreateLinkParams} CreateLinkParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateLinkParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CreateLinkParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.LinkInfo = $root.pubg.globalaccounts.AuthLinkInfo.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.MagicLinkCode = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CreateLinkParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CreateLinkParams} CreateLinkParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateLinkParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateLinkParams message.
             * @function verify
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateLinkParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.LinkInfo != null && message.hasOwnProperty("LinkInfo")) {
                    var error = $root.pubg.globalaccounts.AuthLinkInfo.verify(message.LinkInfo);
                    if (error)
                        return "LinkInfo." + error;
                }
                if (message.MagicLinkCode != null && message.hasOwnProperty("MagicLinkCode"))
                    if (!$util.isString(message.MagicLinkCode))
                        return "MagicLinkCode: string expected";
                return null;
            };

            /**
             * Creates a CreateLinkParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CreateLinkParams} CreateLinkParams
             */
            CreateLinkParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CreateLinkParams)
                    return object;
                var message = new $root.pubg.globalaccounts.CreateLinkParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.CreateLinkParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.LinkInfo != null) {
                    if (typeof object.LinkInfo !== "object")
                        throw TypeError(".pubg.globalaccounts.CreateLinkParams.LinkInfo: object expected");
                    message.LinkInfo = $root.pubg.globalaccounts.AuthLinkInfo.fromObject(object.LinkInfo);
                }
                if (object.MagicLinkCode != null)
                    message.MagicLinkCode = String(object.MagicLinkCode);
                return message;
            };

            /**
             * Creates a plain object from a CreateLinkParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @static
             * @param {pubg.globalaccounts.CreateLinkParams} message CreateLinkParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateLinkParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.LinkInfo = null;
                    object.MagicLinkCode = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.LinkInfo != null && message.hasOwnProperty("LinkInfo"))
                    object.LinkInfo = $root.pubg.globalaccounts.AuthLinkInfo.toObject(message.LinkInfo, options);
                if (message.MagicLinkCode != null && message.hasOwnProperty("MagicLinkCode"))
                    object.MagicLinkCode = message.MagicLinkCode;
                return object;
            };

            /**
             * Converts this CreateLinkParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CreateLinkParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateLinkParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CreateLinkParams;
        })();

        globalaccounts.CreateRelyingPartyLinkParams = (function() {

            /**
             * Properties of a CreateRelyingPartyLinkParams.
             * @memberof pubg.globalaccounts
             * @interface ICreateRelyingPartyLinkParams
             * @property {pubg.globalaccounts.IUserData|null} [User] CreateRelyingPartyLinkParams User
             * @property {string|null} [Provider] CreateRelyingPartyLinkParams Provider
             * @property {string|null} [GUID] CreateRelyingPartyLinkParams GUID
             * @property {string|null} [ClientID] CreateRelyingPartyLinkParams ClientID
             */

            /**
             * Constructs a new CreateRelyingPartyLinkParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CreateRelyingPartyLinkParams.
             * @implements ICreateRelyingPartyLinkParams
             * @constructor
             * @param {pubg.globalaccounts.ICreateRelyingPartyLinkParams=} [properties] Properties to set
             */
            function CreateRelyingPartyLinkParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateRelyingPartyLinkParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @instance
             */
            CreateRelyingPartyLinkParams.prototype.User = null;

            /**
             * CreateRelyingPartyLinkParams Provider.
             * @member {string} Provider
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @instance
             */
            CreateRelyingPartyLinkParams.prototype.Provider = "";

            /**
             * CreateRelyingPartyLinkParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @instance
             */
            CreateRelyingPartyLinkParams.prototype.GUID = "";

            /**
             * CreateRelyingPartyLinkParams ClientID.
             * @member {string} ClientID
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @instance
             */
            CreateRelyingPartyLinkParams.prototype.ClientID = "";

            /**
             * Creates a new CreateRelyingPartyLinkParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {pubg.globalaccounts.ICreateRelyingPartyLinkParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CreateRelyingPartyLinkParams} CreateRelyingPartyLinkParams instance
             */
            CreateRelyingPartyLinkParams.create = function create(properties) {
                return new CreateRelyingPartyLinkParams(properties);
            };

            /**
             * Encodes the specified CreateRelyingPartyLinkParams message. Does not implicitly {@link pubg.globalaccounts.CreateRelyingPartyLinkParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {pubg.globalaccounts.ICreateRelyingPartyLinkParams} message CreateRelyingPartyLinkParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateRelyingPartyLinkParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Provider);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.GUID);
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.ClientID);
                return writer;
            };

            /**
             * Encodes the specified CreateRelyingPartyLinkParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.CreateRelyingPartyLinkParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {pubg.globalaccounts.ICreateRelyingPartyLinkParams} message CreateRelyingPartyLinkParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateRelyingPartyLinkParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateRelyingPartyLinkParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CreateRelyingPartyLinkParams} CreateRelyingPartyLinkParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateRelyingPartyLinkParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CreateRelyingPartyLinkParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.Provider = reader.string();
                        break;
                    case 3:
                        message.GUID = reader.string();
                        break;
                    case 4:
                        message.ClientID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CreateRelyingPartyLinkParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CreateRelyingPartyLinkParams} CreateRelyingPartyLinkParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateRelyingPartyLinkParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateRelyingPartyLinkParams message.
             * @function verify
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateRelyingPartyLinkParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    if (!$util.isString(message.Provider))
                        return "Provider: string expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    if (!$util.isString(message.ClientID))
                        return "ClientID: string expected";
                return null;
            };

            /**
             * Creates a CreateRelyingPartyLinkParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CreateRelyingPartyLinkParams} CreateRelyingPartyLinkParams
             */
            CreateRelyingPartyLinkParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CreateRelyingPartyLinkParams)
                    return object;
                var message = new $root.pubg.globalaccounts.CreateRelyingPartyLinkParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.CreateRelyingPartyLinkParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.Provider != null)
                    message.Provider = String(object.Provider);
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ClientID != null)
                    message.ClientID = String(object.ClientID);
                return message;
            };

            /**
             * Creates a plain object from a CreateRelyingPartyLinkParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @static
             * @param {pubg.globalaccounts.CreateRelyingPartyLinkParams} message CreateRelyingPartyLinkParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateRelyingPartyLinkParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.Provider = "";
                    object.GUID = "";
                    object.ClientID = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    object.Provider = message.Provider;
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ClientID != null && message.hasOwnProperty("ClientID"))
                    object.ClientID = message.ClientID;
                return object;
            };

            /**
             * Converts this CreateRelyingPartyLinkParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CreateRelyingPartyLinkParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateRelyingPartyLinkParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CreateRelyingPartyLinkParams;
        })();

        globalaccounts.VerifyPasswordParams = (function() {

            /**
             * Properties of a VerifyPasswordParams.
             * @memberof pubg.globalaccounts
             * @interface IVerifyPasswordParams
             * @property {pubg.globalaccounts.IUserData|null} [User] VerifyPasswordParams User
             * @property {string|null} [Email] VerifyPasswordParams Email
             * @property {string|null} [Password] VerifyPasswordParams Password
             */

            /**
             * Constructs a new VerifyPasswordParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a VerifyPasswordParams.
             * @implements IVerifyPasswordParams
             * @constructor
             * @param {pubg.globalaccounts.IVerifyPasswordParams=} [properties] Properties to set
             */
            function VerifyPasswordParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VerifyPasswordParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @instance
             */
            VerifyPasswordParams.prototype.User = null;

            /**
             * VerifyPasswordParams Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @instance
             */
            VerifyPasswordParams.prototype.Email = "";

            /**
             * VerifyPasswordParams Password.
             * @member {string} Password
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @instance
             */
            VerifyPasswordParams.prototype.Password = "";

            /**
             * Creates a new VerifyPasswordParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {pubg.globalaccounts.IVerifyPasswordParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.VerifyPasswordParams} VerifyPasswordParams instance
             */
            VerifyPasswordParams.create = function create(properties) {
                return new VerifyPasswordParams(properties);
            };

            /**
             * Encodes the specified VerifyPasswordParams message. Does not implicitly {@link pubg.globalaccounts.VerifyPasswordParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {pubg.globalaccounts.IVerifyPasswordParams} message VerifyPasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VerifyPasswordParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Email);
                if (message.Password != null && message.hasOwnProperty("Password"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Password);
                return writer;
            };

            /**
             * Encodes the specified VerifyPasswordParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.VerifyPasswordParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {pubg.globalaccounts.IVerifyPasswordParams} message VerifyPasswordParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VerifyPasswordParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VerifyPasswordParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.VerifyPasswordParams} VerifyPasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VerifyPasswordParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.VerifyPasswordParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.Email = reader.string();
                        break;
                    case 3:
                        message.Password = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VerifyPasswordParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.VerifyPasswordParams} VerifyPasswordParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VerifyPasswordParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VerifyPasswordParams message.
             * @function verify
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VerifyPasswordParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.Password != null && message.hasOwnProperty("Password"))
                    if (!$util.isString(message.Password))
                        return "Password: string expected";
                return null;
            };

            /**
             * Creates a VerifyPasswordParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.VerifyPasswordParams} VerifyPasswordParams
             */
            VerifyPasswordParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.VerifyPasswordParams)
                    return object;
                var message = new $root.pubg.globalaccounts.VerifyPasswordParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.VerifyPasswordParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.Password != null)
                    message.Password = String(object.Password);
                return message;
            };

            /**
             * Creates a plain object from a VerifyPasswordParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @static
             * @param {pubg.globalaccounts.VerifyPasswordParams} message VerifyPasswordParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VerifyPasswordParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.Email = "";
                    object.Password = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.Password != null && message.hasOwnProperty("Password"))
                    object.Password = message.Password;
                return object;
            };

            /**
             * Converts this VerifyPasswordParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.VerifyPasswordParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VerifyPasswordParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VerifyPasswordParams;
        })();

        globalaccounts.GetPrevTwitchParams = (function() {

            /**
             * Properties of a GetPrevTwitchParams.
             * @memberof pubg.globalaccounts
             * @interface IGetPrevTwitchParams
             * @property {pubg.globalaccounts.IUserData|null} [User] GetPrevTwitchParams User
             * @property {string|null} [GUID] GetPrevTwitchParams GUID
             */

            /**
             * Constructs a new GetPrevTwitchParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GetPrevTwitchParams.
             * @implements IGetPrevTwitchParams
             * @constructor
             * @param {pubg.globalaccounts.IGetPrevTwitchParams=} [properties] Properties to set
             */
            function GetPrevTwitchParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetPrevTwitchParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @instance
             */
            GetPrevTwitchParams.prototype.User = null;

            /**
             * GetPrevTwitchParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @instance
             */
            GetPrevTwitchParams.prototype.GUID = "";

            /**
             * Creates a new GetPrevTwitchParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {pubg.globalaccounts.IGetPrevTwitchParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GetPrevTwitchParams} GetPrevTwitchParams instance
             */
            GetPrevTwitchParams.create = function create(properties) {
                return new GetPrevTwitchParams(properties);
            };

            /**
             * Encodes the specified GetPrevTwitchParams message. Does not implicitly {@link pubg.globalaccounts.GetPrevTwitchParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {pubg.globalaccounts.IGetPrevTwitchParams} message GetPrevTwitchParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPrevTwitchParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                return writer;
            };

            /**
             * Encodes the specified GetPrevTwitchParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.GetPrevTwitchParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {pubg.globalaccounts.IGetPrevTwitchParams} message GetPrevTwitchParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPrevTwitchParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPrevTwitchParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GetPrevTwitchParams} GetPrevTwitchParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPrevTwitchParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GetPrevTwitchParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPrevTwitchParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GetPrevTwitchParams} GetPrevTwitchParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPrevTwitchParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPrevTwitchParams message.
             * @function verify
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPrevTwitchParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                return null;
            };

            /**
             * Creates a GetPrevTwitchParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GetPrevTwitchParams} GetPrevTwitchParams
             */
            GetPrevTwitchParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GetPrevTwitchParams)
                    return object;
                var message = new $root.pubg.globalaccounts.GetPrevTwitchParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.GetPrevTwitchParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                return message;
            };

            /**
             * Creates a plain object from a GetPrevTwitchParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @static
             * @param {pubg.globalaccounts.GetPrevTwitchParams} message GetPrevTwitchParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPrevTwitchParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                return object;
            };

            /**
             * Converts this GetPrevTwitchParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GetPrevTwitchParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPrevTwitchParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPrevTwitchParams;
        })();

        globalaccounts.CompleteEnableTOTPParams = (function() {

            /**
             * Properties of a CompleteEnableTOTPParams.
             * @memberof pubg.globalaccounts
             * @interface ICompleteEnableTOTPParams
             * @property {string|null} [GUID] CompleteEnableTOTPParams GUID
             * @property {string|null} [Code] CompleteEnableTOTPParams Code
             */

            /**
             * Constructs a new CompleteEnableTOTPParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CompleteEnableTOTPParams.
             * @implements ICompleteEnableTOTPParams
             * @constructor
             * @param {pubg.globalaccounts.ICompleteEnableTOTPParams=} [properties] Properties to set
             */
            function CompleteEnableTOTPParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteEnableTOTPParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @instance
             */
            CompleteEnableTOTPParams.prototype.GUID = "";

            /**
             * CompleteEnableTOTPParams Code.
             * @member {string} Code
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @instance
             */
            CompleteEnableTOTPParams.prototype.Code = "";

            /**
             * Creates a new CompleteEnableTOTPParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {pubg.globalaccounts.ICompleteEnableTOTPParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CompleteEnableTOTPParams} CompleteEnableTOTPParams instance
             */
            CompleteEnableTOTPParams.create = function create(properties) {
                return new CompleteEnableTOTPParams(properties);
            };

            /**
             * Encodes the specified CompleteEnableTOTPParams message. Does not implicitly {@link pubg.globalaccounts.CompleteEnableTOTPParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {pubg.globalaccounts.ICompleteEnableTOTPParams} message CompleteEnableTOTPParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteEnableTOTPParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Code);
                return writer;
            };

            /**
             * Encodes the specified CompleteEnableTOTPParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.CompleteEnableTOTPParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {pubg.globalaccounts.ICompleteEnableTOTPParams} message CompleteEnableTOTPParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteEnableTOTPParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteEnableTOTPParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CompleteEnableTOTPParams} CompleteEnableTOTPParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteEnableTOTPParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CompleteEnableTOTPParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.Code = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteEnableTOTPParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CompleteEnableTOTPParams} CompleteEnableTOTPParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteEnableTOTPParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteEnableTOTPParams message.
             * @function verify
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteEnableTOTPParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    if (!$util.isString(message.Code))
                        return "Code: string expected";
                return null;
            };

            /**
             * Creates a CompleteEnableTOTPParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CompleteEnableTOTPParams} CompleteEnableTOTPParams
             */
            CompleteEnableTOTPParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CompleteEnableTOTPParams)
                    return object;
                var message = new $root.pubg.globalaccounts.CompleteEnableTOTPParams();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Code != null)
                    message.Code = String(object.Code);
                return message;
            };

            /**
             * Creates a plain object from a CompleteEnableTOTPParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @static
             * @param {pubg.globalaccounts.CompleteEnableTOTPParams} message CompleteEnableTOTPParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteEnableTOTPParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.Code = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = message.Code;
                return object;
            };

            /**
             * Converts this CompleteEnableTOTPParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CompleteEnableTOTPParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteEnableTOTPParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteEnableTOTPParams;
        })();

        globalaccounts.VerifyTOTPCodeParams = (function() {

            /**
             * Properties of a VerifyTOTPCodeParams.
             * @memberof pubg.globalaccounts
             * @interface IVerifyTOTPCodeParams
             * @property {string|null} [GUID] VerifyTOTPCodeParams GUID
             * @property {string|null} [Password] VerifyTOTPCodeParams Password
             * @property {string|null} [Code] VerifyTOTPCodeParams Code
             */

            /**
             * Constructs a new VerifyTOTPCodeParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a VerifyTOTPCodeParams.
             * @implements IVerifyTOTPCodeParams
             * @constructor
             * @param {pubg.globalaccounts.IVerifyTOTPCodeParams=} [properties] Properties to set
             */
            function VerifyTOTPCodeParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VerifyTOTPCodeParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @instance
             */
            VerifyTOTPCodeParams.prototype.GUID = "";

            /**
             * VerifyTOTPCodeParams Password.
             * @member {string} Password
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @instance
             */
            VerifyTOTPCodeParams.prototype.Password = "";

            /**
             * VerifyTOTPCodeParams Code.
             * @member {string} Code
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @instance
             */
            VerifyTOTPCodeParams.prototype.Code = "";

            /**
             * Creates a new VerifyTOTPCodeParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {pubg.globalaccounts.IVerifyTOTPCodeParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.VerifyTOTPCodeParams} VerifyTOTPCodeParams instance
             */
            VerifyTOTPCodeParams.create = function create(properties) {
                return new VerifyTOTPCodeParams(properties);
            };

            /**
             * Encodes the specified VerifyTOTPCodeParams message. Does not implicitly {@link pubg.globalaccounts.VerifyTOTPCodeParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {pubg.globalaccounts.IVerifyTOTPCodeParams} message VerifyTOTPCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VerifyTOTPCodeParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.Password != null && message.hasOwnProperty("Password"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Password);
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Code);
                return writer;
            };

            /**
             * Encodes the specified VerifyTOTPCodeParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.VerifyTOTPCodeParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {pubg.globalaccounts.IVerifyTOTPCodeParams} message VerifyTOTPCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VerifyTOTPCodeParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VerifyTOTPCodeParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.VerifyTOTPCodeParams} VerifyTOTPCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VerifyTOTPCodeParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.VerifyTOTPCodeParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.Password = reader.string();
                        break;
                    case 3:
                        message.Code = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VerifyTOTPCodeParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.VerifyTOTPCodeParams} VerifyTOTPCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VerifyTOTPCodeParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VerifyTOTPCodeParams message.
             * @function verify
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VerifyTOTPCodeParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Password != null && message.hasOwnProperty("Password"))
                    if (!$util.isString(message.Password))
                        return "Password: string expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    if (!$util.isString(message.Code))
                        return "Code: string expected";
                return null;
            };

            /**
             * Creates a VerifyTOTPCodeParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.VerifyTOTPCodeParams} VerifyTOTPCodeParams
             */
            VerifyTOTPCodeParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.VerifyTOTPCodeParams)
                    return object;
                var message = new $root.pubg.globalaccounts.VerifyTOTPCodeParams();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Password != null)
                    message.Password = String(object.Password);
                if (object.Code != null)
                    message.Code = String(object.Code);
                return message;
            };

            /**
             * Creates a plain object from a VerifyTOTPCodeParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @static
             * @param {pubg.globalaccounts.VerifyTOTPCodeParams} message VerifyTOTPCodeParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VerifyTOTPCodeParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.Password = "";
                    object.Code = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Password != null && message.hasOwnProperty("Password"))
                    object.Password = message.Password;
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = message.Code;
                return object;
            };

            /**
             * Converts this VerifyTOTPCodeParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.VerifyTOTPCodeParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VerifyTOTPCodeParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VerifyTOTPCodeParams;
        })();

        globalaccounts.SocialLoginParams = (function() {

            /**
             * Properties of a SocialLoginParams.
             * @memberof pubg.globalaccounts
             * @interface ISocialLoginParams
             * @property {pubg.globalaccounts.IUserData|null} [User] SocialLoginParams User
             * @property {string|null} [ProviderID] SocialLoginParams ProviderID
             */

            /**
             * Constructs a new SocialLoginParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a SocialLoginParams.
             * @implements ISocialLoginParams
             * @constructor
             * @param {pubg.globalaccounts.ISocialLoginParams=} [properties] Properties to set
             */
            function SocialLoginParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SocialLoginParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @instance
             */
            SocialLoginParams.prototype.User = null;

            /**
             * SocialLoginParams ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @instance
             */
            SocialLoginParams.prototype.ProviderID = "";

            /**
             * Creates a new SocialLoginParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {pubg.globalaccounts.ISocialLoginParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.SocialLoginParams} SocialLoginParams instance
             */
            SocialLoginParams.create = function create(properties) {
                return new SocialLoginParams(properties);
            };

            /**
             * Encodes the specified SocialLoginParams message. Does not implicitly {@link pubg.globalaccounts.SocialLoginParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {pubg.globalaccounts.ISocialLoginParams} message SocialLoginParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SocialLoginParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified SocialLoginParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.SocialLoginParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {pubg.globalaccounts.ISocialLoginParams} message SocialLoginParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SocialLoginParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SocialLoginParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.SocialLoginParams} SocialLoginParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SocialLoginParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.SocialLoginParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SocialLoginParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.SocialLoginParams} SocialLoginParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SocialLoginParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SocialLoginParams message.
             * @function verify
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SocialLoginParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a SocialLoginParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.SocialLoginParams} SocialLoginParams
             */
            SocialLoginParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.SocialLoginParams)
                    return object;
                var message = new $root.pubg.globalaccounts.SocialLoginParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.SocialLoginParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a SocialLoginParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @static
             * @param {pubg.globalaccounts.SocialLoginParams} message SocialLoginParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SocialLoginParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.ProviderID = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this SocialLoginParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.SocialLoginParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SocialLoginParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SocialLoginParams;
        })();

        globalaccounts.PreferredLangParams = (function() {

            /**
             * Properties of a PreferredLangParams.
             * @memberof pubg.globalaccounts
             * @interface IPreferredLangParams
             * @property {pubg.globalaccounts.IUserData|null} [User] PreferredLangParams User
             * @property {string|null} [GUID] PreferredLangParams GUID
             * @property {string|null} [Language] PreferredLangParams Language
             */

            /**
             * Constructs a new PreferredLangParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PreferredLangParams.
             * @implements IPreferredLangParams
             * @constructor
             * @param {pubg.globalaccounts.IPreferredLangParams=} [properties] Properties to set
             */
            function PreferredLangParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PreferredLangParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @instance
             */
            PreferredLangParams.prototype.User = null;

            /**
             * PreferredLangParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @instance
             */
            PreferredLangParams.prototype.GUID = "";

            /**
             * PreferredLangParams Language.
             * @member {string} Language
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @instance
             */
            PreferredLangParams.prototype.Language = "";

            /**
             * Creates a new PreferredLangParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {pubg.globalaccounts.IPreferredLangParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PreferredLangParams} PreferredLangParams instance
             */
            PreferredLangParams.create = function create(properties) {
                return new PreferredLangParams(properties);
            };

            /**
             * Encodes the specified PreferredLangParams message. Does not implicitly {@link pubg.globalaccounts.PreferredLangParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {pubg.globalaccounts.IPreferredLangParams} message PreferredLangParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreferredLangParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.Language != null && message.hasOwnProperty("Language"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Language);
                return writer;
            };

            /**
             * Encodes the specified PreferredLangParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.PreferredLangParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {pubg.globalaccounts.IPreferredLangParams} message PreferredLangParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreferredLangParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PreferredLangParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PreferredLangParams} PreferredLangParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreferredLangParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PreferredLangParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.Language = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PreferredLangParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PreferredLangParams} PreferredLangParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreferredLangParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PreferredLangParams message.
             * @function verify
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PreferredLangParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Language != null && message.hasOwnProperty("Language"))
                    if (!$util.isString(message.Language))
                        return "Language: string expected";
                return null;
            };

            /**
             * Creates a PreferredLangParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PreferredLangParams} PreferredLangParams
             */
            PreferredLangParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PreferredLangParams)
                    return object;
                var message = new $root.pubg.globalaccounts.PreferredLangParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.PreferredLangParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Language != null)
                    message.Language = String(object.Language);
                return message;
            };

            /**
             * Creates a plain object from a PreferredLangParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @static
             * @param {pubg.globalaccounts.PreferredLangParams} message PreferredLangParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PreferredLangParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.Language = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Language != null && message.hasOwnProperty("Language"))
                    object.Language = message.Language;
                return object;
            };

            /**
             * Converts this PreferredLangParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PreferredLangParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PreferredLangParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PreferredLangParams;
        })();

        globalaccounts.MagicLinkGenerateParams = (function() {

            /**
             * Properties of a MagicLinkGenerateParams.
             * @memberof pubg.globalaccounts
             * @interface IMagicLinkGenerateParams
             * @property {pubg.globalaccounts.IUserData|null} [User] MagicLinkGenerateParams User
             * @property {string|null} [Provider] MagicLinkGenerateParams Provider
             * @property {string|null} [ProviderID] MagicLinkGenerateParams ProviderID
             * @property {string|null} [DisplayName] MagicLinkGenerateParams DisplayName
             */

            /**
             * Constructs a new MagicLinkGenerateParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a MagicLinkGenerateParams.
             * @implements IMagicLinkGenerateParams
             * @constructor
             * @param {pubg.globalaccounts.IMagicLinkGenerateParams=} [properties] Properties to set
             */
            function MagicLinkGenerateParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MagicLinkGenerateParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @instance
             */
            MagicLinkGenerateParams.prototype.User = null;

            /**
             * MagicLinkGenerateParams Provider.
             * @member {string} Provider
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @instance
             */
            MagicLinkGenerateParams.prototype.Provider = "";

            /**
             * MagicLinkGenerateParams ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @instance
             */
            MagicLinkGenerateParams.prototype.ProviderID = "";

            /**
             * MagicLinkGenerateParams DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @instance
             */
            MagicLinkGenerateParams.prototype.DisplayName = "";

            /**
             * Creates a new MagicLinkGenerateParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {pubg.globalaccounts.IMagicLinkGenerateParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.MagicLinkGenerateParams} MagicLinkGenerateParams instance
             */
            MagicLinkGenerateParams.create = function create(properties) {
                return new MagicLinkGenerateParams(properties);
            };

            /**
             * Encodes the specified MagicLinkGenerateParams message. Does not implicitly {@link pubg.globalaccounts.MagicLinkGenerateParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {pubg.globalaccounts.IMagicLinkGenerateParams} message MagicLinkGenerateParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkGenerateParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Provider);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.ProviderID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.DisplayName);
                return writer;
            };

            /**
             * Encodes the specified MagicLinkGenerateParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.MagicLinkGenerateParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {pubg.globalaccounts.IMagicLinkGenerateParams} message MagicLinkGenerateParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkGenerateParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MagicLinkGenerateParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.MagicLinkGenerateParams} MagicLinkGenerateParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkGenerateParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.MagicLinkGenerateParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.Provider = reader.string();
                        break;
                    case 3:
                        message.ProviderID = reader.string();
                        break;
                    case 4:
                        message.DisplayName = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MagicLinkGenerateParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.MagicLinkGenerateParams} MagicLinkGenerateParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkGenerateParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MagicLinkGenerateParams message.
             * @function verify
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MagicLinkGenerateParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    if (!$util.isString(message.Provider))
                        return "Provider: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                return null;
            };

            /**
             * Creates a MagicLinkGenerateParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.MagicLinkGenerateParams} MagicLinkGenerateParams
             */
            MagicLinkGenerateParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.MagicLinkGenerateParams)
                    return object;
                var message = new $root.pubg.globalaccounts.MagicLinkGenerateParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.MagicLinkGenerateParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.Provider != null)
                    message.Provider = String(object.Provider);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                return message;
            };

            /**
             * Creates a plain object from a MagicLinkGenerateParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @static
             * @param {pubg.globalaccounts.MagicLinkGenerateParams} message MagicLinkGenerateParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MagicLinkGenerateParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.Provider = "";
                    object.ProviderID = "";
                    object.DisplayName = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    object.Provider = message.Provider;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                return object;
            };

            /**
             * Converts this MagicLinkGenerateParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.MagicLinkGenerateParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MagicLinkGenerateParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MagicLinkGenerateParams;
        })();

        globalaccounts.MagicLinkCodeParams = (function() {

            /**
             * Properties of a MagicLinkCodeParams.
             * @memberof pubg.globalaccounts
             * @interface IMagicLinkCodeParams
             * @property {pubg.globalaccounts.IUserData|null} [User] MagicLinkCodeParams User
             * @property {string|null} [LinkCode] MagicLinkCodeParams LinkCode
             */

            /**
             * Constructs a new MagicLinkCodeParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a MagicLinkCodeParams.
             * @implements IMagicLinkCodeParams
             * @constructor
             * @param {pubg.globalaccounts.IMagicLinkCodeParams=} [properties] Properties to set
             */
            function MagicLinkCodeParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MagicLinkCodeParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @instance
             */
            MagicLinkCodeParams.prototype.User = null;

            /**
             * MagicLinkCodeParams LinkCode.
             * @member {string} LinkCode
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @instance
             */
            MagicLinkCodeParams.prototype.LinkCode = "";

            /**
             * Creates a new MagicLinkCodeParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {pubg.globalaccounts.IMagicLinkCodeParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.MagicLinkCodeParams} MagicLinkCodeParams instance
             */
            MagicLinkCodeParams.create = function create(properties) {
                return new MagicLinkCodeParams(properties);
            };

            /**
             * Encodes the specified MagicLinkCodeParams message. Does not implicitly {@link pubg.globalaccounts.MagicLinkCodeParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {pubg.globalaccounts.IMagicLinkCodeParams} message MagicLinkCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkCodeParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.LinkCode != null && message.hasOwnProperty("LinkCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.LinkCode);
                return writer;
            };

            /**
             * Encodes the specified MagicLinkCodeParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.MagicLinkCodeParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {pubg.globalaccounts.IMagicLinkCodeParams} message MagicLinkCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkCodeParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MagicLinkCodeParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.MagicLinkCodeParams} MagicLinkCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkCodeParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.MagicLinkCodeParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.LinkCode = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MagicLinkCodeParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.MagicLinkCodeParams} MagicLinkCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkCodeParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MagicLinkCodeParams message.
             * @function verify
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MagicLinkCodeParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.LinkCode != null && message.hasOwnProperty("LinkCode"))
                    if (!$util.isString(message.LinkCode))
                        return "LinkCode: string expected";
                return null;
            };

            /**
             * Creates a MagicLinkCodeParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.MagicLinkCodeParams} MagicLinkCodeParams
             */
            MagicLinkCodeParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.MagicLinkCodeParams)
                    return object;
                var message = new $root.pubg.globalaccounts.MagicLinkCodeParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.MagicLinkCodeParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.LinkCode != null)
                    message.LinkCode = String(object.LinkCode);
                return message;
            };

            /**
             * Creates a plain object from a MagicLinkCodeParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @static
             * @param {pubg.globalaccounts.MagicLinkCodeParams} message MagicLinkCodeParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MagicLinkCodeParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.LinkCode = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.LinkCode != null && message.hasOwnProperty("LinkCode"))
                    object.LinkCode = message.LinkCode;
                return object;
            };

            /**
             * Converts this MagicLinkCodeParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.MagicLinkCodeParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MagicLinkCodeParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MagicLinkCodeParams;
        })();

        globalaccounts.UpdateCreatorCodeParams = (function() {

            /**
             * Properties of an UpdateCreatorCodeParams.
             * @memberof pubg.globalaccounts
             * @interface IUpdateCreatorCodeParams
             * @property {pubg.globalaccounts.IUserData|null} [User] UpdateCreatorCodeParams User
             * @property {string|null} [GUID] UpdateCreatorCodeParams GUID
             * @property {string|null} [CreatorCode] UpdateCreatorCodeParams CreatorCode
             */

            /**
             * Constructs a new UpdateCreatorCodeParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an UpdateCreatorCodeParams.
             * @implements IUpdateCreatorCodeParams
             * @constructor
             * @param {pubg.globalaccounts.IUpdateCreatorCodeParams=} [properties] Properties to set
             */
            function UpdateCreatorCodeParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateCreatorCodeParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @instance
             */
            UpdateCreatorCodeParams.prototype.User = null;

            /**
             * UpdateCreatorCodeParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @instance
             */
            UpdateCreatorCodeParams.prototype.GUID = "";

            /**
             * UpdateCreatorCodeParams CreatorCode.
             * @member {string} CreatorCode
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @instance
             */
            UpdateCreatorCodeParams.prototype.CreatorCode = "";

            /**
             * Creates a new UpdateCreatorCodeParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {pubg.globalaccounts.IUpdateCreatorCodeParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.UpdateCreatorCodeParams} UpdateCreatorCodeParams instance
             */
            UpdateCreatorCodeParams.create = function create(properties) {
                return new UpdateCreatorCodeParams(properties);
            };

            /**
             * Encodes the specified UpdateCreatorCodeParams message. Does not implicitly {@link pubg.globalaccounts.UpdateCreatorCodeParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {pubg.globalaccounts.IUpdateCreatorCodeParams} message UpdateCreatorCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCreatorCodeParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.CreatorCode != null && message.hasOwnProperty("CreatorCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.CreatorCode);
                return writer;
            };

            /**
             * Encodes the specified UpdateCreatorCodeParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.UpdateCreatorCodeParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {pubg.globalaccounts.IUpdateCreatorCodeParams} message UpdateCreatorCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCreatorCodeParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateCreatorCodeParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.UpdateCreatorCodeParams} UpdateCreatorCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCreatorCodeParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.UpdateCreatorCodeParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.CreatorCode = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateCreatorCodeParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.UpdateCreatorCodeParams} UpdateCreatorCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCreatorCodeParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateCreatorCodeParams message.
             * @function verify
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateCreatorCodeParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.CreatorCode != null && message.hasOwnProperty("CreatorCode"))
                    if (!$util.isString(message.CreatorCode))
                        return "CreatorCode: string expected";
                return null;
            };

            /**
             * Creates an UpdateCreatorCodeParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.UpdateCreatorCodeParams} UpdateCreatorCodeParams
             */
            UpdateCreatorCodeParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.UpdateCreatorCodeParams)
                    return object;
                var message = new $root.pubg.globalaccounts.UpdateCreatorCodeParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.UpdateCreatorCodeParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.CreatorCode != null)
                    message.CreatorCode = String(object.CreatorCode);
                return message;
            };

            /**
             * Creates a plain object from an UpdateCreatorCodeParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @static
             * @param {pubg.globalaccounts.UpdateCreatorCodeParams} message UpdateCreatorCodeParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateCreatorCodeParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.CreatorCode = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.CreatorCode != null && message.hasOwnProperty("CreatorCode"))
                    object.CreatorCode = message.CreatorCode;
                return object;
            };

            /**
             * Converts this UpdateCreatorCodeParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.UpdateCreatorCodeParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateCreatorCodeParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UpdateCreatorCodeParams;
        })();

        globalaccounts.GetCreatorCodesParams = (function() {

            /**
             * Properties of a GetCreatorCodesParams.
             * @memberof pubg.globalaccounts
             * @interface IGetCreatorCodesParams
             */

            /**
             * Constructs a new GetCreatorCodesParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GetCreatorCodesParams.
             * @implements IGetCreatorCodesParams
             * @constructor
             * @param {pubg.globalaccounts.IGetCreatorCodesParams=} [properties] Properties to set
             */
            function GetCreatorCodesParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new GetCreatorCodesParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {pubg.globalaccounts.IGetCreatorCodesParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GetCreatorCodesParams} GetCreatorCodesParams instance
             */
            GetCreatorCodesParams.create = function create(properties) {
                return new GetCreatorCodesParams(properties);
            };

            /**
             * Encodes the specified GetCreatorCodesParams message. Does not implicitly {@link pubg.globalaccounts.GetCreatorCodesParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {pubg.globalaccounts.IGetCreatorCodesParams} message GetCreatorCodesParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetCreatorCodesParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified GetCreatorCodesParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.GetCreatorCodesParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {pubg.globalaccounts.IGetCreatorCodesParams} message GetCreatorCodesParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetCreatorCodesParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetCreatorCodesParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GetCreatorCodesParams} GetCreatorCodesParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetCreatorCodesParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GetCreatorCodesParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetCreatorCodesParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GetCreatorCodesParams} GetCreatorCodesParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetCreatorCodesParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetCreatorCodesParams message.
             * @function verify
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetCreatorCodesParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a GetCreatorCodesParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GetCreatorCodesParams} GetCreatorCodesParams
             */
            GetCreatorCodesParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GetCreatorCodesParams)
                    return object;
                return new $root.pubg.globalaccounts.GetCreatorCodesParams();
            };

            /**
             * Creates a plain object from a GetCreatorCodesParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @static
             * @param {pubg.globalaccounts.GetCreatorCodesParams} message GetCreatorCodesParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetCreatorCodesParams.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this GetCreatorCodesParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GetCreatorCodesParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetCreatorCodesParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetCreatorCodesParams;
        })();

        globalaccounts.GetPromotionsParams = (function() {

            /**
             * Properties of a GetPromotionsParams.
             * @memberof pubg.globalaccounts
             * @interface IGetPromotionsParams
             */

            /**
             * Constructs a new GetPromotionsParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GetPromotionsParams.
             * @implements IGetPromotionsParams
             * @constructor
             * @param {pubg.globalaccounts.IGetPromotionsParams=} [properties] Properties to set
             */
            function GetPromotionsParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new GetPromotionsParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {pubg.globalaccounts.IGetPromotionsParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GetPromotionsParams} GetPromotionsParams instance
             */
            GetPromotionsParams.create = function create(properties) {
                return new GetPromotionsParams(properties);
            };

            /**
             * Encodes the specified GetPromotionsParams message. Does not implicitly {@link pubg.globalaccounts.GetPromotionsParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {pubg.globalaccounts.IGetPromotionsParams} message GetPromotionsParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPromotionsParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified GetPromotionsParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.GetPromotionsParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {pubg.globalaccounts.IGetPromotionsParams} message GetPromotionsParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetPromotionsParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetPromotionsParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GetPromotionsParams} GetPromotionsParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPromotionsParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GetPromotionsParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetPromotionsParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GetPromotionsParams} GetPromotionsParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetPromotionsParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetPromotionsParams message.
             * @function verify
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetPromotionsParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a GetPromotionsParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GetPromotionsParams} GetPromotionsParams
             */
            GetPromotionsParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GetPromotionsParams)
                    return object;
                return new $root.pubg.globalaccounts.GetPromotionsParams();
            };

            /**
             * Creates a plain object from a GetPromotionsParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @static
             * @param {pubg.globalaccounts.GetPromotionsParams} message GetPromotionsParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetPromotionsParams.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this GetPromotionsParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GetPromotionsParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetPromotionsParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetPromotionsParams;
        })();

        globalaccounts.ClaimPromoCodeParams = (function() {

            /**
             * Properties of a ClaimPromoCodeParams.
             * @memberof pubg.globalaccounts
             * @interface IClaimPromoCodeParams
             * @property {pubg.globalaccounts.IUserData|null} [User] ClaimPromoCodeParams User
             * @property {string|null} [GUID] ClaimPromoCodeParams GUID
             * @property {string|null} [PromotionID] ClaimPromoCodeParams PromotionID
             */

            /**
             * Constructs a new ClaimPromoCodeParams.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a ClaimPromoCodeParams.
             * @implements IClaimPromoCodeParams
             * @constructor
             * @param {pubg.globalaccounts.IClaimPromoCodeParams=} [properties] Properties to set
             */
            function ClaimPromoCodeParams(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ClaimPromoCodeParams User.
             * @member {pubg.globalaccounts.IUserData|null|undefined} User
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @instance
             */
            ClaimPromoCodeParams.prototype.User = null;

            /**
             * ClaimPromoCodeParams GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @instance
             */
            ClaimPromoCodeParams.prototype.GUID = "";

            /**
             * ClaimPromoCodeParams PromotionID.
             * @member {string} PromotionID
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @instance
             */
            ClaimPromoCodeParams.prototype.PromotionID = "";

            /**
             * Creates a new ClaimPromoCodeParams instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {pubg.globalaccounts.IClaimPromoCodeParams=} [properties] Properties to set
             * @returns {pubg.globalaccounts.ClaimPromoCodeParams} ClaimPromoCodeParams instance
             */
            ClaimPromoCodeParams.create = function create(properties) {
                return new ClaimPromoCodeParams(properties);
            };

            /**
             * Encodes the specified ClaimPromoCodeParams message. Does not implicitly {@link pubg.globalaccounts.ClaimPromoCodeParams.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {pubg.globalaccounts.IClaimPromoCodeParams} message ClaimPromoCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClaimPromoCodeParams.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.User != null && message.hasOwnProperty("User"))
                    $root.pubg.globalaccounts.UserData.encode(message.User, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.GUID);
                if (message.PromotionID != null && message.hasOwnProperty("PromotionID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.PromotionID);
                return writer;
            };

            /**
             * Encodes the specified ClaimPromoCodeParams message, length delimited. Does not implicitly {@link pubg.globalaccounts.ClaimPromoCodeParams.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {pubg.globalaccounts.IClaimPromoCodeParams} message ClaimPromoCodeParams message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ClaimPromoCodeParams.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ClaimPromoCodeParams message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.ClaimPromoCodeParams} ClaimPromoCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClaimPromoCodeParams.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.ClaimPromoCodeParams();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.User = $root.pubg.globalaccounts.UserData.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.PromotionID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ClaimPromoCodeParams message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.ClaimPromoCodeParams} ClaimPromoCodeParams
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ClaimPromoCodeParams.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ClaimPromoCodeParams message.
             * @function verify
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ClaimPromoCodeParams.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.User != null && message.hasOwnProperty("User")) {
                    var error = $root.pubg.globalaccounts.UserData.verify(message.User);
                    if (error)
                        return "User." + error;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.PromotionID != null && message.hasOwnProperty("PromotionID"))
                    if (!$util.isString(message.PromotionID))
                        return "PromotionID: string expected";
                return null;
            };

            /**
             * Creates a ClaimPromoCodeParams message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.ClaimPromoCodeParams} ClaimPromoCodeParams
             */
            ClaimPromoCodeParams.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.ClaimPromoCodeParams)
                    return object;
                var message = new $root.pubg.globalaccounts.ClaimPromoCodeParams();
                if (object.User != null) {
                    if (typeof object.User !== "object")
                        throw TypeError(".pubg.globalaccounts.ClaimPromoCodeParams.User: object expected");
                    message.User = $root.pubg.globalaccounts.UserData.fromObject(object.User);
                }
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.PromotionID != null)
                    message.PromotionID = String(object.PromotionID);
                return message;
            };

            /**
             * Creates a plain object from a ClaimPromoCodeParams message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @static
             * @param {pubg.globalaccounts.ClaimPromoCodeParams} message ClaimPromoCodeParams
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ClaimPromoCodeParams.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.User = null;
                    object.GUID = "";
                    object.PromotionID = "";
                }
                if (message.User != null && message.hasOwnProperty("User"))
                    object.User = $root.pubg.globalaccounts.UserData.toObject(message.User, options);
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.PromotionID != null && message.hasOwnProperty("PromotionID"))
                    object.PromotionID = message.PromotionID;
                return object;
            };

            /**
             * Converts this ClaimPromoCodeParams to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.ClaimPromoCodeParams
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ClaimPromoCodeParams.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ClaimPromoCodeParams;
        })();

        globalaccounts.StatusResponse = (function() {

            /**
             * Properties of a StatusResponse.
             * @memberof pubg.globalaccounts
             * @interface IStatusResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] StatusResponse Code
             * @property {string|null} [Message] StatusResponse Message
             * @property {string|null} [Error] StatusResponse Error
             */

            /**
             * Constructs a new StatusResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a StatusResponse.
             * @implements IStatusResponse
             * @constructor
             * @param {pubg.globalaccounts.IStatusResponse=} [properties] Properties to set
             */
            function StatusResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StatusResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.StatusResponse
             * @instance
             */
            StatusResponse.prototype.Code = 0;

            /**
             * StatusResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.StatusResponse
             * @instance
             */
            StatusResponse.prototype.Message = "";

            /**
             * StatusResponse Error.
             * @member {string} Error
             * @memberof pubg.globalaccounts.StatusResponse
             * @instance
             */
            StatusResponse.prototype.Error = "";

            /**
             * Creates a new StatusResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {pubg.globalaccounts.IStatusResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.StatusResponse} StatusResponse instance
             */
            StatusResponse.create = function create(properties) {
                return new StatusResponse(properties);
            };

            /**
             * Encodes the specified StatusResponse message. Does not implicitly {@link pubg.globalaccounts.StatusResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {pubg.globalaccounts.IStatusResponse} message StatusResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatusResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Error != null && message.hasOwnProperty("Error"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Error);
                return writer;
            };

            /**
             * Encodes the specified StatusResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.StatusResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {pubg.globalaccounts.IStatusResponse} message StatusResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StatusResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.StatusResponse} StatusResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatusResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.StatusResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.Error = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StatusResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.StatusResponse} StatusResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StatusResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StatusResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StatusResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Error != null && message.hasOwnProperty("Error"))
                    if (!$util.isString(message.Error))
                        return "Error: string expected";
                return null;
            };

            /**
             * Creates a StatusResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.StatusResponse} StatusResponse
             */
            StatusResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.StatusResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.StatusResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Error != null)
                    message.Error = String(object.Error);
                return message;
            };

            /**
             * Creates a plain object from a StatusResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.StatusResponse
             * @static
             * @param {pubg.globalaccounts.StatusResponse} message StatusResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StatusResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.Error = "";
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Error != null && message.hasOwnProperty("Error"))
                    object.Error = message.Error;
                return object;
            };

            /**
             * Converts this StatusResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.StatusResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StatusResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StatusResponse;
        })();

        globalaccounts.TokenClaimResponse = (function() {

            /**
             * Properties of a TokenClaimResponse.
             * @memberof pubg.globalaccounts
             * @interface ITokenClaimResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] TokenClaimResponse Code
             * @property {string|null} [Message] TokenClaimResponse Message
             * @property {string|null} [Error] TokenClaimResponse Error
             * @property {Object.<string,string>|null} [TokenClaim] TokenClaimResponse TokenClaim
             */

            /**
             * Constructs a new TokenClaimResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a TokenClaimResponse.
             * @implements ITokenClaimResponse
             * @constructor
             * @param {pubg.globalaccounts.ITokenClaimResponse=} [properties] Properties to set
             */
            function TokenClaimResponse(properties) {
                this.TokenClaim = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TokenClaimResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @instance
             */
            TokenClaimResponse.prototype.Code = 0;

            /**
             * TokenClaimResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @instance
             */
            TokenClaimResponse.prototype.Message = "";

            /**
             * TokenClaimResponse Error.
             * @member {string} Error
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @instance
             */
            TokenClaimResponse.prototype.Error = "";

            /**
             * TokenClaimResponse TokenClaim.
             * @member {Object.<string,string>} TokenClaim
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @instance
             */
            TokenClaimResponse.prototype.TokenClaim = $util.emptyObject;

            /**
             * Creates a new TokenClaimResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {pubg.globalaccounts.ITokenClaimResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.TokenClaimResponse} TokenClaimResponse instance
             */
            TokenClaimResponse.create = function create(properties) {
                return new TokenClaimResponse(properties);
            };

            /**
             * Encodes the specified TokenClaimResponse message. Does not implicitly {@link pubg.globalaccounts.TokenClaimResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {pubg.globalaccounts.ITokenClaimResponse} message TokenClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenClaimResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Error != null && message.hasOwnProperty("Error"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Error);
                if (message.TokenClaim != null && message.hasOwnProperty("TokenClaim"))
                    for (var keys = Object.keys(message.TokenClaim), i = 0; i < keys.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.TokenClaim[keys[i]]).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TokenClaimResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.TokenClaimResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {pubg.globalaccounts.ITokenClaimResponse} message TokenClaimResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TokenClaimResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TokenClaimResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.TokenClaimResponse} TokenClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenClaimResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.TokenClaimResponse(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.Error = reader.string();
                        break;
                    case 4:
                        reader.skip().pos++;
                        if (message.TokenClaim === $util.emptyObject)
                            message.TokenClaim = {};
                        key = reader.string();
                        reader.pos++;
                        message.TokenClaim[key] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TokenClaimResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.TokenClaimResponse} TokenClaimResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TokenClaimResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TokenClaimResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TokenClaimResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Error != null && message.hasOwnProperty("Error"))
                    if (!$util.isString(message.Error))
                        return "Error: string expected";
                if (message.TokenClaim != null && message.hasOwnProperty("TokenClaim")) {
                    if (!$util.isObject(message.TokenClaim))
                        return "TokenClaim: object expected";
                    var key = Object.keys(message.TokenClaim);
                    for (var i = 0; i < key.length; ++i)
                        if (!$util.isString(message.TokenClaim[key[i]]))
                            return "TokenClaim: string{k:string} expected";
                }
                return null;
            };

            /**
             * Creates a TokenClaimResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.TokenClaimResponse} TokenClaimResponse
             */
            TokenClaimResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.TokenClaimResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.TokenClaimResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Error != null)
                    message.Error = String(object.Error);
                if (object.TokenClaim) {
                    if (typeof object.TokenClaim !== "object")
                        throw TypeError(".pubg.globalaccounts.TokenClaimResponse.TokenClaim: object expected");
                    message.TokenClaim = {};
                    for (var keys = Object.keys(object.TokenClaim), i = 0; i < keys.length; ++i)
                        message.TokenClaim[keys[i]] = String(object.TokenClaim[keys[i]]);
                }
                return message;
            };

            /**
             * Creates a plain object from a TokenClaimResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @static
             * @param {pubg.globalaccounts.TokenClaimResponse} message TokenClaimResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TokenClaimResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.TokenClaim = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.Error = "";
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Error != null && message.hasOwnProperty("Error"))
                    object.Error = message.Error;
                var keys2;
                if (message.TokenClaim && (keys2 = Object.keys(message.TokenClaim)).length) {
                    object.TokenClaim = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.TokenClaim[keys2[j]] = message.TokenClaim[keys2[j]];
                }
                return object;
            };

            /**
             * Converts this TokenClaimResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.TokenClaimResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TokenClaimResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TokenClaimResponse;
        })();

        globalaccounts.GlobalAccountResponse = (function() {

            /**
             * Properties of a GlobalAccountResponse.
             * @memberof pubg.globalaccounts
             * @interface IGlobalAccountResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] GlobalAccountResponse Code
             * @property {string|null} [Message] GlobalAccountResponse Message
             * @property {pubg.globalaccounts.IGlobalAccount|null} [Account] GlobalAccountResponse Account
             */

            /**
             * Constructs a new GlobalAccountResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GlobalAccountResponse.
             * @implements IGlobalAccountResponse
             * @constructor
             * @param {pubg.globalaccounts.IGlobalAccountResponse=} [properties] Properties to set
             */
            function GlobalAccountResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GlobalAccountResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @instance
             */
            GlobalAccountResponse.prototype.Code = 0;

            /**
             * GlobalAccountResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @instance
             */
            GlobalAccountResponse.prototype.Message = "";

            /**
             * GlobalAccountResponse Account.
             * @member {pubg.globalaccounts.IGlobalAccount|null|undefined} Account
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @instance
             */
            GlobalAccountResponse.prototype.Account = null;

            /**
             * Creates a new GlobalAccountResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {pubg.globalaccounts.IGlobalAccountResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GlobalAccountResponse} GlobalAccountResponse instance
             */
            GlobalAccountResponse.create = function create(properties) {
                return new GlobalAccountResponse(properties);
            };

            /**
             * Encodes the specified GlobalAccountResponse message. Does not implicitly {@link pubg.globalaccounts.GlobalAccountResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {pubg.globalaccounts.IGlobalAccountResponse} message GlobalAccountResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GlobalAccountResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Account != null && message.hasOwnProperty("Account"))
                    $root.pubg.globalaccounts.GlobalAccount.encode(message.Account, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GlobalAccountResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.GlobalAccountResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {pubg.globalaccounts.IGlobalAccountResponse} message GlobalAccountResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GlobalAccountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GlobalAccountResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GlobalAccountResponse} GlobalAccountResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GlobalAccountResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GlobalAccountResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.Account = $root.pubg.globalaccounts.GlobalAccount.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GlobalAccountResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GlobalAccountResponse} GlobalAccountResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GlobalAccountResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GlobalAccountResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GlobalAccountResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Account != null && message.hasOwnProperty("Account")) {
                    var error = $root.pubg.globalaccounts.GlobalAccount.verify(message.Account);
                    if (error)
                        return "Account." + error;
                }
                return null;
            };

            /**
             * Creates a GlobalAccountResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GlobalAccountResponse} GlobalAccountResponse
             */
            GlobalAccountResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GlobalAccountResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.GlobalAccountResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Account != null) {
                    if (typeof object.Account !== "object")
                        throw TypeError(".pubg.globalaccounts.GlobalAccountResponse.Account: object expected");
                    message.Account = $root.pubg.globalaccounts.GlobalAccount.fromObject(object.Account);
                }
                return message;
            };

            /**
             * Creates a plain object from a GlobalAccountResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @static
             * @param {pubg.globalaccounts.GlobalAccountResponse} message GlobalAccountResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GlobalAccountResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.Account = null;
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Account != null && message.hasOwnProperty("Account"))
                    object.Account = $root.pubg.globalaccounts.GlobalAccount.toObject(message.Account, options);
                return object;
            };

            /**
             * Converts this GlobalAccountResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GlobalAccountResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GlobalAccountResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GlobalAccountResponse;
        })();

        globalaccounts.GetLinkResponse = (function() {

            /**
             * Properties of a GetLinkResponse.
             * @memberof pubg.globalaccounts
             * @interface IGetLinkResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] GetLinkResponse Code
             * @property {string|null} [Message] GetLinkResponse Message
             * @property {pubg.globalaccounts.IAuthenticationData|null} [Link] GetLinkResponse Link
             */

            /**
             * Constructs a new GetLinkResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GetLinkResponse.
             * @implements IGetLinkResponse
             * @constructor
             * @param {pubg.globalaccounts.IGetLinkResponse=} [properties] Properties to set
             */
            function GetLinkResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GetLinkResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @instance
             */
            GetLinkResponse.prototype.Code = 0;

            /**
             * GetLinkResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @instance
             */
            GetLinkResponse.prototype.Message = "";

            /**
             * GetLinkResponse Link.
             * @member {pubg.globalaccounts.IAuthenticationData|null|undefined} Link
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @instance
             */
            GetLinkResponse.prototype.Link = null;

            /**
             * Creates a new GetLinkResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {pubg.globalaccounts.IGetLinkResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GetLinkResponse} GetLinkResponse instance
             */
            GetLinkResponse.create = function create(properties) {
                return new GetLinkResponse(properties);
            };

            /**
             * Encodes the specified GetLinkResponse message. Does not implicitly {@link pubg.globalaccounts.GetLinkResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {pubg.globalaccounts.IGetLinkResponse} message GetLinkResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetLinkResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Link != null && message.hasOwnProperty("Link"))
                    $root.pubg.globalaccounts.AuthenticationData.encode(message.Link, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GetLinkResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.GetLinkResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {pubg.globalaccounts.IGetLinkResponse} message GetLinkResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GetLinkResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GetLinkResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GetLinkResponse} GetLinkResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetLinkResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GetLinkResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.Link = $root.pubg.globalaccounts.AuthenticationData.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GetLinkResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GetLinkResponse} GetLinkResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GetLinkResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GetLinkResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GetLinkResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Link != null && message.hasOwnProperty("Link")) {
                    var error = $root.pubg.globalaccounts.AuthenticationData.verify(message.Link);
                    if (error)
                        return "Link." + error;
                }
                return null;
            };

            /**
             * Creates a GetLinkResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GetLinkResponse} GetLinkResponse
             */
            GetLinkResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GetLinkResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.GetLinkResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Link != null) {
                    if (typeof object.Link !== "object")
                        throw TypeError(".pubg.globalaccounts.GetLinkResponse.Link: object expected");
                    message.Link = $root.pubg.globalaccounts.AuthenticationData.fromObject(object.Link);
                }
                return message;
            };

            /**
             * Creates a plain object from a GetLinkResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @static
             * @param {pubg.globalaccounts.GetLinkResponse} message GetLinkResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GetLinkResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.Link = null;
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Link != null && message.hasOwnProperty("Link"))
                    object.Link = $root.pubg.globalaccounts.AuthenticationData.toObject(message.Link, options);
                return object;
            };

            /**
             * Converts this GetLinkResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GetLinkResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GetLinkResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GetLinkResponse;
        })();

        globalaccounts.PrevTwitchResponse = (function() {

            /**
             * Properties of a PrevTwitchResponse.
             * @memberof pubg.globalaccounts
             * @interface IPrevTwitchResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] PrevTwitchResponse Code
             * @property {string|null} [Message] PrevTwitchResponse Message
             * @property {pubg.globalaccounts.IPrevTwitch|null} [Data] PrevTwitchResponse Data
             */

            /**
             * Constructs a new PrevTwitchResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PrevTwitchResponse.
             * @implements IPrevTwitchResponse
             * @constructor
             * @param {pubg.globalaccounts.IPrevTwitchResponse=} [properties] Properties to set
             */
            function PrevTwitchResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrevTwitchResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @instance
             */
            PrevTwitchResponse.prototype.Code = 0;

            /**
             * PrevTwitchResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @instance
             */
            PrevTwitchResponse.prototype.Message = "";

            /**
             * PrevTwitchResponse Data.
             * @member {pubg.globalaccounts.IPrevTwitch|null|undefined} Data
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @instance
             */
            PrevTwitchResponse.prototype.Data = null;

            /**
             * Creates a new PrevTwitchResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {pubg.globalaccounts.IPrevTwitchResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PrevTwitchResponse} PrevTwitchResponse instance
             */
            PrevTwitchResponse.create = function create(properties) {
                return new PrevTwitchResponse(properties);
            };

            /**
             * Encodes the specified PrevTwitchResponse message. Does not implicitly {@link pubg.globalaccounts.PrevTwitchResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {pubg.globalaccounts.IPrevTwitchResponse} message PrevTwitchResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrevTwitchResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Data != null && message.hasOwnProperty("Data"))
                    $root.pubg.globalaccounts.PrevTwitch.encode(message.Data, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PrevTwitchResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.PrevTwitchResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {pubg.globalaccounts.IPrevTwitchResponse} message PrevTwitchResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrevTwitchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrevTwitchResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PrevTwitchResponse} PrevTwitchResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrevTwitchResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PrevTwitchResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.Data = $root.pubg.globalaccounts.PrevTwitch.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrevTwitchResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PrevTwitchResponse} PrevTwitchResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrevTwitchResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrevTwitchResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrevTwitchResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Data != null && message.hasOwnProperty("Data")) {
                    var error = $root.pubg.globalaccounts.PrevTwitch.verify(message.Data);
                    if (error)
                        return "Data." + error;
                }
                return null;
            };

            /**
             * Creates a PrevTwitchResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PrevTwitchResponse} PrevTwitchResponse
             */
            PrevTwitchResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PrevTwitchResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.PrevTwitchResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Data != null) {
                    if (typeof object.Data !== "object")
                        throw TypeError(".pubg.globalaccounts.PrevTwitchResponse.Data: object expected");
                    message.Data = $root.pubg.globalaccounts.PrevTwitch.fromObject(object.Data);
                }
                return message;
            };

            /**
             * Creates a plain object from a PrevTwitchResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @static
             * @param {pubg.globalaccounts.PrevTwitchResponse} message PrevTwitchResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrevTwitchResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.Data = null;
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Data != null && message.hasOwnProperty("Data"))
                    object.Data = $root.pubg.globalaccounts.PrevTwitch.toObject(message.Data, options);
                return object;
            };

            /**
             * Converts this PrevTwitchResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PrevTwitchResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrevTwitchResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrevTwitchResponse;
        })();

        globalaccounts.BeginEnableTOTPResponse = (function() {

            /**
             * Properties of a BeginEnableTOTPResponse.
             * @memberof pubg.globalaccounts
             * @interface IBeginEnableTOTPResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] BeginEnableTOTPResponse Code
             * @property {string|null} [Message] BeginEnableTOTPResponse Message
             * @property {Uint8Array|null} [TOTPSetupImage] BeginEnableTOTPResponse TOTPSetupImage
             */

            /**
             * Constructs a new BeginEnableTOTPResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a BeginEnableTOTPResponse.
             * @implements IBeginEnableTOTPResponse
             * @constructor
             * @param {pubg.globalaccounts.IBeginEnableTOTPResponse=} [properties] Properties to set
             */
            function BeginEnableTOTPResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BeginEnableTOTPResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @instance
             */
            BeginEnableTOTPResponse.prototype.Code = 0;

            /**
             * BeginEnableTOTPResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @instance
             */
            BeginEnableTOTPResponse.prototype.Message = "";

            /**
             * BeginEnableTOTPResponse TOTPSetupImage.
             * @member {Uint8Array} TOTPSetupImage
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @instance
             */
            BeginEnableTOTPResponse.prototype.TOTPSetupImage = $util.newBuffer([]);

            /**
             * Creates a new BeginEnableTOTPResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.IBeginEnableTOTPResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.BeginEnableTOTPResponse} BeginEnableTOTPResponse instance
             */
            BeginEnableTOTPResponse.create = function create(properties) {
                return new BeginEnableTOTPResponse(properties);
            };

            /**
             * Encodes the specified BeginEnableTOTPResponse message. Does not implicitly {@link pubg.globalaccounts.BeginEnableTOTPResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.IBeginEnableTOTPResponse} message BeginEnableTOTPResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BeginEnableTOTPResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.TOTPSetupImage != null && message.hasOwnProperty("TOTPSetupImage"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.TOTPSetupImage);
                return writer;
            };

            /**
             * Encodes the specified BeginEnableTOTPResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.BeginEnableTOTPResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.IBeginEnableTOTPResponse} message BeginEnableTOTPResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BeginEnableTOTPResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BeginEnableTOTPResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.BeginEnableTOTPResponse} BeginEnableTOTPResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BeginEnableTOTPResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.BeginEnableTOTPResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.TOTPSetupImage = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BeginEnableTOTPResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.BeginEnableTOTPResponse} BeginEnableTOTPResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BeginEnableTOTPResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BeginEnableTOTPResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BeginEnableTOTPResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.TOTPSetupImage != null && message.hasOwnProperty("TOTPSetupImage"))
                    if (!(message.TOTPSetupImage && typeof message.TOTPSetupImage.length === "number" || $util.isString(message.TOTPSetupImage)))
                        return "TOTPSetupImage: buffer expected";
                return null;
            };

            /**
             * Creates a BeginEnableTOTPResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.BeginEnableTOTPResponse} BeginEnableTOTPResponse
             */
            BeginEnableTOTPResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.BeginEnableTOTPResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.BeginEnableTOTPResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.TOTPSetupImage != null)
                    if (typeof object.TOTPSetupImage === "string")
                        $util.base64.decode(object.TOTPSetupImage, message.TOTPSetupImage = $util.newBuffer($util.base64.length(object.TOTPSetupImage)), 0);
                    else if (object.TOTPSetupImage.length)
                        message.TOTPSetupImage = object.TOTPSetupImage;
                return message;
            };

            /**
             * Creates a plain object from a BeginEnableTOTPResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.BeginEnableTOTPResponse} message BeginEnableTOTPResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BeginEnableTOTPResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    if (options.bytes === String)
                        object.TOTPSetupImage = "";
                    else {
                        object.TOTPSetupImage = [];
                        if (options.bytes !== Array)
                            object.TOTPSetupImage = $util.newBuffer(object.TOTPSetupImage);
                    }
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.TOTPSetupImage != null && message.hasOwnProperty("TOTPSetupImage"))
                    object.TOTPSetupImage = options.bytes === String ? $util.base64.encode(message.TOTPSetupImage, 0, message.TOTPSetupImage.length) : options.bytes === Array ? Array.prototype.slice.call(message.TOTPSetupImage) : message.TOTPSetupImage;
                return object;
            };

            /**
             * Converts this BeginEnableTOTPResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.BeginEnableTOTPResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BeginEnableTOTPResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BeginEnableTOTPResponse;
        })();

        globalaccounts.CompleteEnableTOTPResponse = (function() {

            /**
             * Properties of a CompleteEnableTOTPResponse.
             * @memberof pubg.globalaccounts
             * @interface ICompleteEnableTOTPResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] CompleteEnableTOTPResponse Code
             * @property {string|null} [Message] CompleteEnableTOTPResponse Message
             * @property {boolean|null} [Result] CompleteEnableTOTPResponse Result
             */

            /**
             * Constructs a new CompleteEnableTOTPResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CompleteEnableTOTPResponse.
             * @implements ICompleteEnableTOTPResponse
             * @constructor
             * @param {pubg.globalaccounts.ICompleteEnableTOTPResponse=} [properties] Properties to set
             */
            function CompleteEnableTOTPResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CompleteEnableTOTPResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @instance
             */
            CompleteEnableTOTPResponse.prototype.Code = 0;

            /**
             * CompleteEnableTOTPResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @instance
             */
            CompleteEnableTOTPResponse.prototype.Message = "";

            /**
             * CompleteEnableTOTPResponse Result.
             * @member {boolean} Result
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @instance
             */
            CompleteEnableTOTPResponse.prototype.Result = false;

            /**
             * Creates a new CompleteEnableTOTPResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.ICompleteEnableTOTPResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CompleteEnableTOTPResponse} CompleteEnableTOTPResponse instance
             */
            CompleteEnableTOTPResponse.create = function create(properties) {
                return new CompleteEnableTOTPResponse(properties);
            };

            /**
             * Encodes the specified CompleteEnableTOTPResponse message. Does not implicitly {@link pubg.globalaccounts.CompleteEnableTOTPResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.ICompleteEnableTOTPResponse} message CompleteEnableTOTPResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteEnableTOTPResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Result != null && message.hasOwnProperty("Result"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Result);
                return writer;
            };

            /**
             * Encodes the specified CompleteEnableTOTPResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.CompleteEnableTOTPResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.ICompleteEnableTOTPResponse} message CompleteEnableTOTPResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CompleteEnableTOTPResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CompleteEnableTOTPResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CompleteEnableTOTPResponse} CompleteEnableTOTPResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteEnableTOTPResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CompleteEnableTOTPResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        message.Result = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CompleteEnableTOTPResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CompleteEnableTOTPResponse} CompleteEnableTOTPResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CompleteEnableTOTPResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CompleteEnableTOTPResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CompleteEnableTOTPResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Result != null && message.hasOwnProperty("Result"))
                    if (typeof message.Result !== "boolean")
                        return "Result: boolean expected";
                return null;
            };

            /**
             * Creates a CompleteEnableTOTPResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CompleteEnableTOTPResponse} CompleteEnableTOTPResponse
             */
            CompleteEnableTOTPResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CompleteEnableTOTPResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.CompleteEnableTOTPResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Result != null)
                    message.Result = Boolean(object.Result);
                return message;
            };

            /**
             * Creates a plain object from a CompleteEnableTOTPResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @static
             * @param {pubg.globalaccounts.CompleteEnableTOTPResponse} message CompleteEnableTOTPResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CompleteEnableTOTPResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.Result = false;
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Result != null && message.hasOwnProperty("Result"))
                    object.Result = message.Result;
                return object;
            };

            /**
             * Converts this CompleteEnableTOTPResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CompleteEnableTOTPResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CompleteEnableTOTPResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CompleteEnableTOTPResponse;
        })();

        globalaccounts.MagicLinkGenerateResponse = (function() {

            /**
             * Properties of a MagicLinkGenerateResponse.
             * @memberof pubg.globalaccounts
             * @interface IMagicLinkGenerateResponse
             * @property {string|null} [LinkCode] MagicLinkGenerateResponse LinkCode
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] MagicLinkGenerateResponse Code
             * @property {string|null} [Message] MagicLinkGenerateResponse Message
             */

            /**
             * Constructs a new MagicLinkGenerateResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a MagicLinkGenerateResponse.
             * @implements IMagicLinkGenerateResponse
             * @constructor
             * @param {pubg.globalaccounts.IMagicLinkGenerateResponse=} [properties] Properties to set
             */
            function MagicLinkGenerateResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MagicLinkGenerateResponse LinkCode.
             * @member {string} LinkCode
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @instance
             */
            MagicLinkGenerateResponse.prototype.LinkCode = "";

            /**
             * MagicLinkGenerateResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @instance
             */
            MagicLinkGenerateResponse.prototype.Code = 0;

            /**
             * MagicLinkGenerateResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @instance
             */
            MagicLinkGenerateResponse.prototype.Message = "";

            /**
             * Creates a new MagicLinkGenerateResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkGenerateResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.MagicLinkGenerateResponse} MagicLinkGenerateResponse instance
             */
            MagicLinkGenerateResponse.create = function create(properties) {
                return new MagicLinkGenerateResponse(properties);
            };

            /**
             * Encodes the specified MagicLinkGenerateResponse message. Does not implicitly {@link pubg.globalaccounts.MagicLinkGenerateResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkGenerateResponse} message MagicLinkGenerateResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkGenerateResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.LinkCode != null && message.hasOwnProperty("LinkCode"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.LinkCode);
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Message);
                return writer;
            };

            /**
             * Encodes the specified MagicLinkGenerateResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.MagicLinkGenerateResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkGenerateResponse} message MagicLinkGenerateResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkGenerateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MagicLinkGenerateResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.MagicLinkGenerateResponse} MagicLinkGenerateResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkGenerateResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.MagicLinkGenerateResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.LinkCode = reader.string();
                        break;
                    case 3:
                        message.Code = reader.int32();
                        break;
                    case 4:
                        message.Message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MagicLinkGenerateResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.MagicLinkGenerateResponse} MagicLinkGenerateResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkGenerateResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MagicLinkGenerateResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MagicLinkGenerateResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.LinkCode != null && message.hasOwnProperty("LinkCode"))
                    if (!$util.isString(message.LinkCode))
                        return "LinkCode: string expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                return null;
            };

            /**
             * Creates a MagicLinkGenerateResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.MagicLinkGenerateResponse} MagicLinkGenerateResponse
             */
            MagicLinkGenerateResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.MagicLinkGenerateResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.MagicLinkGenerateResponse();
                if (object.LinkCode != null)
                    message.LinkCode = String(object.LinkCode);
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                return message;
            };

            /**
             * Creates a plain object from a MagicLinkGenerateResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @static
             * @param {pubg.globalaccounts.MagicLinkGenerateResponse} message MagicLinkGenerateResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MagicLinkGenerateResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.LinkCode = "";
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                }
                if (message.LinkCode != null && message.hasOwnProperty("LinkCode"))
                    object.LinkCode = message.LinkCode;
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                return object;
            };

            /**
             * Converts this MagicLinkGenerateResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.MagicLinkGenerateResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MagicLinkGenerateResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MagicLinkGenerateResponse;
        })();

        globalaccounts.MagicLinkValidateResponse = (function() {

            /**
             * Properties of a MagicLinkValidateResponse.
             * @memberof pubg.globalaccounts
             * @interface IMagicLinkValidateResponse
             * @property {string|null} [Provider] MagicLinkValidateResponse Provider
             * @property {string|null} [ProviderID] MagicLinkValidateResponse ProviderID
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] MagicLinkValidateResponse Code
             * @property {string|null} [Message] MagicLinkValidateResponse Message
             * @property {string|null} [DisplayName] MagicLinkValidateResponse DisplayName
             */

            /**
             * Constructs a new MagicLinkValidateResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a MagicLinkValidateResponse.
             * @implements IMagicLinkValidateResponse
             * @constructor
             * @param {pubg.globalaccounts.IMagicLinkValidateResponse=} [properties] Properties to set
             */
            function MagicLinkValidateResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MagicLinkValidateResponse Provider.
             * @member {string} Provider
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @instance
             */
            MagicLinkValidateResponse.prototype.Provider = "";

            /**
             * MagicLinkValidateResponse ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @instance
             */
            MagicLinkValidateResponse.prototype.ProviderID = "";

            /**
             * MagicLinkValidateResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @instance
             */
            MagicLinkValidateResponse.prototype.Code = 0;

            /**
             * MagicLinkValidateResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @instance
             */
            MagicLinkValidateResponse.prototype.Message = "";

            /**
             * MagicLinkValidateResponse DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @instance
             */
            MagicLinkValidateResponse.prototype.DisplayName = "";

            /**
             * Creates a new MagicLinkValidateResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkValidateResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.MagicLinkValidateResponse} MagicLinkValidateResponse instance
             */
            MagicLinkValidateResponse.create = function create(properties) {
                return new MagicLinkValidateResponse(properties);
            };

            /**
             * Encodes the specified MagicLinkValidateResponse message. Does not implicitly {@link pubg.globalaccounts.MagicLinkValidateResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkValidateResponse} message MagicLinkValidateResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkValidateResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.Provider);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Message);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.DisplayName);
                return writer;
            };

            /**
             * Encodes the specified MagicLinkValidateResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.MagicLinkValidateResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkValidateResponse} message MagicLinkValidateResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkValidateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MagicLinkValidateResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.MagicLinkValidateResponse} MagicLinkValidateResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkValidateResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.MagicLinkValidateResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Provider = reader.string();
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    case 3:
                        message.Code = reader.int32();
                        break;
                    case 4:
                        message.Message = reader.string();
                        break;
                    case 5:
                        message.DisplayName = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MagicLinkValidateResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.MagicLinkValidateResponse} MagicLinkValidateResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkValidateResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MagicLinkValidateResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MagicLinkValidateResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    if (!$util.isString(message.Provider))
                        return "Provider: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                return null;
            };

            /**
             * Creates a MagicLinkValidateResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.MagicLinkValidateResponse} MagicLinkValidateResponse
             */
            MagicLinkValidateResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.MagicLinkValidateResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.MagicLinkValidateResponse();
                if (object.Provider != null)
                    message.Provider = String(object.Provider);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                return message;
            };

            /**
             * Creates a plain object from a MagicLinkValidateResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @static
             * @param {pubg.globalaccounts.MagicLinkValidateResponse} message MagicLinkValidateResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MagicLinkValidateResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.Provider = "";
                    object.ProviderID = "";
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                    object.DisplayName = "";
                }
                if (message.Provider != null && message.hasOwnProperty("Provider"))
                    object.Provider = message.Provider;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                return object;
            };

            /**
             * Converts this MagicLinkValidateResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.MagicLinkValidateResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MagicLinkValidateResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MagicLinkValidateResponse;
        })();

        globalaccounts.MagicLinkCheckCompleteResponse = (function() {

            /**
             * Properties of a MagicLinkCheckCompleteResponse.
             * @memberof pubg.globalaccounts
             * @interface IMagicLinkCheckCompleteResponse
             * @property {string|null} [GUID] MagicLinkCheckCompleteResponse GUID
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] MagicLinkCheckCompleteResponse Code
             * @property {string|null} [Message] MagicLinkCheckCompleteResponse Message
             */

            /**
             * Constructs a new MagicLinkCheckCompleteResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a MagicLinkCheckCompleteResponse.
             * @implements IMagicLinkCheckCompleteResponse
             * @constructor
             * @param {pubg.globalaccounts.IMagicLinkCheckCompleteResponse=} [properties] Properties to set
             */
            function MagicLinkCheckCompleteResponse(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MagicLinkCheckCompleteResponse GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @instance
             */
            MagicLinkCheckCompleteResponse.prototype.GUID = "";

            /**
             * MagicLinkCheckCompleteResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @instance
             */
            MagicLinkCheckCompleteResponse.prototype.Code = 0;

            /**
             * MagicLinkCheckCompleteResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @instance
             */
            MagicLinkCheckCompleteResponse.prototype.Message = "";

            /**
             * Creates a new MagicLinkCheckCompleteResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkCheckCompleteResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.MagicLinkCheckCompleteResponse} MagicLinkCheckCompleteResponse instance
             */
            MagicLinkCheckCompleteResponse.create = function create(properties) {
                return new MagicLinkCheckCompleteResponse(properties);
            };

            /**
             * Encodes the specified MagicLinkCheckCompleteResponse message. Does not implicitly {@link pubg.globalaccounts.MagicLinkCheckCompleteResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkCheckCompleteResponse} message MagicLinkCheckCompleteResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkCheckCompleteResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Message);
                return writer;
            };

            /**
             * Encodes the specified MagicLinkCheckCompleteResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.MagicLinkCheckCompleteResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {pubg.globalaccounts.IMagicLinkCheckCompleteResponse} message MagicLinkCheckCompleteResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MagicLinkCheckCompleteResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MagicLinkCheckCompleteResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.MagicLinkCheckCompleteResponse} MagicLinkCheckCompleteResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkCheckCompleteResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.MagicLinkCheckCompleteResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 3:
                        message.Code = reader.int32();
                        break;
                    case 4:
                        message.Message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MagicLinkCheckCompleteResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.MagicLinkCheckCompleteResponse} MagicLinkCheckCompleteResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MagicLinkCheckCompleteResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MagicLinkCheckCompleteResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MagicLinkCheckCompleteResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                return null;
            };

            /**
             * Creates a MagicLinkCheckCompleteResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.MagicLinkCheckCompleteResponse} MagicLinkCheckCompleteResponse
             */
            MagicLinkCheckCompleteResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.MagicLinkCheckCompleteResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.MagicLinkCheckCompleteResponse();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                return message;
            };

            /**
             * Creates a plain object from a MagicLinkCheckCompleteResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @static
             * @param {pubg.globalaccounts.MagicLinkCheckCompleteResponse} message MagicLinkCheckCompleteResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MagicLinkCheckCompleteResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                return object;
            };

            /**
             * Converts this MagicLinkCheckCompleteResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.MagicLinkCheckCompleteResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MagicLinkCheckCompleteResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MagicLinkCheckCompleteResponse;
        })();

        globalaccounts.CodesResponse = (function() {

            /**
             * Properties of a CodesResponse.
             * @memberof pubg.globalaccounts
             * @interface ICodesResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] CodesResponse Code
             * @property {string|null} [Message] CodesResponse Message
             * @property {Array.<string>|null} [CreatorCodes] CodesResponse CreatorCodes
             * @property {Array.<string>|null} [CreatorNames] CodesResponse CreatorNames
             */

            /**
             * Constructs a new CodesResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CodesResponse.
             * @implements ICodesResponse
             * @constructor
             * @param {pubg.globalaccounts.ICodesResponse=} [properties] Properties to set
             */
            function CodesResponse(properties) {
                this.CreatorCodes = [];
                this.CreatorNames = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CodesResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.CodesResponse
             * @instance
             */
            CodesResponse.prototype.Code = 0;

            /**
             * CodesResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.CodesResponse
             * @instance
             */
            CodesResponse.prototype.Message = "";

            /**
             * CodesResponse CreatorCodes.
             * @member {Array.<string>} CreatorCodes
             * @memberof pubg.globalaccounts.CodesResponse
             * @instance
             */
            CodesResponse.prototype.CreatorCodes = $util.emptyArray;

            /**
             * CodesResponse CreatorNames.
             * @member {Array.<string>} CreatorNames
             * @memberof pubg.globalaccounts.CodesResponse
             * @instance
             */
            CodesResponse.prototype.CreatorNames = $util.emptyArray;

            /**
             * Creates a new CodesResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {pubg.globalaccounts.ICodesResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CodesResponse} CodesResponse instance
             */
            CodesResponse.create = function create(properties) {
                return new CodesResponse(properties);
            };

            /**
             * Encodes the specified CodesResponse message. Does not implicitly {@link pubg.globalaccounts.CodesResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {pubg.globalaccounts.ICodesResponse} message CodesResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CodesResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.CreatorCodes != null && message.CreatorCodes.length)
                    for (var i = 0; i < message.CreatorCodes.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.CreatorCodes[i]);
                if (message.CreatorNames != null && message.CreatorNames.length)
                    for (var i = 0; i < message.CreatorNames.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.CreatorNames[i]);
                return writer;
            };

            /**
             * Encodes the specified CodesResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.CodesResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {pubg.globalaccounts.ICodesResponse} message CodesResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CodesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CodesResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CodesResponse} CodesResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CodesResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CodesResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        if (!(message.CreatorCodes && message.CreatorCodes.length))
                            message.CreatorCodes = [];
                        message.CreatorCodes.push(reader.string());
                        break;
                    case 4:
                        if (!(message.CreatorNames && message.CreatorNames.length))
                            message.CreatorNames = [];
                        message.CreatorNames.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CodesResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CodesResponse} CodesResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CodesResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CodesResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CodesResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.CreatorCodes != null && message.hasOwnProperty("CreatorCodes")) {
                    if (!Array.isArray(message.CreatorCodes))
                        return "CreatorCodes: array expected";
                    for (var i = 0; i < message.CreatorCodes.length; ++i)
                        if (!$util.isString(message.CreatorCodes[i]))
                            return "CreatorCodes: string[] expected";
                }
                if (message.CreatorNames != null && message.hasOwnProperty("CreatorNames")) {
                    if (!Array.isArray(message.CreatorNames))
                        return "CreatorNames: array expected";
                    for (var i = 0; i < message.CreatorNames.length; ++i)
                        if (!$util.isString(message.CreatorNames[i]))
                            return "CreatorNames: string[] expected";
                }
                return null;
            };

            /**
             * Creates a CodesResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CodesResponse} CodesResponse
             */
            CodesResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CodesResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.CodesResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.CreatorCodes) {
                    if (!Array.isArray(object.CreatorCodes))
                        throw TypeError(".pubg.globalaccounts.CodesResponse.CreatorCodes: array expected");
                    message.CreatorCodes = [];
                    for (var i = 0; i < object.CreatorCodes.length; ++i)
                        message.CreatorCodes[i] = String(object.CreatorCodes[i]);
                }
                if (object.CreatorNames) {
                    if (!Array.isArray(object.CreatorNames))
                        throw TypeError(".pubg.globalaccounts.CodesResponse.CreatorNames: array expected");
                    message.CreatorNames = [];
                    for (var i = 0; i < object.CreatorNames.length; ++i)
                        message.CreatorNames[i] = String(object.CreatorNames[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a CodesResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CodesResponse
             * @static
             * @param {pubg.globalaccounts.CodesResponse} message CodesResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CodesResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.CreatorCodes = [];
                    object.CreatorNames = [];
                }
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.CreatorCodes && message.CreatorCodes.length) {
                    object.CreatorCodes = [];
                    for (var j = 0; j < message.CreatorCodes.length; ++j)
                        object.CreatorCodes[j] = message.CreatorCodes[j];
                }
                if (message.CreatorNames && message.CreatorNames.length) {
                    object.CreatorNames = [];
                    for (var j = 0; j < message.CreatorNames.length; ++j)
                        object.CreatorNames[j] = message.CreatorNames[j];
                }
                return object;
            };

            /**
             * Converts this CodesResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CodesResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CodesResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CodesResponse;
        })();

        globalaccounts.PromotionsResponse = (function() {

            /**
             * Properties of a PromotionsResponse.
             * @memberof pubg.globalaccounts
             * @interface IPromotionsResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] PromotionsResponse Code
             * @property {string|null} [Message] PromotionsResponse Message
             * @property {Array.<pubg.globalaccounts.IPromotionInfo>|null} [Promotions] PromotionsResponse Promotions
             */

            /**
             * Constructs a new PromotionsResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PromotionsResponse.
             * @implements IPromotionsResponse
             * @constructor
             * @param {pubg.globalaccounts.IPromotionsResponse=} [properties] Properties to set
             */
            function PromotionsResponse(properties) {
                this.Promotions = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PromotionsResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @instance
             */
            PromotionsResponse.prototype.Code = 0;

            /**
             * PromotionsResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @instance
             */
            PromotionsResponse.prototype.Message = "";

            /**
             * PromotionsResponse Promotions.
             * @member {Array.<pubg.globalaccounts.IPromotionInfo>} Promotions
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @instance
             */
            PromotionsResponse.prototype.Promotions = $util.emptyArray;

            /**
             * Creates a new PromotionsResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {pubg.globalaccounts.IPromotionsResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PromotionsResponse} PromotionsResponse instance
             */
            PromotionsResponse.create = function create(properties) {
                return new PromotionsResponse(properties);
            };

            /**
             * Encodes the specified PromotionsResponse message. Does not implicitly {@link pubg.globalaccounts.PromotionsResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {pubg.globalaccounts.IPromotionsResponse} message PromotionsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PromotionsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.Promotions != null && message.Promotions.length)
                    for (var i = 0; i < message.Promotions.length; ++i)
                        $root.pubg.globalaccounts.PromotionInfo.encode(message.Promotions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PromotionsResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.PromotionsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {pubg.globalaccounts.IPromotionsResponse} message PromotionsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PromotionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PromotionsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PromotionsResponse} PromotionsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PromotionsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PromotionsResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        if (!(message.Promotions && message.Promotions.length))
                            message.Promotions = [];
                        message.Promotions.push($root.pubg.globalaccounts.PromotionInfo.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PromotionsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PromotionsResponse} PromotionsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PromotionsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PromotionsResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PromotionsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.Promotions != null && message.hasOwnProperty("Promotions")) {
                    if (!Array.isArray(message.Promotions))
                        return "Promotions: array expected";
                    for (var i = 0; i < message.Promotions.length; ++i) {
                        var error = $root.pubg.globalaccounts.PromotionInfo.verify(message.Promotions[i]);
                        if (error)
                            return "Promotions." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PromotionsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PromotionsResponse} PromotionsResponse
             */
            PromotionsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PromotionsResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.PromotionsResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.Promotions) {
                    if (!Array.isArray(object.Promotions))
                        throw TypeError(".pubg.globalaccounts.PromotionsResponse.Promotions: array expected");
                    message.Promotions = [];
                    for (var i = 0; i < object.Promotions.length; ++i) {
                        if (typeof object.Promotions[i] !== "object")
                            throw TypeError(".pubg.globalaccounts.PromotionsResponse.Promotions: object expected");
                        message.Promotions[i] = $root.pubg.globalaccounts.PromotionInfo.fromObject(object.Promotions[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PromotionsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @static
             * @param {pubg.globalaccounts.PromotionsResponse} message PromotionsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PromotionsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.Promotions = [];
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.Promotions && message.Promotions.length) {
                    object.Promotions = [];
                    for (var j = 0; j < message.Promotions.length; ++j)
                        object.Promotions[j] = $root.pubg.globalaccounts.PromotionInfo.toObject(message.Promotions[j], options);
                }
                return object;
            };

            /**
             * Converts this PromotionsResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PromotionsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PromotionsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PromotionsResponse;
        })();

        globalaccounts.GlobalAccount = (function() {

            /**
             * Properties of a GlobalAccount.
             * @memberof pubg.globalaccounts
             * @interface IGlobalAccount
             * @property {string|null} [GUID] GlobalAccount GUID
             * @property {string|null} [Username] GlobalAccount Username
             * @property {string|null} [PersonaPlatform] GlobalAccount PersonaPlatform
             * @property {boolean|null} [Activated] GlobalAccount Activated
             * @property {boolean|null} [EmailOptIn] GlobalAccount EmailOptIn
             * @property {pubg.globalaccounts.IAuthenticationData|null} [Authentications] GlobalAccount Authentications
             * @property {Object.<string,pubg.globalaccounts.IPlatformAccount>|null} [Platforms] GlobalAccount Platforms
             * @property {pubg.globalaccounts.IProfile|null} [Profile] GlobalAccount Profile
             */

            /**
             * Constructs a new GlobalAccount.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GlobalAccount.
             * @implements IGlobalAccount
             * @constructor
             * @param {pubg.globalaccounts.IGlobalAccount=} [properties] Properties to set
             */
            function GlobalAccount(properties) {
                this.Platforms = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GlobalAccount GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.GUID = "";

            /**
             * GlobalAccount Username.
             * @member {string} Username
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.Username = "";

            /**
             * GlobalAccount PersonaPlatform.
             * @member {string} PersonaPlatform
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.PersonaPlatform = "";

            /**
             * GlobalAccount Activated.
             * @member {boolean} Activated
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.Activated = false;

            /**
             * GlobalAccount EmailOptIn.
             * @member {boolean} EmailOptIn
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.EmailOptIn = false;

            /**
             * GlobalAccount Authentications.
             * @member {pubg.globalaccounts.IAuthenticationData|null|undefined} Authentications
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.Authentications = null;

            /**
             * GlobalAccount Platforms.
             * @member {Object.<string,pubg.globalaccounts.IPlatformAccount>} Platforms
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.Platforms = $util.emptyObject;

            /**
             * GlobalAccount Profile.
             * @member {pubg.globalaccounts.IProfile|null|undefined} Profile
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             */
            GlobalAccount.prototype.Profile = null;

            /**
             * Creates a new GlobalAccount instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {pubg.globalaccounts.IGlobalAccount=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GlobalAccount} GlobalAccount instance
             */
            GlobalAccount.create = function create(properties) {
                return new GlobalAccount(properties);
            };

            /**
             * Encodes the specified GlobalAccount message. Does not implicitly {@link pubg.globalaccounts.GlobalAccount.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {pubg.globalaccounts.IGlobalAccount} message GlobalAccount message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GlobalAccount.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.Username != null && message.hasOwnProperty("Username"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Username);
                if (message.PersonaPlatform != null && message.hasOwnProperty("PersonaPlatform"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.PersonaPlatform);
                if (message.Activated != null && message.hasOwnProperty("Activated"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.Activated);
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.EmailOptIn);
                if (message.Authentications != null && message.hasOwnProperty("Authentications"))
                    $root.pubg.globalaccounts.AuthenticationData.encode(message.Authentications, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.Platforms != null && message.hasOwnProperty("Platforms"))
                    for (var keys = Object.keys(message.Platforms), i = 0; i < keys.length; ++i) {
                        writer.uint32(/* id 7, wireType 2 =*/58).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                        $root.pubg.globalaccounts.PlatformAccount.encode(message.Platforms[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                    }
                if (message.Profile != null && message.hasOwnProperty("Profile"))
                    $root.pubg.globalaccounts.Profile.encode(message.Profile, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GlobalAccount message, length delimited. Does not implicitly {@link pubg.globalaccounts.GlobalAccount.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {pubg.globalaccounts.IGlobalAccount} message GlobalAccount message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GlobalAccount.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GlobalAccount message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GlobalAccount} GlobalAccount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GlobalAccount.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GlobalAccount(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.Username = reader.string();
                        break;
                    case 3:
                        message.PersonaPlatform = reader.string();
                        break;
                    case 4:
                        message.Activated = reader.bool();
                        break;
                    case 5:
                        message.EmailOptIn = reader.bool();
                        break;
                    case 6:
                        message.Authentications = $root.pubg.globalaccounts.AuthenticationData.decode(reader, reader.uint32());
                        break;
                    case 7:
                        reader.skip().pos++;
                        if (message.Platforms === $util.emptyObject)
                            message.Platforms = {};
                        key = reader.string();
                        reader.pos++;
                        message.Platforms[key] = $root.pubg.globalaccounts.PlatformAccount.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.Profile = $root.pubg.globalaccounts.Profile.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GlobalAccount message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GlobalAccount} GlobalAccount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GlobalAccount.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GlobalAccount message.
             * @function verify
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GlobalAccount.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.Username != null && message.hasOwnProperty("Username"))
                    if (!$util.isString(message.Username))
                        return "Username: string expected";
                if (message.PersonaPlatform != null && message.hasOwnProperty("PersonaPlatform"))
                    if (!$util.isString(message.PersonaPlatform))
                        return "PersonaPlatform: string expected";
                if (message.Activated != null && message.hasOwnProperty("Activated"))
                    if (typeof message.Activated !== "boolean")
                        return "Activated: boolean expected";
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    if (typeof message.EmailOptIn !== "boolean")
                        return "EmailOptIn: boolean expected";
                if (message.Authentications != null && message.hasOwnProperty("Authentications")) {
                    var error = $root.pubg.globalaccounts.AuthenticationData.verify(message.Authentications);
                    if (error)
                        return "Authentications." + error;
                }
                if (message.Platforms != null && message.hasOwnProperty("Platforms")) {
                    if (!$util.isObject(message.Platforms))
                        return "Platforms: object expected";
                    var key = Object.keys(message.Platforms);
                    for (var i = 0; i < key.length; ++i) {
                        var error = $root.pubg.globalaccounts.PlatformAccount.verify(message.Platforms[key[i]]);
                        if (error)
                            return "Platforms." + error;
                    }
                }
                if (message.Profile != null && message.hasOwnProperty("Profile")) {
                    var error = $root.pubg.globalaccounts.Profile.verify(message.Profile);
                    if (error)
                        return "Profile." + error;
                }
                return null;
            };

            /**
             * Creates a GlobalAccount message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GlobalAccount} GlobalAccount
             */
            GlobalAccount.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GlobalAccount)
                    return object;
                var message = new $root.pubg.globalaccounts.GlobalAccount();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.Username != null)
                    message.Username = String(object.Username);
                if (object.PersonaPlatform != null)
                    message.PersonaPlatform = String(object.PersonaPlatform);
                if (object.Activated != null)
                    message.Activated = Boolean(object.Activated);
                if (object.EmailOptIn != null)
                    message.EmailOptIn = Boolean(object.EmailOptIn);
                if (object.Authentications != null) {
                    if (typeof object.Authentications !== "object")
                        throw TypeError(".pubg.globalaccounts.GlobalAccount.Authentications: object expected");
                    message.Authentications = $root.pubg.globalaccounts.AuthenticationData.fromObject(object.Authentications);
                }
                if (object.Platforms) {
                    if (typeof object.Platforms !== "object")
                        throw TypeError(".pubg.globalaccounts.GlobalAccount.Platforms: object expected");
                    message.Platforms = {};
                    for (var keys = Object.keys(object.Platforms), i = 0; i < keys.length; ++i) {
                        if (typeof object.Platforms[keys[i]] !== "object")
                            throw TypeError(".pubg.globalaccounts.GlobalAccount.Platforms: object expected");
                        message.Platforms[keys[i]] = $root.pubg.globalaccounts.PlatformAccount.fromObject(object.Platforms[keys[i]]);
                    }
                }
                if (object.Profile != null) {
                    if (typeof object.Profile !== "object")
                        throw TypeError(".pubg.globalaccounts.GlobalAccount.Profile: object expected");
                    message.Profile = $root.pubg.globalaccounts.Profile.fromObject(object.Profile);
                }
                return message;
            };

            /**
             * Creates a plain object from a GlobalAccount message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GlobalAccount
             * @static
             * @param {pubg.globalaccounts.GlobalAccount} message GlobalAccount
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GlobalAccount.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.Platforms = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.Username = "";
                    object.PersonaPlatform = "";
                    object.Activated = false;
                    object.EmailOptIn = false;
                    object.Authentications = null;
                    object.Profile = null;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.Username != null && message.hasOwnProperty("Username"))
                    object.Username = message.Username;
                if (message.PersonaPlatform != null && message.hasOwnProperty("PersonaPlatform"))
                    object.PersonaPlatform = message.PersonaPlatform;
                if (message.Activated != null && message.hasOwnProperty("Activated"))
                    object.Activated = message.Activated;
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    object.EmailOptIn = message.EmailOptIn;
                if (message.Authentications != null && message.hasOwnProperty("Authentications"))
                    object.Authentications = $root.pubg.globalaccounts.AuthenticationData.toObject(message.Authentications, options);
                var keys2;
                if (message.Platforms && (keys2 = Object.keys(message.Platforms)).length) {
                    object.Platforms = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.Platforms[keys2[j]] = $root.pubg.globalaccounts.PlatformAccount.toObject(message.Platforms[keys2[j]], options);
                }
                if (message.Profile != null && message.hasOwnProperty("Profile"))
                    object.Profile = $root.pubg.globalaccounts.Profile.toObject(message.Profile, options);
                return object;
            };

            /**
             * Converts this GlobalAccount to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GlobalAccount
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GlobalAccount.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GlobalAccount;
        })();

        globalaccounts.AuthenticationData = (function() {

            /**
             * Properties of an AuthenticationData.
             * @memberof pubg.globalaccounts
             * @interface IAuthenticationData
             * @property {pubg.globalaccounts.ILocalAuth|null} [local] AuthenticationData local
             * @property {pubg.globalaccounts.ITwitchAuth|null} [twitch] AuthenticationData twitch
             * @property {pubg.globalaccounts.IFacebookAuth|null} [facebook] AuthenticationData facebook
             * @property {pubg.globalaccounts.ILitePCAuth|null} [litepc] AuthenticationData litepc
             * @property {pubg.globalaccounts.IGoogleAuth|null} [google] AuthenticationData google
             * @property {pubg.globalaccounts.ILineAuth|null} [line] AuthenticationData line
             * @property {pubg.globalaccounts.ITwitterAuth|null} [twitter] AuthenticationData twitter
             * @property {pubg.globalaccounts.IPlaystationAuth|null} [psn] AuthenticationData psn
             * @property {pubg.globalaccounts.ISteamAuth|null} [steam] AuthenticationData steam
             * @property {pubg.globalaccounts.IXboxAuth|null} [xbox] AuthenticationData xbox
             * @property {pubg.globalaccounts.IVkAuth|null} [vk] AuthenticationData vk
             * @property {pubg.globalaccounts.IYoutubeAuth|null} [youtube] AuthenticationData youtube
             * @property {pubg.globalaccounts.IStadiaAuth|null} [stadia] AuthenticationData stadia
             * @property {pubg.globalaccounts.IDiscordAuth|null} [discord] AuthenticationData discord
             * @property {pubg.globalaccounts.IRedditAuth|null} [reddit] AuthenticationData reddit
             * @property {pubg.globalaccounts.IAfreecaTVAuth|null} [afreecatv] AuthenticationData afreecatv
             */

            /**
             * Constructs a new AuthenticationData.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an AuthenticationData.
             * @implements IAuthenticationData
             * @constructor
             * @param {pubg.globalaccounts.IAuthenticationData=} [properties] Properties to set
             */
            function AuthenticationData(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AuthenticationData local.
             * @member {pubg.globalaccounts.ILocalAuth|null|undefined} local
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.local = null;

            /**
             * AuthenticationData twitch.
             * @member {pubg.globalaccounts.ITwitchAuth|null|undefined} twitch
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.twitch = null;

            /**
             * AuthenticationData facebook.
             * @member {pubg.globalaccounts.IFacebookAuth|null|undefined} facebook
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.facebook = null;

            /**
             * AuthenticationData litepc.
             * @member {pubg.globalaccounts.ILitePCAuth|null|undefined} litepc
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.litepc = null;

            /**
             * AuthenticationData google.
             * @member {pubg.globalaccounts.IGoogleAuth|null|undefined} google
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.google = null;

            /**
             * AuthenticationData line.
             * @member {pubg.globalaccounts.ILineAuth|null|undefined} line
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.line = null;

            /**
             * AuthenticationData twitter.
             * @member {pubg.globalaccounts.ITwitterAuth|null|undefined} twitter
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.twitter = null;

            /**
             * AuthenticationData psn.
             * @member {pubg.globalaccounts.IPlaystationAuth|null|undefined} psn
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.psn = null;

            /**
             * AuthenticationData steam.
             * @member {pubg.globalaccounts.ISteamAuth|null|undefined} steam
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.steam = null;

            /**
             * AuthenticationData xbox.
             * @member {pubg.globalaccounts.IXboxAuth|null|undefined} xbox
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.xbox = null;

            /**
             * AuthenticationData vk.
             * @member {pubg.globalaccounts.IVkAuth|null|undefined} vk
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.vk = null;

            /**
             * AuthenticationData youtube.
             * @member {pubg.globalaccounts.IYoutubeAuth|null|undefined} youtube
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.youtube = null;

            /**
             * AuthenticationData stadia.
             * @member {pubg.globalaccounts.IStadiaAuth|null|undefined} stadia
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.stadia = null;

            /**
             * AuthenticationData discord.
             * @member {pubg.globalaccounts.IDiscordAuth|null|undefined} discord
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.discord = null;

            /**
             * AuthenticationData reddit.
             * @member {pubg.globalaccounts.IRedditAuth|null|undefined} reddit
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.reddit = null;

            /**
             * AuthenticationData afreecatv.
             * @member {pubg.globalaccounts.IAfreecaTVAuth|null|undefined} afreecatv
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             */
            AuthenticationData.prototype.afreecatv = null;

            /**
             * Creates a new AuthenticationData instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {pubg.globalaccounts.IAuthenticationData=} [properties] Properties to set
             * @returns {pubg.globalaccounts.AuthenticationData} AuthenticationData instance
             */
            AuthenticationData.create = function create(properties) {
                return new AuthenticationData(properties);
            };

            /**
             * Encodes the specified AuthenticationData message. Does not implicitly {@link pubg.globalaccounts.AuthenticationData.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {pubg.globalaccounts.IAuthenticationData} message AuthenticationData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthenticationData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.local != null && message.hasOwnProperty("local"))
                    $root.pubg.globalaccounts.LocalAuth.encode(message.local, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.twitch != null && message.hasOwnProperty("twitch"))
                    $root.pubg.globalaccounts.TwitchAuth.encode(message.twitch, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.facebook != null && message.hasOwnProperty("facebook"))
                    $root.pubg.globalaccounts.FacebookAuth.encode(message.facebook, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.litepc != null && message.hasOwnProperty("litepc"))
                    $root.pubg.globalaccounts.LitePCAuth.encode(message.litepc, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.google != null && message.hasOwnProperty("google"))
                    $root.pubg.globalaccounts.GoogleAuth.encode(message.google, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.line != null && message.hasOwnProperty("line"))
                    $root.pubg.globalaccounts.LineAuth.encode(message.line, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.twitter != null && message.hasOwnProperty("twitter"))
                    $root.pubg.globalaccounts.TwitterAuth.encode(message.twitter, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.psn != null && message.hasOwnProperty("psn"))
                    $root.pubg.globalaccounts.PlaystationAuth.encode(message.psn, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.steam != null && message.hasOwnProperty("steam"))
                    $root.pubg.globalaccounts.SteamAuth.encode(message.steam, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.xbox != null && message.hasOwnProperty("xbox"))
                    $root.pubg.globalaccounts.XboxAuth.encode(message.xbox, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.vk != null && message.hasOwnProperty("vk"))
                    $root.pubg.globalaccounts.VkAuth.encode(message.vk, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.youtube != null && message.hasOwnProperty("youtube"))
                    $root.pubg.globalaccounts.YoutubeAuth.encode(message.youtube, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.stadia != null && message.hasOwnProperty("stadia"))
                    $root.pubg.globalaccounts.StadiaAuth.encode(message.stadia, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.discord != null && message.hasOwnProperty("discord"))
                    $root.pubg.globalaccounts.DiscordAuth.encode(message.discord, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.reddit != null && message.hasOwnProperty("reddit"))
                    $root.pubg.globalaccounts.RedditAuth.encode(message.reddit, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message.afreecatv != null && message.hasOwnProperty("afreecatv"))
                    $root.pubg.globalaccounts.AfreecaTVAuth.encode(message.afreecatv, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AuthenticationData message, length delimited. Does not implicitly {@link pubg.globalaccounts.AuthenticationData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {pubg.globalaccounts.IAuthenticationData} message AuthenticationData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AuthenticationData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AuthenticationData message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.AuthenticationData} AuthenticationData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthenticationData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.AuthenticationData();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.local = $root.pubg.globalaccounts.LocalAuth.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.twitch = $root.pubg.globalaccounts.TwitchAuth.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.facebook = $root.pubg.globalaccounts.FacebookAuth.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.litepc = $root.pubg.globalaccounts.LitePCAuth.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.google = $root.pubg.globalaccounts.GoogleAuth.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.line = $root.pubg.globalaccounts.LineAuth.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.twitter = $root.pubg.globalaccounts.TwitterAuth.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.psn = $root.pubg.globalaccounts.PlaystationAuth.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.steam = $root.pubg.globalaccounts.SteamAuth.decode(reader, reader.uint32());
                        break;
                    case 10:
                        message.xbox = $root.pubg.globalaccounts.XboxAuth.decode(reader, reader.uint32());
                        break;
                    case 11:
                        message.vk = $root.pubg.globalaccounts.VkAuth.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.youtube = $root.pubg.globalaccounts.YoutubeAuth.decode(reader, reader.uint32());
                        break;
                    case 13:
                        message.stadia = $root.pubg.globalaccounts.StadiaAuth.decode(reader, reader.uint32());
                        break;
                    case 14:
                        message.discord = $root.pubg.globalaccounts.DiscordAuth.decode(reader, reader.uint32());
                        break;
                    case 15:
                        message.reddit = $root.pubg.globalaccounts.RedditAuth.decode(reader, reader.uint32());
                        break;
                    case 16:
                        message.afreecatv = $root.pubg.globalaccounts.AfreecaTVAuth.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AuthenticationData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.AuthenticationData} AuthenticationData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AuthenticationData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AuthenticationData message.
             * @function verify
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AuthenticationData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.local != null && message.hasOwnProperty("local")) {
                    var error = $root.pubg.globalaccounts.LocalAuth.verify(message.local);
                    if (error)
                        return "local." + error;
                }
                if (message.twitch != null && message.hasOwnProperty("twitch")) {
                    var error = $root.pubg.globalaccounts.TwitchAuth.verify(message.twitch);
                    if (error)
                        return "twitch." + error;
                }
                if (message.facebook != null && message.hasOwnProperty("facebook")) {
                    var error = $root.pubg.globalaccounts.FacebookAuth.verify(message.facebook);
                    if (error)
                        return "facebook." + error;
                }
                if (message.litepc != null && message.hasOwnProperty("litepc")) {
                    var error = $root.pubg.globalaccounts.LitePCAuth.verify(message.litepc);
                    if (error)
                        return "litepc." + error;
                }
                if (message.google != null && message.hasOwnProperty("google")) {
                    var error = $root.pubg.globalaccounts.GoogleAuth.verify(message.google);
                    if (error)
                        return "google." + error;
                }
                if (message.line != null && message.hasOwnProperty("line")) {
                    var error = $root.pubg.globalaccounts.LineAuth.verify(message.line);
                    if (error)
                        return "line." + error;
                }
                if (message.twitter != null && message.hasOwnProperty("twitter")) {
                    var error = $root.pubg.globalaccounts.TwitterAuth.verify(message.twitter);
                    if (error)
                        return "twitter." + error;
                }
                if (message.psn != null && message.hasOwnProperty("psn")) {
                    var error = $root.pubg.globalaccounts.PlaystationAuth.verify(message.psn);
                    if (error)
                        return "psn." + error;
                }
                if (message.steam != null && message.hasOwnProperty("steam")) {
                    var error = $root.pubg.globalaccounts.SteamAuth.verify(message.steam);
                    if (error)
                        return "steam." + error;
                }
                if (message.xbox != null && message.hasOwnProperty("xbox")) {
                    var error = $root.pubg.globalaccounts.XboxAuth.verify(message.xbox);
                    if (error)
                        return "xbox." + error;
                }
                if (message.vk != null && message.hasOwnProperty("vk")) {
                    var error = $root.pubg.globalaccounts.VkAuth.verify(message.vk);
                    if (error)
                        return "vk." + error;
                }
                if (message.youtube != null && message.hasOwnProperty("youtube")) {
                    var error = $root.pubg.globalaccounts.YoutubeAuth.verify(message.youtube);
                    if (error)
                        return "youtube." + error;
                }
                if (message.stadia != null && message.hasOwnProperty("stadia")) {
                    var error = $root.pubg.globalaccounts.StadiaAuth.verify(message.stadia);
                    if (error)
                        return "stadia." + error;
                }
                if (message.discord != null && message.hasOwnProperty("discord")) {
                    var error = $root.pubg.globalaccounts.DiscordAuth.verify(message.discord);
                    if (error)
                        return "discord." + error;
                }
                if (message.reddit != null && message.hasOwnProperty("reddit")) {
                    var error = $root.pubg.globalaccounts.RedditAuth.verify(message.reddit);
                    if (error)
                        return "reddit." + error;
                }
                if (message.afreecatv != null && message.hasOwnProperty("afreecatv")) {
                    var error = $root.pubg.globalaccounts.AfreecaTVAuth.verify(message.afreecatv);
                    if (error)
                        return "afreecatv." + error;
                }
                return null;
            };

            /**
             * Creates an AuthenticationData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.AuthenticationData} AuthenticationData
             */
            AuthenticationData.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.AuthenticationData)
                    return object;
                var message = new $root.pubg.globalaccounts.AuthenticationData();
                if (object.local != null) {
                    if (typeof object.local !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.local: object expected");
                    message.local = $root.pubg.globalaccounts.LocalAuth.fromObject(object.local);
                }
                if (object.twitch != null) {
                    if (typeof object.twitch !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.twitch: object expected");
                    message.twitch = $root.pubg.globalaccounts.TwitchAuth.fromObject(object.twitch);
                }
                if (object.facebook != null) {
                    if (typeof object.facebook !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.facebook: object expected");
                    message.facebook = $root.pubg.globalaccounts.FacebookAuth.fromObject(object.facebook);
                }
                if (object.litepc != null) {
                    if (typeof object.litepc !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.litepc: object expected");
                    message.litepc = $root.pubg.globalaccounts.LitePCAuth.fromObject(object.litepc);
                }
                if (object.google != null) {
                    if (typeof object.google !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.google: object expected");
                    message.google = $root.pubg.globalaccounts.GoogleAuth.fromObject(object.google);
                }
                if (object.line != null) {
                    if (typeof object.line !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.line: object expected");
                    message.line = $root.pubg.globalaccounts.LineAuth.fromObject(object.line);
                }
                if (object.twitter != null) {
                    if (typeof object.twitter !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.twitter: object expected");
                    message.twitter = $root.pubg.globalaccounts.TwitterAuth.fromObject(object.twitter);
                }
                if (object.psn != null) {
                    if (typeof object.psn !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.psn: object expected");
                    message.psn = $root.pubg.globalaccounts.PlaystationAuth.fromObject(object.psn);
                }
                if (object.steam != null) {
                    if (typeof object.steam !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.steam: object expected");
                    message.steam = $root.pubg.globalaccounts.SteamAuth.fromObject(object.steam);
                }
                if (object.xbox != null) {
                    if (typeof object.xbox !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.xbox: object expected");
                    message.xbox = $root.pubg.globalaccounts.XboxAuth.fromObject(object.xbox);
                }
                if (object.vk != null) {
                    if (typeof object.vk !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.vk: object expected");
                    message.vk = $root.pubg.globalaccounts.VkAuth.fromObject(object.vk);
                }
                if (object.youtube != null) {
                    if (typeof object.youtube !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.youtube: object expected");
                    message.youtube = $root.pubg.globalaccounts.YoutubeAuth.fromObject(object.youtube);
                }
                if (object.stadia != null) {
                    if (typeof object.stadia !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.stadia: object expected");
                    message.stadia = $root.pubg.globalaccounts.StadiaAuth.fromObject(object.stadia);
                }
                if (object.discord != null) {
                    if (typeof object.discord !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.discord: object expected");
                    message.discord = $root.pubg.globalaccounts.DiscordAuth.fromObject(object.discord);
                }
                if (object.reddit != null) {
                    if (typeof object.reddit !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.reddit: object expected");
                    message.reddit = $root.pubg.globalaccounts.RedditAuth.fromObject(object.reddit);
                }
                if (object.afreecatv != null) {
                    if (typeof object.afreecatv !== "object")
                        throw TypeError(".pubg.globalaccounts.AuthenticationData.afreecatv: object expected");
                    message.afreecatv = $root.pubg.globalaccounts.AfreecaTVAuth.fromObject(object.afreecatv);
                }
                return message;
            };

            /**
             * Creates a plain object from an AuthenticationData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.AuthenticationData
             * @static
             * @param {pubg.globalaccounts.AuthenticationData} message AuthenticationData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AuthenticationData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.local = null;
                    object.twitch = null;
                    object.facebook = null;
                    object.litepc = null;
                    object.google = null;
                    object.line = null;
                    object.twitter = null;
                    object.psn = null;
                    object.steam = null;
                    object.xbox = null;
                    object.vk = null;
                    object.youtube = null;
                    object.stadia = null;
                    object.discord = null;
                    object.reddit = null;
                    object.afreecatv = null;
                }
                if (message.local != null && message.hasOwnProperty("local"))
                    object.local = $root.pubg.globalaccounts.LocalAuth.toObject(message.local, options);
                if (message.twitch != null && message.hasOwnProperty("twitch"))
                    object.twitch = $root.pubg.globalaccounts.TwitchAuth.toObject(message.twitch, options);
                if (message.facebook != null && message.hasOwnProperty("facebook"))
                    object.facebook = $root.pubg.globalaccounts.FacebookAuth.toObject(message.facebook, options);
                if (message.litepc != null && message.hasOwnProperty("litepc"))
                    object.litepc = $root.pubg.globalaccounts.LitePCAuth.toObject(message.litepc, options);
                if (message.google != null && message.hasOwnProperty("google"))
                    object.google = $root.pubg.globalaccounts.GoogleAuth.toObject(message.google, options);
                if (message.line != null && message.hasOwnProperty("line"))
                    object.line = $root.pubg.globalaccounts.LineAuth.toObject(message.line, options);
                if (message.twitter != null && message.hasOwnProperty("twitter"))
                    object.twitter = $root.pubg.globalaccounts.TwitterAuth.toObject(message.twitter, options);
                if (message.psn != null && message.hasOwnProperty("psn"))
                    object.psn = $root.pubg.globalaccounts.PlaystationAuth.toObject(message.psn, options);
                if (message.steam != null && message.hasOwnProperty("steam"))
                    object.steam = $root.pubg.globalaccounts.SteamAuth.toObject(message.steam, options);
                if (message.xbox != null && message.hasOwnProperty("xbox"))
                    object.xbox = $root.pubg.globalaccounts.XboxAuth.toObject(message.xbox, options);
                if (message.vk != null && message.hasOwnProperty("vk"))
                    object.vk = $root.pubg.globalaccounts.VkAuth.toObject(message.vk, options);
                if (message.youtube != null && message.hasOwnProperty("youtube"))
                    object.youtube = $root.pubg.globalaccounts.YoutubeAuth.toObject(message.youtube, options);
                if (message.stadia != null && message.hasOwnProperty("stadia"))
                    object.stadia = $root.pubg.globalaccounts.StadiaAuth.toObject(message.stadia, options);
                if (message.discord != null && message.hasOwnProperty("discord"))
                    object.discord = $root.pubg.globalaccounts.DiscordAuth.toObject(message.discord, options);
                if (message.reddit != null && message.hasOwnProperty("reddit"))
                    object.reddit = $root.pubg.globalaccounts.RedditAuth.toObject(message.reddit, options);
                if (message.afreecatv != null && message.hasOwnProperty("afreecatv"))
                    object.afreecatv = $root.pubg.globalaccounts.AfreecaTVAuth.toObject(message.afreecatv, options);
                return object;
            };

            /**
             * Converts this AuthenticationData to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.AuthenticationData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AuthenticationData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AuthenticationData;
        })();

        globalaccounts.LocalAuth = (function() {

            /**
             * Properties of a LocalAuth.
             * @memberof pubg.globalaccounts
             * @interface ILocalAuth
             * @property {string|null} [GUID] LocalAuth GUID
             * @property {string|null} [DisplayName] LocalAuth DisplayName
             * @property {boolean|null} [Deactivated] LocalAuth Deactivated
             * @property {boolean|null} [Confirmed] LocalAuth Confirmed
             * @property {string|null} [Email] LocalAuth Email
             * @property {boolean|null} [Locked] LocalAuth Locked
             * @property {boolean|null} [OnHold] LocalAuth OnHold
             * @property {number|Long|null} [CreatedAt] LocalAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] LocalAuth UpdatedAt
             * @property {string|null} [ProviderID] LocalAuth ProviderID
             */

            /**
             * Constructs a new LocalAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a LocalAuth.
             * @implements ILocalAuth
             * @constructor
             * @param {pubg.globalaccounts.ILocalAuth=} [properties] Properties to set
             */
            function LocalAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LocalAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.GUID = "";

            /**
             * LocalAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.DisplayName = "";

            /**
             * LocalAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.Deactivated = false;

            /**
             * LocalAuth Confirmed.
             * @member {boolean} Confirmed
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.Confirmed = false;

            /**
             * LocalAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.Email = "";

            /**
             * LocalAuth Locked.
             * @member {boolean} Locked
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.Locked = false;

            /**
             * LocalAuth OnHold.
             * @member {boolean} OnHold
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.OnHold = false;

            /**
             * LocalAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LocalAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LocalAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             */
            LocalAuth.prototype.ProviderID = "";

            /**
             * Creates a new LocalAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {pubg.globalaccounts.ILocalAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.LocalAuth} LocalAuth instance
             */
            LocalAuth.create = function create(properties) {
                return new LocalAuth(properties);
            };

            /**
             * Encodes the specified LocalAuth message. Does not implicitly {@link pubg.globalaccounts.LocalAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {pubg.globalaccounts.ILocalAuth} message LocalAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LocalAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.Confirmed != null && message.hasOwnProperty("Confirmed"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.Confirmed);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Email);
                if (message.Locked != null && message.hasOwnProperty("Locked"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.Locked);
                if (message.OnHold != null && message.hasOwnProperty("OnHold"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.OnHold);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 15, wireType 0 =*/120).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 16, wireType 2 =*/130).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified LocalAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.LocalAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {pubg.globalaccounts.ILocalAuth} message LocalAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LocalAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LocalAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.LocalAuth} LocalAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LocalAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.LocalAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.Confirmed = reader.bool();
                        break;
                    case 7:
                        message.Email = reader.string();
                        break;
                    case 10:
                        message.Locked = reader.bool();
                        break;
                    case 11:
                        message.OnHold = reader.bool();
                        break;
                    case 14:
                        message.CreatedAt = reader.int64();
                        break;
                    case 15:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 16:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LocalAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.LocalAuth} LocalAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LocalAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LocalAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LocalAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Confirmed != null && message.hasOwnProperty("Confirmed"))
                    if (typeof message.Confirmed !== "boolean")
                        return "Confirmed: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.Locked != null && message.hasOwnProperty("Locked"))
                    if (typeof message.Locked !== "boolean")
                        return "Locked: boolean expected";
                if (message.OnHold != null && message.hasOwnProperty("OnHold"))
                    if (typeof message.OnHold !== "boolean")
                        return "OnHold: boolean expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a LocalAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.LocalAuth} LocalAuth
             */
            LocalAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.LocalAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.LocalAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Confirmed != null)
                    message.Confirmed = Boolean(object.Confirmed);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.Locked != null)
                    message.Locked = Boolean(object.Locked);
                if (object.OnHold != null)
                    message.OnHold = Boolean(object.OnHold);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a LocalAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.LocalAuth
             * @static
             * @param {pubg.globalaccounts.LocalAuth} message LocalAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LocalAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Confirmed = false;
                    object.Email = "";
                    object.Locked = false;
                    object.OnHold = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Confirmed != null && message.hasOwnProperty("Confirmed"))
                    object.Confirmed = message.Confirmed;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.Locked != null && message.hasOwnProperty("Locked"))
                    object.Locked = message.Locked;
                if (message.OnHold != null && message.hasOwnProperty("OnHold"))
                    object.OnHold = message.OnHold;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this LocalAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.LocalAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LocalAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LocalAuth;
        })();

        globalaccounts.TwitchAuth = (function() {

            /**
             * Properties of a TwitchAuth.
             * @memberof pubg.globalaccounts
             * @interface ITwitchAuth
             * @property {string|null} [GUID] TwitchAuth GUID
             * @property {string|null} [DisplayName] TwitchAuth DisplayName
             * @property {boolean|null} [Deactivated] TwitchAuth Deactivated
             * @property {boolean|null} [BadCredentials] TwitchAuth BadCredentials
             * @property {string|null} [Email] TwitchAuth Email
             * @property {string|null} [TwitchID] TwitchAuth TwitchID
             * @property {string|null} [Username] TwitchAuth Username
             * @property {string|null} [AccessToken] TwitchAuth AccessToken
             * @property {number|Long|null} [CreatedAt] TwitchAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] TwitchAuth UpdatedAt
             * @property {string|null} [ProviderID] TwitchAuth ProviderID
             */

            /**
             * Constructs a new TwitchAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a TwitchAuth.
             * @implements ITwitchAuth
             * @constructor
             * @param {pubg.globalaccounts.ITwitchAuth=} [properties] Properties to set
             */
            function TwitchAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TwitchAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.GUID = "";

            /**
             * TwitchAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.DisplayName = "";

            /**
             * TwitchAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.Deactivated = false;

            /**
             * TwitchAuth BadCredentials.
             * @member {boolean} BadCredentials
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.BadCredentials = false;

            /**
             * TwitchAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.Email = "";

            /**
             * TwitchAuth TwitchID.
             * @member {string} TwitchID
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.TwitchID = "";

            /**
             * TwitchAuth Username.
             * @member {string} Username
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.Username = "";

            /**
             * TwitchAuth AccessToken.
             * @member {string} AccessToken
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.AccessToken = "";

            /**
             * TwitchAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TwitchAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TwitchAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             */
            TwitchAuth.prototype.ProviderID = "";

            /**
             * Creates a new TwitchAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {pubg.globalaccounts.ITwitchAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.TwitchAuth} TwitchAuth instance
             */
            TwitchAuth.create = function create(properties) {
                return new TwitchAuth(properties);
            };

            /**
             * Encodes the specified TwitchAuth message. Does not implicitly {@link pubg.globalaccounts.TwitchAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {pubg.globalaccounts.ITwitchAuth} message TwitchAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitchAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.BadCredentials != null && message.hasOwnProperty("BadCredentials"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.BadCredentials);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Email);
                if (message.TwitchID != null && message.hasOwnProperty("TwitchID"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.TwitchID);
                if (message.Username != null && message.hasOwnProperty("Username"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Username);
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.AccessToken);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 10, wireType 0 =*/80).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified TwitchAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.TwitchAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {pubg.globalaccounts.ITwitchAuth} message TwitchAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitchAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TwitchAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.TwitchAuth} TwitchAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitchAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.TwitchAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.BadCredentials = reader.bool();
                        break;
                    case 5:
                        message.Email = reader.string();
                        break;
                    case 6:
                        message.TwitchID = reader.string();
                        break;
                    case 7:
                        message.Username = reader.string();
                        break;
                    case 8:
                        message.AccessToken = reader.string();
                        break;
                    case 9:
                        message.CreatedAt = reader.int64();
                        break;
                    case 10:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 11:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TwitchAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.TwitchAuth} TwitchAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitchAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TwitchAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TwitchAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.BadCredentials != null && message.hasOwnProperty("BadCredentials"))
                    if (typeof message.BadCredentials !== "boolean")
                        return "BadCredentials: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.TwitchID != null && message.hasOwnProperty("TwitchID"))
                    if (!$util.isString(message.TwitchID))
                        return "TwitchID: string expected";
                if (message.Username != null && message.hasOwnProperty("Username"))
                    if (!$util.isString(message.Username))
                        return "Username: string expected";
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    if (!$util.isString(message.AccessToken))
                        return "AccessToken: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a TwitchAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.TwitchAuth} TwitchAuth
             */
            TwitchAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.TwitchAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.TwitchAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.BadCredentials != null)
                    message.BadCredentials = Boolean(object.BadCredentials);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.TwitchID != null)
                    message.TwitchID = String(object.TwitchID);
                if (object.Username != null)
                    message.Username = String(object.Username);
                if (object.AccessToken != null)
                    message.AccessToken = String(object.AccessToken);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a TwitchAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.TwitchAuth
             * @static
             * @param {pubg.globalaccounts.TwitchAuth} message TwitchAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TwitchAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.BadCredentials = false;
                    object.Email = "";
                    object.TwitchID = "";
                    object.Username = "";
                    object.AccessToken = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.BadCredentials != null && message.hasOwnProperty("BadCredentials"))
                    object.BadCredentials = message.BadCredentials;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.TwitchID != null && message.hasOwnProperty("TwitchID"))
                    object.TwitchID = message.TwitchID;
                if (message.Username != null && message.hasOwnProperty("Username"))
                    object.Username = message.Username;
                if (message.AccessToken != null && message.hasOwnProperty("AccessToken"))
                    object.AccessToken = message.AccessToken;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this TwitchAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.TwitchAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TwitchAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TwitchAuth;
        })();

        globalaccounts.FacebookAuth = (function() {

            /**
             * Properties of a FacebookAuth.
             * @memberof pubg.globalaccounts
             * @interface IFacebookAuth
             * @property {string|null} [GUID] FacebookAuth GUID
             * @property {string|null} [DisplayName] FacebookAuth DisplayName
             * @property {boolean|null} [Deactivated] FacebookAuth Deactivated
             * @property {string|null} [Email] FacebookAuth Email
             * @property {string|null} [FacebookID] FacebookAuth FacebookID
             * @property {number|Long|null} [CreatedAt] FacebookAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] FacebookAuth UpdatedAt
             * @property {string|null} [ProviderID] FacebookAuth ProviderID
             */

            /**
             * Constructs a new FacebookAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a FacebookAuth.
             * @implements IFacebookAuth
             * @constructor
             * @param {pubg.globalaccounts.IFacebookAuth=} [properties] Properties to set
             */
            function FacebookAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FacebookAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.GUID = "";

            /**
             * FacebookAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.DisplayName = "";

            /**
             * FacebookAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.Deactivated = false;

            /**
             * FacebookAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.Email = "";

            /**
             * FacebookAuth FacebookID.
             * @member {string} FacebookID
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.FacebookID = "";

            /**
             * FacebookAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FacebookAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * FacebookAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             */
            FacebookAuth.prototype.ProviderID = "";

            /**
             * Creates a new FacebookAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {pubg.globalaccounts.IFacebookAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.FacebookAuth} FacebookAuth instance
             */
            FacebookAuth.create = function create(properties) {
                return new FacebookAuth(properties);
            };

            /**
             * Encodes the specified FacebookAuth message. Does not implicitly {@link pubg.globalaccounts.FacebookAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {pubg.globalaccounts.IFacebookAuth} message FacebookAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FacebookAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                if (message.FacebookID != null && message.hasOwnProperty("FacebookID"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.FacebookID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified FacebookAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.FacebookAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {pubg.globalaccounts.IFacebookAuth} message FacebookAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FacebookAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FacebookAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.FacebookAuth} FacebookAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FacebookAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.FacebookAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    case 5:
                        message.FacebookID = reader.string();
                        break;
                    case 6:
                        message.CreatedAt = reader.int64();
                        break;
                    case 7:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 8:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FacebookAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.FacebookAuth} FacebookAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FacebookAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FacebookAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FacebookAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.FacebookID != null && message.hasOwnProperty("FacebookID"))
                    if (!$util.isString(message.FacebookID))
                        return "FacebookID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a FacebookAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.FacebookAuth} FacebookAuth
             */
            FacebookAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.FacebookAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.FacebookAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.FacebookID != null)
                    message.FacebookID = String(object.FacebookID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a FacebookAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.FacebookAuth
             * @static
             * @param {pubg.globalaccounts.FacebookAuth} message FacebookAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FacebookAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Email = "";
                    object.FacebookID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.FacebookID != null && message.hasOwnProperty("FacebookID"))
                    object.FacebookID = message.FacebookID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this FacebookAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.FacebookAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FacebookAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FacebookAuth;
        })();

        globalaccounts.LitePCAuth = (function() {

            /**
             * Properties of a LitePCAuth.
             * @memberof pubg.globalaccounts
             * @interface ILitePCAuth
             * @property {string|null} [GUID] LitePCAuth GUID
             * @property {string|null} [ProviderID] LitePCAuth ProviderID
             * @property {boolean|null} [Deactivated] LitePCAuth Deactivated
             * @property {number|Long|null} [CreatedAt] LitePCAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] LitePCAuth UpdatedAt
             */

            /**
             * Constructs a new LitePCAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a LitePCAuth.
             * @implements ILitePCAuth
             * @constructor
             * @param {pubg.globalaccounts.ILitePCAuth=} [properties] Properties to set
             */
            function LitePCAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LitePCAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.LitePCAuth
             * @instance
             */
            LitePCAuth.prototype.GUID = "";

            /**
             * LitePCAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.LitePCAuth
             * @instance
             */
            LitePCAuth.prototype.ProviderID = "";

            /**
             * LitePCAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.LitePCAuth
             * @instance
             */
            LitePCAuth.prototype.Deactivated = false;

            /**
             * LitePCAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.LitePCAuth
             * @instance
             */
            LitePCAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LitePCAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.LitePCAuth
             * @instance
             */
            LitePCAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new LitePCAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {pubg.globalaccounts.ILitePCAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.LitePCAuth} LitePCAuth instance
             */
            LitePCAuth.create = function create(properties) {
                return new LitePCAuth(properties);
            };

            /**
             * Encodes the specified LitePCAuth message. Does not implicitly {@link pubg.globalaccounts.LitePCAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {pubg.globalaccounts.ILitePCAuth} message LitePCAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LitePCAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.UpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified LitePCAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.LitePCAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {pubg.globalaccounts.ILitePCAuth} message LitePCAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LitePCAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LitePCAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.LitePCAuth} LitePCAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LitePCAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.LitePCAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.CreatedAt = reader.int64();
                        break;
                    case 5:
                        message.UpdatedAt = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LitePCAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.LitePCAuth} LitePCAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LitePCAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LitePCAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LitePCAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                return null;
            };

            /**
             * Creates a LitePCAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.LitePCAuth} LitePCAuth
             */
            LitePCAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.LitePCAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.LitePCAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a LitePCAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.LitePCAuth
             * @static
             * @param {pubg.globalaccounts.LitePCAuth} message LitePCAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LitePCAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.ProviderID = "";
                    object.Deactivated = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                return object;
            };

            /**
             * Converts this LitePCAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.LitePCAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LitePCAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LitePCAuth;
        })();

        globalaccounts.YoutubeAuth = (function() {

            /**
             * Properties of a YoutubeAuth.
             * @memberof pubg.globalaccounts
             * @interface IYoutubeAuth
             * @property {string|null} [GUID] YoutubeAuth GUID
             * @property {string|null} [ProviderID] YoutubeAuth ProviderID
             * @property {boolean|null} [Deactivated] YoutubeAuth Deactivated
             * @property {number|Long|null} [CreatedAt] YoutubeAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] YoutubeAuth UpdatedAt
             */

            /**
             * Constructs a new YoutubeAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a YoutubeAuth.
             * @implements IYoutubeAuth
             * @constructor
             * @param {pubg.globalaccounts.IYoutubeAuth=} [properties] Properties to set
             */
            function YoutubeAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * YoutubeAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @instance
             */
            YoutubeAuth.prototype.GUID = "";

            /**
             * YoutubeAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @instance
             */
            YoutubeAuth.prototype.ProviderID = "";

            /**
             * YoutubeAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @instance
             */
            YoutubeAuth.prototype.Deactivated = false;

            /**
             * YoutubeAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @instance
             */
            YoutubeAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * YoutubeAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @instance
             */
            YoutubeAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new YoutubeAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {pubg.globalaccounts.IYoutubeAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.YoutubeAuth} YoutubeAuth instance
             */
            YoutubeAuth.create = function create(properties) {
                return new YoutubeAuth(properties);
            };

            /**
             * Encodes the specified YoutubeAuth message. Does not implicitly {@link pubg.globalaccounts.YoutubeAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {pubg.globalaccounts.IYoutubeAuth} message YoutubeAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            YoutubeAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.UpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified YoutubeAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.YoutubeAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {pubg.globalaccounts.IYoutubeAuth} message YoutubeAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            YoutubeAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a YoutubeAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.YoutubeAuth} YoutubeAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            YoutubeAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.YoutubeAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.CreatedAt = reader.int64();
                        break;
                    case 5:
                        message.UpdatedAt = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a YoutubeAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.YoutubeAuth} YoutubeAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            YoutubeAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a YoutubeAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            YoutubeAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                return null;
            };

            /**
             * Creates a YoutubeAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.YoutubeAuth} YoutubeAuth
             */
            YoutubeAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.YoutubeAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.YoutubeAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a YoutubeAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @static
             * @param {pubg.globalaccounts.YoutubeAuth} message YoutubeAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            YoutubeAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.ProviderID = "";
                    object.Deactivated = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                return object;
            };

            /**
             * Converts this YoutubeAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.YoutubeAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            YoutubeAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return YoutubeAuth;
        })();

        globalaccounts.AfreecaTVAuth = (function() {

            /**
             * Properties of an AfreecaTVAuth.
             * @memberof pubg.globalaccounts
             * @interface IAfreecaTVAuth
             * @property {string|null} [GUID] AfreecaTVAuth GUID
             * @property {string|null} [ProviderID] AfreecaTVAuth ProviderID
             * @property {boolean|null} [Deactivated] AfreecaTVAuth Deactivated
             * @property {number|Long|null} [CreatedAt] AfreecaTVAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] AfreecaTVAuth UpdatedAt
             */

            /**
             * Constructs a new AfreecaTVAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an AfreecaTVAuth.
             * @implements IAfreecaTVAuth
             * @constructor
             * @param {pubg.globalaccounts.IAfreecaTVAuth=} [properties] Properties to set
             */
            function AfreecaTVAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AfreecaTVAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @instance
             */
            AfreecaTVAuth.prototype.GUID = "";

            /**
             * AfreecaTVAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @instance
             */
            AfreecaTVAuth.prototype.ProviderID = "";

            /**
             * AfreecaTVAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @instance
             */
            AfreecaTVAuth.prototype.Deactivated = false;

            /**
             * AfreecaTVAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @instance
             */
            AfreecaTVAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AfreecaTVAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @instance
             */
            AfreecaTVAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new AfreecaTVAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {pubg.globalaccounts.IAfreecaTVAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.AfreecaTVAuth} AfreecaTVAuth instance
             */
            AfreecaTVAuth.create = function create(properties) {
                return new AfreecaTVAuth(properties);
            };

            /**
             * Encodes the specified AfreecaTVAuth message. Does not implicitly {@link pubg.globalaccounts.AfreecaTVAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {pubg.globalaccounts.IAfreecaTVAuth} message AfreecaTVAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AfreecaTVAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.UpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified AfreecaTVAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.AfreecaTVAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {pubg.globalaccounts.IAfreecaTVAuth} message AfreecaTVAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AfreecaTVAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AfreecaTVAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.AfreecaTVAuth} AfreecaTVAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AfreecaTVAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.AfreecaTVAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.CreatedAt = reader.int64();
                        break;
                    case 5:
                        message.UpdatedAt = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AfreecaTVAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.AfreecaTVAuth} AfreecaTVAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AfreecaTVAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AfreecaTVAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AfreecaTVAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                return null;
            };

            /**
             * Creates an AfreecaTVAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.AfreecaTVAuth} AfreecaTVAuth
             */
            AfreecaTVAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.AfreecaTVAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.AfreecaTVAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an AfreecaTVAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @static
             * @param {pubg.globalaccounts.AfreecaTVAuth} message AfreecaTVAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AfreecaTVAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.ProviderID = "";
                    object.Deactivated = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                return object;
            };

            /**
             * Converts this AfreecaTVAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.AfreecaTVAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AfreecaTVAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AfreecaTVAuth;
        })();

        globalaccounts.GoogleAuth = (function() {

            /**
             * Properties of a GoogleAuth.
             * @memberof pubg.globalaccounts
             * @interface IGoogleAuth
             * @property {string|null} [GUID] GoogleAuth GUID
             * @property {string|null} [DisplayName] GoogleAuth DisplayName
             * @property {boolean|null} [Deactivated] GoogleAuth Deactivated
             * @property {string|null} [Email] GoogleAuth Email
             * @property {string|null} [GoogleID] GoogleAuth GoogleID
             * @property {number|Long|null} [CreatedAt] GoogleAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] GoogleAuth UpdatedAt
             * @property {string|null} [ProviderID] GoogleAuth ProviderID
             */

            /**
             * Constructs a new GoogleAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a GoogleAuth.
             * @implements IGoogleAuth
             * @constructor
             * @param {pubg.globalaccounts.IGoogleAuth=} [properties] Properties to set
             */
            function GoogleAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GoogleAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.GUID = "";

            /**
             * GoogleAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.DisplayName = "";

            /**
             * GoogleAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.Deactivated = false;

            /**
             * GoogleAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.Email = "";

            /**
             * GoogleAuth GoogleID.
             * @member {string} GoogleID
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.GoogleID = "";

            /**
             * GoogleAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GoogleAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * GoogleAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             */
            GoogleAuth.prototype.ProviderID = "";

            /**
             * Creates a new GoogleAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {pubg.globalaccounts.IGoogleAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.GoogleAuth} GoogleAuth instance
             */
            GoogleAuth.create = function create(properties) {
                return new GoogleAuth(properties);
            };

            /**
             * Encodes the specified GoogleAuth message. Does not implicitly {@link pubg.globalaccounts.GoogleAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {pubg.globalaccounts.IGoogleAuth} message GoogleAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoogleAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                if (message.GoogleID != null && message.hasOwnProperty("GoogleID"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.GoogleID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified GoogleAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.GoogleAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {pubg.globalaccounts.IGoogleAuth} message GoogleAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GoogleAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GoogleAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.GoogleAuth} GoogleAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoogleAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.GoogleAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    case 5:
                        message.GoogleID = reader.string();
                        break;
                    case 6:
                        message.CreatedAt = reader.int64();
                        break;
                    case 7:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 8:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GoogleAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.GoogleAuth} GoogleAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GoogleAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GoogleAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GoogleAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.GoogleID != null && message.hasOwnProperty("GoogleID"))
                    if (!$util.isString(message.GoogleID))
                        return "GoogleID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a GoogleAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.GoogleAuth} GoogleAuth
             */
            GoogleAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.GoogleAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.GoogleAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.GoogleID != null)
                    message.GoogleID = String(object.GoogleID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a GoogleAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.GoogleAuth
             * @static
             * @param {pubg.globalaccounts.GoogleAuth} message GoogleAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GoogleAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Email = "";
                    object.GoogleID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.GoogleID != null && message.hasOwnProperty("GoogleID"))
                    object.GoogleID = message.GoogleID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this GoogleAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.GoogleAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GoogleAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GoogleAuth;
        })();

        globalaccounts.LineAuth = (function() {

            /**
             * Properties of a LineAuth.
             * @memberof pubg.globalaccounts
             * @interface ILineAuth
             * @property {string|null} [GUID] LineAuth GUID
             * @property {string|null} [DisplayName] LineAuth DisplayName
             * @property {boolean|null} [Deactivated] LineAuth Deactivated
             * @property {string|null} [Email] LineAuth Email
             * @property {string|null} [LineID] LineAuth LineID
             * @property {number|Long|null} [CreatedAt] LineAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] LineAuth UpdatedAt
             * @property {string|null} [ProviderID] LineAuth ProviderID
             */

            /**
             * Constructs a new LineAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a LineAuth.
             * @implements ILineAuth
             * @constructor
             * @param {pubg.globalaccounts.ILineAuth=} [properties] Properties to set
             */
            function LineAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LineAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.GUID = "";

            /**
             * LineAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.DisplayName = "";

            /**
             * LineAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.Deactivated = false;

            /**
             * LineAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.Email = "";

            /**
             * LineAuth LineID.
             * @member {string} LineID
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.LineID = "";

            /**
             * LineAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LineAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * LineAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             */
            LineAuth.prototype.ProviderID = "";

            /**
             * Creates a new LineAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {pubg.globalaccounts.ILineAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.LineAuth} LineAuth instance
             */
            LineAuth.create = function create(properties) {
                return new LineAuth(properties);
            };

            /**
             * Encodes the specified LineAuth message. Does not implicitly {@link pubg.globalaccounts.LineAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {pubg.globalaccounts.ILineAuth} message LineAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LineAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                if (message.LineID != null && message.hasOwnProperty("LineID"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.LineID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified LineAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.LineAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {pubg.globalaccounts.ILineAuth} message LineAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LineAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LineAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.LineAuth} LineAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LineAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.LineAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    case 5:
                        message.LineID = reader.string();
                        break;
                    case 6:
                        message.CreatedAt = reader.int64();
                        break;
                    case 7:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 8:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LineAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.LineAuth} LineAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LineAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LineAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LineAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.LineID != null && message.hasOwnProperty("LineID"))
                    if (!$util.isString(message.LineID))
                        return "LineID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a LineAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.LineAuth} LineAuth
             */
            LineAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.LineAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.LineAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.LineID != null)
                    message.LineID = String(object.LineID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a LineAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.LineAuth
             * @static
             * @param {pubg.globalaccounts.LineAuth} message LineAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LineAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Email = "";
                    object.LineID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.LineID != null && message.hasOwnProperty("LineID"))
                    object.LineID = message.LineID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this LineAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.LineAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LineAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LineAuth;
        })();

        globalaccounts.TwitterAuth = (function() {

            /**
             * Properties of a TwitterAuth.
             * @memberof pubg.globalaccounts
             * @interface ITwitterAuth
             * @property {string|null} [GUID] TwitterAuth GUID
             * @property {string|null} [DisplayName] TwitterAuth DisplayName
             * @property {boolean|null} [Deactivated] TwitterAuth Deactivated
             * @property {string|null} [Email] TwitterAuth Email
             * @property {string|null} [TwitterID] TwitterAuth TwitterID
             * @property {number|Long|null} [CreatedAt] TwitterAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] TwitterAuth UpdatedAt
             * @property {string|null} [ProviderID] TwitterAuth ProviderID
             */

            /**
             * Constructs a new TwitterAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a TwitterAuth.
             * @implements ITwitterAuth
             * @constructor
             * @param {pubg.globalaccounts.ITwitterAuth=} [properties] Properties to set
             */
            function TwitterAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TwitterAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.GUID = "";

            /**
             * TwitterAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.DisplayName = "";

            /**
             * TwitterAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.Deactivated = false;

            /**
             * TwitterAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.Email = "";

            /**
             * TwitterAuth TwitterID.
             * @member {string} TwitterID
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.TwitterID = "";

            /**
             * TwitterAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TwitterAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * TwitterAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             */
            TwitterAuth.prototype.ProviderID = "";

            /**
             * Creates a new TwitterAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {pubg.globalaccounts.ITwitterAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.TwitterAuth} TwitterAuth instance
             */
            TwitterAuth.create = function create(properties) {
                return new TwitterAuth(properties);
            };

            /**
             * Encodes the specified TwitterAuth message. Does not implicitly {@link pubg.globalaccounts.TwitterAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {pubg.globalaccounts.ITwitterAuth} message TwitterAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitterAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                if (message.TwitterID != null && message.hasOwnProperty("TwitterID"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.TwitterID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified TwitterAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.TwitterAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {pubg.globalaccounts.ITwitterAuth} message TwitterAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TwitterAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TwitterAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.TwitterAuth} TwitterAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitterAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.TwitterAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    case 5:
                        message.TwitterID = reader.string();
                        break;
                    case 6:
                        message.CreatedAt = reader.int64();
                        break;
                    case 7:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 8:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TwitterAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.TwitterAuth} TwitterAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TwitterAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TwitterAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TwitterAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.TwitterID != null && message.hasOwnProperty("TwitterID"))
                    if (!$util.isString(message.TwitterID))
                        return "TwitterID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a TwitterAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.TwitterAuth} TwitterAuth
             */
            TwitterAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.TwitterAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.TwitterAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.TwitterID != null)
                    message.TwitterID = String(object.TwitterID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a TwitterAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.TwitterAuth
             * @static
             * @param {pubg.globalaccounts.TwitterAuth} message TwitterAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TwitterAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Email = "";
                    object.TwitterID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.TwitterID != null && message.hasOwnProperty("TwitterID"))
                    object.TwitterID = message.TwitterID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this TwitterAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.TwitterAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TwitterAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TwitterAuth;
        })();

        globalaccounts.PlaystationAuth = (function() {

            /**
             * Properties of a PlaystationAuth.
             * @memberof pubg.globalaccounts
             * @interface IPlaystationAuth
             * @property {string|null} [GUID] PlaystationAuth GUID
             * @property {string|null} [DisplayName] PlaystationAuth DisplayName
             * @property {boolean|null} [Deactivated] PlaystationAuth Deactivated
             * @property {string|null} [CommunityDomain] PlaystationAuth CommunityDomain
             * @property {string|null} [DateOfBirth] PlaystationAuth DateOfBirth
             * @property {number|null} [Age] PlaystationAuth Age
             * @property {string|null} [Language] PlaystationAuth Language
             * @property {string|null} [PSNID] PlaystationAuth PSNID
             * @property {string|null} [PSNRegion] PlaystationAuth PSNRegion
             * @property {boolean|null} [SubAccount] PlaystationAuth SubAccount
             * @property {pubg.globalaccounts.IPSNParentalControl|null} [ParentalControl] PlaystationAuth ParentalControl
             * @property {number|Long|null} [CreatedAt] PlaystationAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] PlaystationAuth UpdatedAt
             * @property {string|null} [ProviderID] PlaystationAuth ProviderID
             */

            /**
             * Constructs a new PlaystationAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PlaystationAuth.
             * @implements IPlaystationAuth
             * @constructor
             * @param {pubg.globalaccounts.IPlaystationAuth=} [properties] Properties to set
             */
            function PlaystationAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlaystationAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.GUID = "";

            /**
             * PlaystationAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.DisplayName = "";

            /**
             * PlaystationAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.Deactivated = false;

            /**
             * PlaystationAuth CommunityDomain.
             * @member {string} CommunityDomain
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.CommunityDomain = "";

            /**
             * PlaystationAuth DateOfBirth.
             * @member {string} DateOfBirth
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.DateOfBirth = "";

            /**
             * PlaystationAuth Age.
             * @member {number} Age
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.Age = 0;

            /**
             * PlaystationAuth Language.
             * @member {string} Language
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.Language = "";

            /**
             * PlaystationAuth PSNID.
             * @member {string} PSNID
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.PSNID = "";

            /**
             * PlaystationAuth PSNRegion.
             * @member {string} PSNRegion
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.PSNRegion = "";

            /**
             * PlaystationAuth SubAccount.
             * @member {boolean} SubAccount
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.SubAccount = false;

            /**
             * PlaystationAuth ParentalControl.
             * @member {pubg.globalaccounts.IPSNParentalControl|null|undefined} ParentalControl
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.ParentalControl = null;

            /**
             * PlaystationAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlaystationAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlaystationAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             */
            PlaystationAuth.prototype.ProviderID = "";

            /**
             * Creates a new PlaystationAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {pubg.globalaccounts.IPlaystationAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PlaystationAuth} PlaystationAuth instance
             */
            PlaystationAuth.create = function create(properties) {
                return new PlaystationAuth(properties);
            };

            /**
             * Encodes the specified PlaystationAuth message. Does not implicitly {@link pubg.globalaccounts.PlaystationAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {pubg.globalaccounts.IPlaystationAuth} message PlaystationAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaystationAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.CommunityDomain != null && message.hasOwnProperty("CommunityDomain"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.CommunityDomain);
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.DateOfBirth);
                if (message.Age != null && message.hasOwnProperty("Age"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.Age);
                if (message.Language != null && message.hasOwnProperty("Language"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Language);
                if (message.PSNID != null && message.hasOwnProperty("PSNID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.PSNID);
                if (message.PSNRegion != null && message.hasOwnProperty("PSNRegion"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.PSNRegion);
                if (message.SubAccount != null && message.hasOwnProperty("SubAccount"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.SubAccount);
                if (message.ParentalControl != null && message.hasOwnProperty("ParentalControl"))
                    $root.pubg.globalaccounts.PSNParentalControl.encode(message.ParentalControl, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified PlaystationAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.PlaystationAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {pubg.globalaccounts.IPlaystationAuth} message PlaystationAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaystationAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlaystationAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PlaystationAuth} PlaystationAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaystationAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PlaystationAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.CommunityDomain = reader.string();
                        break;
                    case 5:
                        message.DateOfBirth = reader.string();
                        break;
                    case 6:
                        message.Age = reader.int32();
                        break;
                    case 7:
                        message.Language = reader.string();
                        break;
                    case 8:
                        message.PSNID = reader.string();
                        break;
                    case 9:
                        message.PSNRegion = reader.string();
                        break;
                    case 10:
                        message.SubAccount = reader.bool();
                        break;
                    case 11:
                        message.ParentalControl = $root.pubg.globalaccounts.PSNParentalControl.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.CreatedAt = reader.int64();
                        break;
                    case 13:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 14:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlaystationAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PlaystationAuth} PlaystationAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaystationAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlaystationAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaystationAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.CommunityDomain != null && message.hasOwnProperty("CommunityDomain"))
                    if (!$util.isString(message.CommunityDomain))
                        return "CommunityDomain: string expected";
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    if (!$util.isString(message.DateOfBirth))
                        return "DateOfBirth: string expected";
                if (message.Age != null && message.hasOwnProperty("Age"))
                    if (!$util.isInteger(message.Age))
                        return "Age: integer expected";
                if (message.Language != null && message.hasOwnProperty("Language"))
                    if (!$util.isString(message.Language))
                        return "Language: string expected";
                if (message.PSNID != null && message.hasOwnProperty("PSNID"))
                    if (!$util.isString(message.PSNID))
                        return "PSNID: string expected";
                if (message.PSNRegion != null && message.hasOwnProperty("PSNRegion"))
                    if (!$util.isString(message.PSNRegion))
                        return "PSNRegion: string expected";
                if (message.SubAccount != null && message.hasOwnProperty("SubAccount"))
                    if (typeof message.SubAccount !== "boolean")
                        return "SubAccount: boolean expected";
                if (message.ParentalControl != null && message.hasOwnProperty("ParentalControl")) {
                    var error = $root.pubg.globalaccounts.PSNParentalControl.verify(message.ParentalControl);
                    if (error)
                        return "ParentalControl." + error;
                }
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a PlaystationAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PlaystationAuth} PlaystationAuth
             */
            PlaystationAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PlaystationAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.PlaystationAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.CommunityDomain != null)
                    message.CommunityDomain = String(object.CommunityDomain);
                if (object.DateOfBirth != null)
                    message.DateOfBirth = String(object.DateOfBirth);
                if (object.Age != null)
                    message.Age = object.Age | 0;
                if (object.Language != null)
                    message.Language = String(object.Language);
                if (object.PSNID != null)
                    message.PSNID = String(object.PSNID);
                if (object.PSNRegion != null)
                    message.PSNRegion = String(object.PSNRegion);
                if (object.SubAccount != null)
                    message.SubAccount = Boolean(object.SubAccount);
                if (object.ParentalControl != null) {
                    if (typeof object.ParentalControl !== "object")
                        throw TypeError(".pubg.globalaccounts.PlaystationAuth.ParentalControl: object expected");
                    message.ParentalControl = $root.pubg.globalaccounts.PSNParentalControl.fromObject(object.ParentalControl);
                }
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a PlaystationAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @static
             * @param {pubg.globalaccounts.PlaystationAuth} message PlaystationAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaystationAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.CommunityDomain = "";
                    object.DateOfBirth = "";
                    object.Age = 0;
                    object.Language = "";
                    object.PSNID = "";
                    object.PSNRegion = "";
                    object.SubAccount = false;
                    object.ParentalControl = null;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.CommunityDomain != null && message.hasOwnProperty("CommunityDomain"))
                    object.CommunityDomain = message.CommunityDomain;
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    object.DateOfBirth = message.DateOfBirth;
                if (message.Age != null && message.hasOwnProperty("Age"))
                    object.Age = message.Age;
                if (message.Language != null && message.hasOwnProperty("Language"))
                    object.Language = message.Language;
                if (message.PSNID != null && message.hasOwnProperty("PSNID"))
                    object.PSNID = message.PSNID;
                if (message.PSNRegion != null && message.hasOwnProperty("PSNRegion"))
                    object.PSNRegion = message.PSNRegion;
                if (message.SubAccount != null && message.hasOwnProperty("SubAccount"))
                    object.SubAccount = message.SubAccount;
                if (message.ParentalControl != null && message.hasOwnProperty("ParentalControl"))
                    object.ParentalControl = $root.pubg.globalaccounts.PSNParentalControl.toObject(message.ParentalControl, options);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this PlaystationAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PlaystationAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaystationAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlaystationAuth;
        })();

        globalaccounts.RedditAuth = (function() {

            /**
             * Properties of a RedditAuth.
             * @memberof pubg.globalaccounts
             * @interface IRedditAuth
             * @property {string|null} [GUID] RedditAuth GUID
             * @property {string|null} [DisplayName] RedditAuth DisplayName
             * @property {boolean|null} [Deactivated] RedditAuth Deactivated
             * @property {string|null} [RedditID] RedditAuth RedditID
             * @property {number|Long|null} [CreatedAt] RedditAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] RedditAuth UpdatedAt
             * @property {string|null} [ProviderID] RedditAuth ProviderID
             */

            /**
             * Constructs a new RedditAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a RedditAuth.
             * @implements IRedditAuth
             * @constructor
             * @param {pubg.globalaccounts.IRedditAuth=} [properties] Properties to set
             */
            function RedditAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RedditAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.GUID = "";

            /**
             * RedditAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.DisplayName = "";

            /**
             * RedditAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.Deactivated = false;

            /**
             * RedditAuth RedditID.
             * @member {string} RedditID
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.RedditID = "";

            /**
             * RedditAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RedditAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * RedditAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             */
            RedditAuth.prototype.ProviderID = "";

            /**
             * Creates a new RedditAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {pubg.globalaccounts.IRedditAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.RedditAuth} RedditAuth instance
             */
            RedditAuth.create = function create(properties) {
                return new RedditAuth(properties);
            };

            /**
             * Encodes the specified RedditAuth message. Does not implicitly {@link pubg.globalaccounts.RedditAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {pubg.globalaccounts.IRedditAuth} message RedditAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RedditAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.RedditID != null && message.hasOwnProperty("RedditID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.RedditID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified RedditAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.RedditAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {pubg.globalaccounts.IRedditAuth} message RedditAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RedditAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RedditAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.RedditAuth} RedditAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RedditAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.RedditAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.RedditID = reader.string();
                        break;
                    case 5:
                        message.CreatedAt = reader.int64();
                        break;
                    case 6:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 7:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RedditAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.RedditAuth} RedditAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RedditAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RedditAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RedditAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.RedditID != null && message.hasOwnProperty("RedditID"))
                    if (!$util.isString(message.RedditID))
                        return "RedditID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a RedditAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.RedditAuth} RedditAuth
             */
            RedditAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.RedditAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.RedditAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.RedditID != null)
                    message.RedditID = String(object.RedditID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a RedditAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.RedditAuth
             * @static
             * @param {pubg.globalaccounts.RedditAuth} message RedditAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RedditAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.RedditID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.RedditID != null && message.hasOwnProperty("RedditID"))
                    object.RedditID = message.RedditID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this RedditAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.RedditAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RedditAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return RedditAuth;
        })();

        globalaccounts.StadiaAuth = (function() {

            /**
             * Properties of a StadiaAuth.
             * @memberof pubg.globalaccounts
             * @interface IStadiaAuth
             * @property {string|null} [GUID] StadiaAuth GUID
             * @property {string|null} [DisplayName] StadiaAuth DisplayName
             * @property {boolean|null} [Deactivated] StadiaAuth Deactivated
             * @property {string|null} [StadiaID] StadiaAuth StadiaID
             * @property {number|Long|null} [CreatedAt] StadiaAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] StadiaAuth UpdatedAt
             * @property {string|null} [ProviderID] StadiaAuth ProviderID
             */

            /**
             * Constructs a new StadiaAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a StadiaAuth.
             * @implements IStadiaAuth
             * @constructor
             * @param {pubg.globalaccounts.IStadiaAuth=} [properties] Properties to set
             */
            function StadiaAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StadiaAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.GUID = "";

            /**
             * StadiaAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.DisplayName = "";

            /**
             * StadiaAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.Deactivated = false;

            /**
             * StadiaAuth StadiaID.
             * @member {string} StadiaID
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.StadiaID = "";

            /**
             * StadiaAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StadiaAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * StadiaAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             */
            StadiaAuth.prototype.ProviderID = "";

            /**
             * Creates a new StadiaAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {pubg.globalaccounts.IStadiaAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.StadiaAuth} StadiaAuth instance
             */
            StadiaAuth.create = function create(properties) {
                return new StadiaAuth(properties);
            };

            /**
             * Encodes the specified StadiaAuth message. Does not implicitly {@link pubg.globalaccounts.StadiaAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {pubg.globalaccounts.IStadiaAuth} message StadiaAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StadiaAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.StadiaID != null && message.hasOwnProperty("StadiaID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.StadiaID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified StadiaAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.StadiaAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {pubg.globalaccounts.IStadiaAuth} message StadiaAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StadiaAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StadiaAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.StadiaAuth} StadiaAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StadiaAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.StadiaAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.StadiaID = reader.string();
                        break;
                    case 5:
                        message.CreatedAt = reader.int64();
                        break;
                    case 6:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 7:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StadiaAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.StadiaAuth} StadiaAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StadiaAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StadiaAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StadiaAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.StadiaID != null && message.hasOwnProperty("StadiaID"))
                    if (!$util.isString(message.StadiaID))
                        return "StadiaID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a StadiaAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.StadiaAuth} StadiaAuth
             */
            StadiaAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.StadiaAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.StadiaAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.StadiaID != null)
                    message.StadiaID = String(object.StadiaID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a StadiaAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.StadiaAuth
             * @static
             * @param {pubg.globalaccounts.StadiaAuth} message StadiaAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StadiaAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.StadiaID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.StadiaID != null && message.hasOwnProperty("StadiaID"))
                    object.StadiaID = message.StadiaID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this StadiaAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.StadiaAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StadiaAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StadiaAuth;
        })();

        globalaccounts.SteamAuth = (function() {

            /**
             * Properties of a SteamAuth.
             * @memberof pubg.globalaccounts
             * @interface ISteamAuth
             * @property {string|null} [GUID] SteamAuth GUID
             * @property {string|null} [DisplayName] SteamAuth DisplayName
             * @property {boolean|null} [Deactivated] SteamAuth Deactivated
             * @property {string|null} [SteamID] SteamAuth SteamID
             * @property {number|Long|null} [CreatedAt] SteamAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] SteamAuth UpdatedAt
             * @property {string|null} [ProviderID] SteamAuth ProviderID
             */

            /**
             * Constructs a new SteamAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a SteamAuth.
             * @implements ISteamAuth
             * @constructor
             * @param {pubg.globalaccounts.ISteamAuth=} [properties] Properties to set
             */
            function SteamAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SteamAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.GUID = "";

            /**
             * SteamAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.DisplayName = "";

            /**
             * SteamAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.Deactivated = false;

            /**
             * SteamAuth SteamID.
             * @member {string} SteamID
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.SteamID = "";

            /**
             * SteamAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SteamAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * SteamAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             */
            SteamAuth.prototype.ProviderID = "";

            /**
             * Creates a new SteamAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {pubg.globalaccounts.ISteamAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.SteamAuth} SteamAuth instance
             */
            SteamAuth.create = function create(properties) {
                return new SteamAuth(properties);
            };

            /**
             * Encodes the specified SteamAuth message. Does not implicitly {@link pubg.globalaccounts.SteamAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {pubg.globalaccounts.ISteamAuth} message SteamAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SteamAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.SteamID != null && message.hasOwnProperty("SteamID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.SteamID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified SteamAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.SteamAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {pubg.globalaccounts.ISteamAuth} message SteamAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SteamAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SteamAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.SteamAuth} SteamAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SteamAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.SteamAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.SteamID = reader.string();
                        break;
                    case 5:
                        message.CreatedAt = reader.int64();
                        break;
                    case 6:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 7:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SteamAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.SteamAuth} SteamAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SteamAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SteamAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SteamAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.SteamID != null && message.hasOwnProperty("SteamID"))
                    if (!$util.isString(message.SteamID))
                        return "SteamID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a SteamAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.SteamAuth} SteamAuth
             */
            SteamAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.SteamAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.SteamAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.SteamID != null)
                    message.SteamID = String(object.SteamID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a SteamAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.SteamAuth
             * @static
             * @param {pubg.globalaccounts.SteamAuth} message SteamAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SteamAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.SteamID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.SteamID != null && message.hasOwnProperty("SteamID"))
                    object.SteamID = message.SteamID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this SteamAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.SteamAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SteamAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SteamAuth;
        })();

        globalaccounts.XboxAuth = (function() {

            /**
             * Properties of a XboxAuth.
             * @memberof pubg.globalaccounts
             * @interface IXboxAuth
             * @property {string|null} [GUID] XboxAuth GUID
             * @property {string|null} [DisplayName] XboxAuth DisplayName
             * @property {boolean|null} [Deactivated] XboxAuth Deactivated
             * @property {string|null} [XUID] XboxAuth XUID
             * @property {number|Long|null} [CreatedAt] XboxAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] XboxAuth UpdatedAt
             * @property {string|null} [ProviderID] XboxAuth ProviderID
             */

            /**
             * Constructs a new XboxAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a XboxAuth.
             * @implements IXboxAuth
             * @constructor
             * @param {pubg.globalaccounts.IXboxAuth=} [properties] Properties to set
             */
            function XboxAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * XboxAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.GUID = "";

            /**
             * XboxAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.DisplayName = "";

            /**
             * XboxAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.Deactivated = false;

            /**
             * XboxAuth XUID.
             * @member {string} XUID
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.XUID = "";

            /**
             * XboxAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * XboxAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * XboxAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             */
            XboxAuth.prototype.ProviderID = "";

            /**
             * Creates a new XboxAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {pubg.globalaccounts.IXboxAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.XboxAuth} XboxAuth instance
             */
            XboxAuth.create = function create(properties) {
                return new XboxAuth(properties);
            };

            /**
             * Encodes the specified XboxAuth message. Does not implicitly {@link pubg.globalaccounts.XboxAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {pubg.globalaccounts.IXboxAuth} message XboxAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XboxAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.XUID != null && message.hasOwnProperty("XUID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.XUID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified XboxAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.XboxAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {pubg.globalaccounts.IXboxAuth} message XboxAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            XboxAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a XboxAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.XboxAuth} XboxAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XboxAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.XboxAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.XUID = reader.string();
                        break;
                    case 5:
                        message.CreatedAt = reader.int64();
                        break;
                    case 6:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 7:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a XboxAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.XboxAuth} XboxAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            XboxAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a XboxAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            XboxAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.XUID != null && message.hasOwnProperty("XUID"))
                    if (!$util.isString(message.XUID))
                        return "XUID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a XboxAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.XboxAuth} XboxAuth
             */
            XboxAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.XboxAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.XboxAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.XUID != null)
                    message.XUID = String(object.XUID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a XboxAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.XboxAuth
             * @static
             * @param {pubg.globalaccounts.XboxAuth} message XboxAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            XboxAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.XUID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.XUID != null && message.hasOwnProperty("XUID"))
                    object.XUID = message.XUID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this XboxAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.XboxAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            XboxAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return XboxAuth;
        })();

        globalaccounts.VkAuth = (function() {

            /**
             * Properties of a VkAuth.
             * @memberof pubg.globalaccounts
             * @interface IVkAuth
             * @property {string|null} [GUID] VkAuth GUID
             * @property {string|null} [DisplayName] VkAuth DisplayName
             * @property {boolean|null} [Deactivated] VkAuth Deactivated
             * @property {string|null} [Email] VkAuth Email
             * @property {string|null} [VKID] VkAuth VKID
             * @property {number|Long|null} [CreatedAt] VkAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] VkAuth UpdatedAt
             * @property {string|null} [ProviderID] VkAuth ProviderID
             */

            /**
             * Constructs a new VkAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a VkAuth.
             * @implements IVkAuth
             * @constructor
             * @param {pubg.globalaccounts.IVkAuth=} [properties] Properties to set
             */
            function VkAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VkAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.GUID = "";

            /**
             * VkAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.DisplayName = "";

            /**
             * VkAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.Deactivated = false;

            /**
             * VkAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.Email = "";

            /**
             * VkAuth VKID.
             * @member {string} VKID
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.VKID = "";

            /**
             * VkAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * VkAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * VkAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             */
            VkAuth.prototype.ProviderID = "";

            /**
             * Creates a new VkAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {pubg.globalaccounts.IVkAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.VkAuth} VkAuth instance
             */
            VkAuth.create = function create(properties) {
                return new VkAuth(properties);
            };

            /**
             * Encodes the specified VkAuth message. Does not implicitly {@link pubg.globalaccounts.VkAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {pubg.globalaccounts.IVkAuth} message VkAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VkAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.Deactivated);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Email);
                if (message.VKID != null && message.hasOwnProperty("VKID"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.VKID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.UpdatedAt);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.ProviderID);
                return writer;
            };

            /**
             * Encodes the specified VkAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.VkAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {pubg.globalaccounts.IVkAuth} message VkAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VkAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VkAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.VkAuth} VkAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VkAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.VkAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.Deactivated = reader.bool();
                        break;
                    case 4:
                        message.Email = reader.string();
                        break;
                    case 5:
                        message.VKID = reader.string();
                        break;
                    case 6:
                        message.CreatedAt = reader.int64();
                        break;
                    case 7:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 8:
                        message.ProviderID = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VkAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.VkAuth} VkAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VkAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VkAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VkAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.VKID != null && message.hasOwnProperty("VKID"))
                    if (!$util.isString(message.VKID))
                        return "VKID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                return null;
            };

            /**
             * Creates a VkAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.VkAuth} VkAuth
             */
            VkAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.VkAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.VkAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.VKID != null)
                    message.VKID = String(object.VKID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                return message;
            };

            /**
             * Creates a plain object from a VkAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.VkAuth
             * @static
             * @param {pubg.globalaccounts.VkAuth} message VkAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VkAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Email = "";
                    object.VKID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.ProviderID = "";
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.VKID != null && message.hasOwnProperty("VKID"))
                    object.VKID = message.VKID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                return object;
            };

            /**
             * Converts this VkAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.VkAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VkAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VkAuth;
        })();

        globalaccounts.DiscordAuth = (function() {

            /**
             * Properties of a DiscordAuth.
             * @memberof pubg.globalaccounts
             * @interface IDiscordAuth
             * @property {string|null} [GUID] DiscordAuth GUID
             * @property {string|null} [ProviderID] DiscordAuth ProviderID
             * @property {string|null} [DisplayName] DiscordAuth DisplayName
             * @property {boolean|null} [Deactivated] DiscordAuth Deactivated
             * @property {string|null} [Email] DiscordAuth Email
             * @property {string|null} [DiscordID] DiscordAuth DiscordID
             * @property {string|null} [Discriminator] DiscordAuth Discriminator
             * @property {number|Long|null} [CreatedAt] DiscordAuth CreatedAt
             * @property {number|Long|null} [UpdatedAt] DiscordAuth UpdatedAt
             */

            /**
             * Constructs a new DiscordAuth.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a DiscordAuth.
             * @implements IDiscordAuth
             * @constructor
             * @param {pubg.globalaccounts.IDiscordAuth=} [properties] Properties to set
             */
            function DiscordAuth(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DiscordAuth GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.GUID = "";

            /**
             * DiscordAuth ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.ProviderID = "";

            /**
             * DiscordAuth DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.DisplayName = "";

            /**
             * DiscordAuth Deactivated.
             * @member {boolean} Deactivated
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.Deactivated = false;

            /**
             * DiscordAuth Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.Email = "";

            /**
             * DiscordAuth DiscordID.
             * @member {string} DiscordID
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.DiscordID = "";

            /**
             * DiscordAuth Discriminator.
             * @member {string} Discriminator
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.Discriminator = "";

            /**
             * DiscordAuth CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * DiscordAuth UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             */
            DiscordAuth.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new DiscordAuth instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {pubg.globalaccounts.IDiscordAuth=} [properties] Properties to set
             * @returns {pubg.globalaccounts.DiscordAuth} DiscordAuth instance
             */
            DiscordAuth.create = function create(properties) {
                return new DiscordAuth(properties);
            };

            /**
             * Encodes the specified DiscordAuth message. Does not implicitly {@link pubg.globalaccounts.DiscordAuth.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {pubg.globalaccounts.IDiscordAuth} message DiscordAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiscordAuth.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.DisplayName);
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.Deactivated);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Email);
                if (message.DiscordID != null && message.hasOwnProperty("DiscordID"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.DiscordID);
                if (message.Discriminator != null && message.hasOwnProperty("Discriminator"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.Discriminator);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.UpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified DiscordAuth message, length delimited. Does not implicitly {@link pubg.globalaccounts.DiscordAuth.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {pubg.globalaccounts.IDiscordAuth} message DiscordAuth message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DiscordAuth.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DiscordAuth message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.DiscordAuth} DiscordAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiscordAuth.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.DiscordAuth();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    case 3:
                        message.DisplayName = reader.string();
                        break;
                    case 4:
                        message.Deactivated = reader.bool();
                        break;
                    case 5:
                        message.Email = reader.string();
                        break;
                    case 6:
                        message.DiscordID = reader.string();
                        break;
                    case 7:
                        message.Discriminator = reader.string();
                        break;
                    case 8:
                        message.CreatedAt = reader.int64();
                        break;
                    case 9:
                        message.UpdatedAt = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DiscordAuth message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.DiscordAuth} DiscordAuth
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DiscordAuth.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DiscordAuth message.
             * @function verify
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DiscordAuth.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    if (typeof message.Deactivated !== "boolean")
                        return "Deactivated: boolean expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.DiscordID != null && message.hasOwnProperty("DiscordID"))
                    if (!$util.isString(message.DiscordID))
                        return "DiscordID: string expected";
                if (message.Discriminator != null && message.hasOwnProperty("Discriminator"))
                    if (!$util.isString(message.Discriminator))
                        return "Discriminator: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                return null;
            };

            /**
             * Creates a DiscordAuth message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.DiscordAuth} DiscordAuth
             */
            DiscordAuth.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.DiscordAuth)
                    return object;
                var message = new $root.pubg.globalaccounts.DiscordAuth();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Deactivated != null)
                    message.Deactivated = Boolean(object.Deactivated);
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.DiscordID != null)
                    message.DiscordID = String(object.DiscordID);
                if (object.Discriminator != null)
                    message.Discriminator = String(object.Discriminator);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a DiscordAuth message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.DiscordAuth
             * @static
             * @param {pubg.globalaccounts.DiscordAuth} message DiscordAuth
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DiscordAuth.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.ProviderID = "";
                    object.DisplayName = "";
                    object.Deactivated = false;
                    object.Email = "";
                    object.DiscordID = "";
                    object.Discriminator = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Deactivated != null && message.hasOwnProperty("Deactivated"))
                    object.Deactivated = message.Deactivated;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.DiscordID != null && message.hasOwnProperty("DiscordID"))
                    object.DiscordID = message.DiscordID;
                if (message.Discriminator != null && message.hasOwnProperty("Discriminator"))
                    object.Discriminator = message.Discriminator;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                return object;
            };

            /**
             * Converts this DiscordAuth to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.DiscordAuth
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DiscordAuth.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DiscordAuth;
        })();

        globalaccounts.Profile = (function() {

            /**
             * Properties of a Profile.
             * @memberof pubg.globalaccounts
             * @interface IProfile
             * @property {string|null} [GUID] Profile GUID
             * @property {string|null} [ProviderID] Profile ProviderID
             * @property {string|null} [DisplayName] Profile DisplayName
             * @property {string|null} [Country] Profile Country
             * @property {number|Long|null} [DateOfBirth] Profile DateOfBirth
             * @property {string|null} [Email] Profile Email
             * @property {boolean|null} [EmailOptIn] Profile EmailOptIn
             * @property {boolean|null} [ToSAccepted] Profile ToSAccepted
             * @property {number|Long|null} [EmailOptInUpdatedAt] Profile EmailOptInUpdatedAt
             * @property {string|null} [PreferredLanguage] Profile PreferredLanguage
             * @property {string|null} [Username] Profile Username
             * @property {number|Long|null} [CreatedAt] Profile CreatedAt
             * @property {number|Long|null} [UpdatedAt] Profile UpdatedAt
             * @property {pubg.globalaccounts.ICreatorInfo|null} [CreatorInfo] Profile CreatorInfo
             * @property {Object.<string,string>|null} [PromoCodes] Profile PromoCodes
             */

            /**
             * Constructs a new Profile.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a Profile.
             * @implements IProfile
             * @constructor
             * @param {pubg.globalaccounts.IProfile=} [properties] Properties to set
             */
            function Profile(properties) {
                this.PromoCodes = {};
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Profile GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.GUID = "";

            /**
             * Profile ProviderID.
             * @member {string} ProviderID
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.ProviderID = "";

            /**
             * Profile DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.DisplayName = "";

            /**
             * Profile Country.
             * @member {string} Country
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.Country = "";

            /**
             * Profile DateOfBirth.
             * @member {number|Long} DateOfBirth
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.DateOfBirth = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Profile Email.
             * @member {string} Email
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.Email = "";

            /**
             * Profile EmailOptIn.
             * @member {boolean} EmailOptIn
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.EmailOptIn = false;

            /**
             * Profile ToSAccepted.
             * @member {boolean} ToSAccepted
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.ToSAccepted = false;

            /**
             * Profile EmailOptInUpdatedAt.
             * @member {number|Long} EmailOptInUpdatedAt
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.EmailOptInUpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Profile PreferredLanguage.
             * @member {string} PreferredLanguage
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.PreferredLanguage = "";

            /**
             * Profile Username.
             * @member {string} Username
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.Username = "";

            /**
             * Profile CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Profile UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Profile CreatorInfo.
             * @member {pubg.globalaccounts.ICreatorInfo|null|undefined} CreatorInfo
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.CreatorInfo = null;

            /**
             * Profile PromoCodes.
             * @member {Object.<string,string>} PromoCodes
             * @memberof pubg.globalaccounts.Profile
             * @instance
             */
            Profile.prototype.PromoCodes = $util.emptyObject;

            /**
             * Creates a new Profile instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {pubg.globalaccounts.IProfile=} [properties] Properties to set
             * @returns {pubg.globalaccounts.Profile} Profile instance
             */
            Profile.create = function create(properties) {
                return new Profile(properties);
            };

            /**
             * Encodes the specified Profile message. Does not implicitly {@link pubg.globalaccounts.Profile.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {pubg.globalaccounts.IProfile} message Profile message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Profile.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ProviderID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.DisplayName);
                if (message.Country != null && message.hasOwnProperty("Country"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Country);
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.DateOfBirth);
                if (message.Email != null && message.hasOwnProperty("Email"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.Email);
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.EmailOptIn);
                if (message.ToSAccepted != null && message.hasOwnProperty("ToSAccepted"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.ToSAccepted);
                if (message.EmailOptInUpdatedAt != null && message.hasOwnProperty("EmailOptInUpdatedAt"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.EmailOptInUpdatedAt);
                if (message.PreferredLanguage != null && message.hasOwnProperty("PreferredLanguage"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.PreferredLanguage);
                if (message.Username != null && message.hasOwnProperty("Username"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.Username);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 12, wireType 0 =*/96).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 13, wireType 0 =*/104).int64(message.UpdatedAt);
                if (message.CreatorInfo != null && message.hasOwnProperty("CreatorInfo"))
                    $root.pubg.globalaccounts.CreatorInfo.encode(message.CreatorInfo, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.PromoCodes != null && message.hasOwnProperty("PromoCodes"))
                    for (var keys = Object.keys(message.PromoCodes), i = 0; i < keys.length; ++i)
                        writer.uint32(/* id 15, wireType 2 =*/122).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.PromoCodes[keys[i]]).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Profile message, length delimited. Does not implicitly {@link pubg.globalaccounts.Profile.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {pubg.globalaccounts.IProfile} message Profile message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Profile.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Profile message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.Profile} Profile
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Profile.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.Profile(), key;
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.ProviderID = reader.string();
                        break;
                    case 3:
                        message.DisplayName = reader.string();
                        break;
                    case 4:
                        message.Country = reader.string();
                        break;
                    case 5:
                        message.DateOfBirth = reader.int64();
                        break;
                    case 6:
                        message.Email = reader.string();
                        break;
                    case 7:
                        message.EmailOptIn = reader.bool();
                        break;
                    case 8:
                        message.ToSAccepted = reader.bool();
                        break;
                    case 9:
                        message.EmailOptInUpdatedAt = reader.int64();
                        break;
                    case 10:
                        message.PreferredLanguage = reader.string();
                        break;
                    case 11:
                        message.Username = reader.string();
                        break;
                    case 12:
                        message.CreatedAt = reader.int64();
                        break;
                    case 13:
                        message.UpdatedAt = reader.int64();
                        break;
                    case 14:
                        message.CreatorInfo = $root.pubg.globalaccounts.CreatorInfo.decode(reader, reader.uint32());
                        break;
                    case 15:
                        reader.skip().pos++;
                        if (message.PromoCodes === $util.emptyObject)
                            message.PromoCodes = {};
                        key = reader.string();
                        reader.pos++;
                        message.PromoCodes[key] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Profile message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.Profile} Profile
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Profile.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Profile message.
             * @function verify
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Profile.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    if (!$util.isString(message.ProviderID))
                        return "ProviderID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.Country != null && message.hasOwnProperty("Country"))
                    if (!$util.isString(message.Country))
                        return "Country: string expected";
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    if (!$util.isInteger(message.DateOfBirth) && !(message.DateOfBirth && $util.isInteger(message.DateOfBirth.low) && $util.isInteger(message.DateOfBirth.high)))
                        return "DateOfBirth: integer|Long expected";
                if (message.Email != null && message.hasOwnProperty("Email"))
                    if (!$util.isString(message.Email))
                        return "Email: string expected";
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    if (typeof message.EmailOptIn !== "boolean")
                        return "EmailOptIn: boolean expected";
                if (message.ToSAccepted != null && message.hasOwnProperty("ToSAccepted"))
                    if (typeof message.ToSAccepted !== "boolean")
                        return "ToSAccepted: boolean expected";
                if (message.EmailOptInUpdatedAt != null && message.hasOwnProperty("EmailOptInUpdatedAt"))
                    if (!$util.isInteger(message.EmailOptInUpdatedAt) && !(message.EmailOptInUpdatedAt && $util.isInteger(message.EmailOptInUpdatedAt.low) && $util.isInteger(message.EmailOptInUpdatedAt.high)))
                        return "EmailOptInUpdatedAt: integer|Long expected";
                if (message.PreferredLanguage != null && message.hasOwnProperty("PreferredLanguage"))
                    if (!$util.isString(message.PreferredLanguage))
                        return "PreferredLanguage: string expected";
                if (message.Username != null && message.hasOwnProperty("Username"))
                    if (!$util.isString(message.Username))
                        return "Username: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                if (message.CreatorInfo != null && message.hasOwnProperty("CreatorInfo")) {
                    var error = $root.pubg.globalaccounts.CreatorInfo.verify(message.CreatorInfo);
                    if (error)
                        return "CreatorInfo." + error;
                }
                if (message.PromoCodes != null && message.hasOwnProperty("PromoCodes")) {
                    if (!$util.isObject(message.PromoCodes))
                        return "PromoCodes: object expected";
                    var key = Object.keys(message.PromoCodes);
                    for (var i = 0; i < key.length; ++i)
                        if (!$util.isString(message.PromoCodes[key[i]]))
                            return "PromoCodes: string{k:string} expected";
                }
                return null;
            };

            /**
             * Creates a Profile message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.Profile} Profile
             */
            Profile.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.Profile)
                    return object;
                var message = new $root.pubg.globalaccounts.Profile();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.ProviderID != null)
                    message.ProviderID = String(object.ProviderID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.Country != null)
                    message.Country = String(object.Country);
                if (object.DateOfBirth != null)
                    if ($util.Long)
                        (message.DateOfBirth = $util.Long.fromValue(object.DateOfBirth)).unsigned = false;
                    else if (typeof object.DateOfBirth === "string")
                        message.DateOfBirth = parseInt(object.DateOfBirth, 10);
                    else if (typeof object.DateOfBirth === "number")
                        message.DateOfBirth = object.DateOfBirth;
                    else if (typeof object.DateOfBirth === "object")
                        message.DateOfBirth = new $util.LongBits(object.DateOfBirth.low >>> 0, object.DateOfBirth.high >>> 0).toNumber();
                if (object.Email != null)
                    message.Email = String(object.Email);
                if (object.EmailOptIn != null)
                    message.EmailOptIn = Boolean(object.EmailOptIn);
                if (object.ToSAccepted != null)
                    message.ToSAccepted = Boolean(object.ToSAccepted);
                if (object.EmailOptInUpdatedAt != null)
                    if ($util.Long)
                        (message.EmailOptInUpdatedAt = $util.Long.fromValue(object.EmailOptInUpdatedAt)).unsigned = false;
                    else if (typeof object.EmailOptInUpdatedAt === "string")
                        message.EmailOptInUpdatedAt = parseInt(object.EmailOptInUpdatedAt, 10);
                    else if (typeof object.EmailOptInUpdatedAt === "number")
                        message.EmailOptInUpdatedAt = object.EmailOptInUpdatedAt;
                    else if (typeof object.EmailOptInUpdatedAt === "object")
                        message.EmailOptInUpdatedAt = new $util.LongBits(object.EmailOptInUpdatedAt.low >>> 0, object.EmailOptInUpdatedAt.high >>> 0).toNumber();
                if (object.PreferredLanguage != null)
                    message.PreferredLanguage = String(object.PreferredLanguage);
                if (object.Username != null)
                    message.Username = String(object.Username);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                if (object.CreatorInfo != null) {
                    if (typeof object.CreatorInfo !== "object")
                        throw TypeError(".pubg.globalaccounts.Profile.CreatorInfo: object expected");
                    message.CreatorInfo = $root.pubg.globalaccounts.CreatorInfo.fromObject(object.CreatorInfo);
                }
                if (object.PromoCodes) {
                    if (typeof object.PromoCodes !== "object")
                        throw TypeError(".pubg.globalaccounts.Profile.PromoCodes: object expected");
                    message.PromoCodes = {};
                    for (var keys = Object.keys(object.PromoCodes), i = 0; i < keys.length; ++i)
                        message.PromoCodes[keys[i]] = String(object.PromoCodes[keys[i]]);
                }
                return message;
            };

            /**
             * Creates a plain object from a Profile message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.Profile
             * @static
             * @param {pubg.globalaccounts.Profile} message Profile
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Profile.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.objects || options.defaults)
                    object.PromoCodes = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.ProviderID = "";
                    object.DisplayName = "";
                    object.Country = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.DateOfBirth = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.DateOfBirth = options.longs === String ? "0" : 0;
                    object.Email = "";
                    object.EmailOptIn = false;
                    object.ToSAccepted = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.EmailOptInUpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.EmailOptInUpdatedAt = options.longs === String ? "0" : 0;
                    object.PreferredLanguage = "";
                    object.Username = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                    object.CreatorInfo = null;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.ProviderID != null && message.hasOwnProperty("ProviderID"))
                    object.ProviderID = message.ProviderID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.Country != null && message.hasOwnProperty("Country"))
                    object.Country = message.Country;
                if (message.DateOfBirth != null && message.hasOwnProperty("DateOfBirth"))
                    if (typeof message.DateOfBirth === "number")
                        object.DateOfBirth = options.longs === String ? String(message.DateOfBirth) : message.DateOfBirth;
                    else
                        object.DateOfBirth = options.longs === String ? $util.Long.prototype.toString.call(message.DateOfBirth) : options.longs === Number ? new $util.LongBits(message.DateOfBirth.low >>> 0, message.DateOfBirth.high >>> 0).toNumber() : message.DateOfBirth;
                if (message.Email != null && message.hasOwnProperty("Email"))
                    object.Email = message.Email;
                if (message.EmailOptIn != null && message.hasOwnProperty("EmailOptIn"))
                    object.EmailOptIn = message.EmailOptIn;
                if (message.ToSAccepted != null && message.hasOwnProperty("ToSAccepted"))
                    object.ToSAccepted = message.ToSAccepted;
                if (message.EmailOptInUpdatedAt != null && message.hasOwnProperty("EmailOptInUpdatedAt"))
                    if (typeof message.EmailOptInUpdatedAt === "number")
                        object.EmailOptInUpdatedAt = options.longs === String ? String(message.EmailOptInUpdatedAt) : message.EmailOptInUpdatedAt;
                    else
                        object.EmailOptInUpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.EmailOptInUpdatedAt) : options.longs === Number ? new $util.LongBits(message.EmailOptInUpdatedAt.low >>> 0, message.EmailOptInUpdatedAt.high >>> 0).toNumber() : message.EmailOptInUpdatedAt;
                if (message.PreferredLanguage != null && message.hasOwnProperty("PreferredLanguage"))
                    object.PreferredLanguage = message.PreferredLanguage;
                if (message.Username != null && message.hasOwnProperty("Username"))
                    object.Username = message.Username;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                if (message.CreatorInfo != null && message.hasOwnProperty("CreatorInfo"))
                    object.CreatorInfo = $root.pubg.globalaccounts.CreatorInfo.toObject(message.CreatorInfo, options);
                var keys2;
                if (message.PromoCodes && (keys2 = Object.keys(message.PromoCodes)).length) {
                    object.PromoCodes = {};
                    for (var j = 0; j < keys2.length; ++j)
                        object.PromoCodes[keys2[j]] = message.PromoCodes[keys2[j]];
                }
                return object;
            };

            /**
             * Converts this Profile to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.Profile
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Profile.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Profile;
        })();

        globalaccounts.PrevTwitch = (function() {

            /**
             * Properties of a PrevTwitch.
             * @memberof pubg.globalaccounts
             * @interface IPrevTwitch
             * @property {string|null} [ID] PrevTwitch ID
             * @property {string|null} [DisplayName] PrevTwitch DisplayName
             */

            /**
             * Constructs a new PrevTwitch.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PrevTwitch.
             * @implements IPrevTwitch
             * @constructor
             * @param {pubg.globalaccounts.IPrevTwitch=} [properties] Properties to set
             */
            function PrevTwitch(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PrevTwitch ID.
             * @member {string} ID
             * @memberof pubg.globalaccounts.PrevTwitch
             * @instance
             */
            PrevTwitch.prototype.ID = "";

            /**
             * PrevTwitch DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.PrevTwitch
             * @instance
             */
            PrevTwitch.prototype.DisplayName = "";

            /**
             * Creates a new PrevTwitch instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {pubg.globalaccounts.IPrevTwitch=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PrevTwitch} PrevTwitch instance
             */
            PrevTwitch.create = function create(properties) {
                return new PrevTwitch(properties);
            };

            /**
             * Encodes the specified PrevTwitch message. Does not implicitly {@link pubg.globalaccounts.PrevTwitch.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {pubg.globalaccounts.IPrevTwitch} message PrevTwitch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrevTwitch.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ID != null && message.hasOwnProperty("ID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.ID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                return writer;
            };

            /**
             * Encodes the specified PrevTwitch message, length delimited. Does not implicitly {@link pubg.globalaccounts.PrevTwitch.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {pubg.globalaccounts.IPrevTwitch} message PrevTwitch message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PrevTwitch.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PrevTwitch message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PrevTwitch} PrevTwitch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrevTwitch.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PrevTwitch();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PrevTwitch message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PrevTwitch} PrevTwitch
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PrevTwitch.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PrevTwitch message.
             * @function verify
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PrevTwitch.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ID != null && message.hasOwnProperty("ID"))
                    if (!$util.isString(message.ID))
                        return "ID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                return null;
            };

            /**
             * Creates a PrevTwitch message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PrevTwitch} PrevTwitch
             */
            PrevTwitch.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PrevTwitch)
                    return object;
                var message = new $root.pubg.globalaccounts.PrevTwitch();
                if (object.ID != null)
                    message.ID = String(object.ID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                return message;
            };

            /**
             * Creates a plain object from a PrevTwitch message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PrevTwitch
             * @static
             * @param {pubg.globalaccounts.PrevTwitch} message PrevTwitch
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PrevTwitch.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.ID = "";
                    object.DisplayName = "";
                }
                if (message.ID != null && message.hasOwnProperty("ID"))
                    object.ID = message.ID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                return object;
            };

            /**
             * Converts this PrevTwitch to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PrevTwitch
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PrevTwitch.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PrevTwitch;
        })();

        globalaccounts.CreatorInfo = (function() {

            /**
             * Properties of a CreatorInfo.
             * @memberof pubg.globalaccounts
             * @interface ICreatorInfo
             * @property {string|null} [CreatorCode] CreatorInfo CreatorCode
             * @property {string|null} [CreatorName] CreatorInfo CreatorName
             * @property {number|Long|null} [UpdatedAt] CreatorInfo UpdatedAt
             */

            /**
             * Constructs a new CreatorInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a CreatorInfo.
             * @implements ICreatorInfo
             * @constructor
             * @param {pubg.globalaccounts.ICreatorInfo=} [properties] Properties to set
             */
            function CreatorInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreatorInfo CreatorCode.
             * @member {string} CreatorCode
             * @memberof pubg.globalaccounts.CreatorInfo
             * @instance
             */
            CreatorInfo.prototype.CreatorCode = "";

            /**
             * CreatorInfo CreatorName.
             * @member {string} CreatorName
             * @memberof pubg.globalaccounts.CreatorInfo
             * @instance
             */
            CreatorInfo.prototype.CreatorName = "";

            /**
             * CreatorInfo UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.CreatorInfo
             * @instance
             */
            CreatorInfo.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new CreatorInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {pubg.globalaccounts.ICreatorInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.CreatorInfo} CreatorInfo instance
             */
            CreatorInfo.create = function create(properties) {
                return new CreatorInfo(properties);
            };

            /**
             * Encodes the specified CreatorInfo message. Does not implicitly {@link pubg.globalaccounts.CreatorInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {pubg.globalaccounts.ICreatorInfo} message CreatorInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreatorInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.CreatorCode != null && message.hasOwnProperty("CreatorCode"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.CreatorCode);
                if (message.CreatorName != null && message.hasOwnProperty("CreatorName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.CreatorName);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.UpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified CreatorInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.CreatorInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {pubg.globalaccounts.ICreatorInfo} message CreatorInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreatorInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreatorInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.CreatorInfo} CreatorInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreatorInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.CreatorInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.CreatorCode = reader.string();
                        break;
                    case 2:
                        message.CreatorName = reader.string();
                        break;
                    case 3:
                        message.UpdatedAt = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CreatorInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.CreatorInfo} CreatorInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreatorInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreatorInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreatorInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.CreatorCode != null && message.hasOwnProperty("CreatorCode"))
                    if (!$util.isString(message.CreatorCode))
                        return "CreatorCode: string expected";
                if (message.CreatorName != null && message.hasOwnProperty("CreatorName"))
                    if (!$util.isString(message.CreatorName))
                        return "CreatorName: string expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                return null;
            };

            /**
             * Creates a CreatorInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.CreatorInfo} CreatorInfo
             */
            CreatorInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.CreatorInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.CreatorInfo();
                if (object.CreatorCode != null)
                    message.CreatorCode = String(object.CreatorCode);
                if (object.CreatorName != null)
                    message.CreatorName = String(object.CreatorName);
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a CreatorInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.CreatorInfo
             * @static
             * @param {pubg.globalaccounts.CreatorInfo} message CreatorInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreatorInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.CreatorCode = "";
                    object.CreatorName = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                }
                if (message.CreatorCode != null && message.hasOwnProperty("CreatorCode"))
                    object.CreatorCode = message.CreatorCode;
                if (message.CreatorName != null && message.hasOwnProperty("CreatorName"))
                    object.CreatorName = message.CreatorName;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                return object;
            };

            /**
             * Converts this CreatorInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.CreatorInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreatorInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CreatorInfo;
        })();

        globalaccounts.AccessLog = (function() {

            /**
             * Properties of an AccessLog.
             * @memberof pubg.globalaccounts
             * @interface IAccessLog
             * @property {string|null} [SessionID] AccessLog SessionID
             * @property {number|Long|null} [Timestamp] AccessLog Timestamp
             * @property {string|null} [Browser] AccessLog Browser
             * @property {string|null} [Os] AccessLog Os
             * @property {string|null} [Country] AccessLog Country
             * @property {string|null} [IP] AccessLog IP
             * @property {boolean|null} [CurrentUser] AccessLog CurrentUser
             */

            /**
             * Constructs a new AccessLog.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an AccessLog.
             * @implements IAccessLog
             * @constructor
             * @param {pubg.globalaccounts.IAccessLog=} [properties] Properties to set
             */
            function AccessLog(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AccessLog SessionID.
             * @member {string} SessionID
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.SessionID = "";

            /**
             * AccessLog Timestamp.
             * @member {number|Long} Timestamp
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.Timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * AccessLog Browser.
             * @member {string} Browser
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.Browser = "";

            /**
             * AccessLog Os.
             * @member {string} Os
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.Os = "";

            /**
             * AccessLog Country.
             * @member {string} Country
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.Country = "";

            /**
             * AccessLog IP.
             * @member {string} IP
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.IP = "";

            /**
             * AccessLog CurrentUser.
             * @member {boolean} CurrentUser
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             */
            AccessLog.prototype.CurrentUser = false;

            /**
             * Creates a new AccessLog instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {pubg.globalaccounts.IAccessLog=} [properties] Properties to set
             * @returns {pubg.globalaccounts.AccessLog} AccessLog instance
             */
            AccessLog.create = function create(properties) {
                return new AccessLog(properties);
            };

            /**
             * Encodes the specified AccessLog message. Does not implicitly {@link pubg.globalaccounts.AccessLog.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {pubg.globalaccounts.IAccessLog} message AccessLog message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccessLog.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.SessionID != null && message.hasOwnProperty("SessionID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.SessionID);
                if (message.Timestamp != null && message.hasOwnProperty("Timestamp"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.Timestamp);
                if (message.Browser != null && message.hasOwnProperty("Browser"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Browser);
                if (message.Os != null && message.hasOwnProperty("Os"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.Os);
                if (message.Country != null && message.hasOwnProperty("Country"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.Country);
                if (message.IP != null && message.hasOwnProperty("IP"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.IP);
                if (message.CurrentUser != null && message.hasOwnProperty("CurrentUser"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.CurrentUser);
                return writer;
            };

            /**
             * Encodes the specified AccessLog message, length delimited. Does not implicitly {@link pubg.globalaccounts.AccessLog.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {pubg.globalaccounts.IAccessLog} message AccessLog message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccessLog.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AccessLog message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.AccessLog} AccessLog
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccessLog.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.AccessLog();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.SessionID = reader.string();
                        break;
                    case 2:
                        message.Timestamp = reader.int64();
                        break;
                    case 3:
                        message.Browser = reader.string();
                        break;
                    case 4:
                        message.Os = reader.string();
                        break;
                    case 5:
                        message.Country = reader.string();
                        break;
                    case 6:
                        message.IP = reader.string();
                        break;
                    case 7:
                        message.CurrentUser = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AccessLog message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.AccessLog} AccessLog
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccessLog.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AccessLog message.
             * @function verify
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AccessLog.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.SessionID != null && message.hasOwnProperty("SessionID"))
                    if (!$util.isString(message.SessionID))
                        return "SessionID: string expected";
                if (message.Timestamp != null && message.hasOwnProperty("Timestamp"))
                    if (!$util.isInteger(message.Timestamp) && !(message.Timestamp && $util.isInteger(message.Timestamp.low) && $util.isInteger(message.Timestamp.high)))
                        return "Timestamp: integer|Long expected";
                if (message.Browser != null && message.hasOwnProperty("Browser"))
                    if (!$util.isString(message.Browser))
                        return "Browser: string expected";
                if (message.Os != null && message.hasOwnProperty("Os"))
                    if (!$util.isString(message.Os))
                        return "Os: string expected";
                if (message.Country != null && message.hasOwnProperty("Country"))
                    if (!$util.isString(message.Country))
                        return "Country: string expected";
                if (message.IP != null && message.hasOwnProperty("IP"))
                    if (!$util.isString(message.IP))
                        return "IP: string expected";
                if (message.CurrentUser != null && message.hasOwnProperty("CurrentUser"))
                    if (typeof message.CurrentUser !== "boolean")
                        return "CurrentUser: boolean expected";
                return null;
            };

            /**
             * Creates an AccessLog message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.AccessLog} AccessLog
             */
            AccessLog.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.AccessLog)
                    return object;
                var message = new $root.pubg.globalaccounts.AccessLog();
                if (object.SessionID != null)
                    message.SessionID = String(object.SessionID);
                if (object.Timestamp != null)
                    if ($util.Long)
                        (message.Timestamp = $util.Long.fromValue(object.Timestamp)).unsigned = false;
                    else if (typeof object.Timestamp === "string")
                        message.Timestamp = parseInt(object.Timestamp, 10);
                    else if (typeof object.Timestamp === "number")
                        message.Timestamp = object.Timestamp;
                    else if (typeof object.Timestamp === "object")
                        message.Timestamp = new $util.LongBits(object.Timestamp.low >>> 0, object.Timestamp.high >>> 0).toNumber();
                if (object.Browser != null)
                    message.Browser = String(object.Browser);
                if (object.Os != null)
                    message.Os = String(object.Os);
                if (object.Country != null)
                    message.Country = String(object.Country);
                if (object.IP != null)
                    message.IP = String(object.IP);
                if (object.CurrentUser != null)
                    message.CurrentUser = Boolean(object.CurrentUser);
                return message;
            };

            /**
             * Creates a plain object from an AccessLog message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.AccessLog
             * @static
             * @param {pubg.globalaccounts.AccessLog} message AccessLog
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AccessLog.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.SessionID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Timestamp = options.longs === String ? "0" : 0;
                    object.Browser = "";
                    object.Os = "";
                    object.Country = "";
                    object.IP = "";
                    object.CurrentUser = false;
                }
                if (message.SessionID != null && message.hasOwnProperty("SessionID"))
                    object.SessionID = message.SessionID;
                if (message.Timestamp != null && message.hasOwnProperty("Timestamp"))
                    if (typeof message.Timestamp === "number")
                        object.Timestamp = options.longs === String ? String(message.Timestamp) : message.Timestamp;
                    else
                        object.Timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.Timestamp) : options.longs === Number ? new $util.LongBits(message.Timestamp.low >>> 0, message.Timestamp.high >>> 0).toNumber() : message.Timestamp;
                if (message.Browser != null && message.hasOwnProperty("Browser"))
                    object.Browser = message.Browser;
                if (message.Os != null && message.hasOwnProperty("Os"))
                    object.Os = message.Os;
                if (message.Country != null && message.hasOwnProperty("Country"))
                    object.Country = message.Country;
                if (message.IP != null && message.hasOwnProperty("IP"))
                    object.IP = message.IP;
                if (message.CurrentUser != null && message.hasOwnProperty("CurrentUser"))
                    object.CurrentUser = message.CurrentUser;
                return object;
            };

            /**
             * Converts this AccessLog to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.AccessLog
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AccessLog.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AccessLog;
        })();

        globalaccounts.AccessLogResponse = (function() {

            /**
             * Properties of an AccessLogResponse.
             * @memberof pubg.globalaccounts
             * @interface IAccessLogResponse
             * @property {pubg.globalaccounts.BackendErrCode|null} [Code] AccessLogResponse Code
             * @property {string|null} [Message] AccessLogResponse Message
             * @property {Array.<pubg.globalaccounts.IAccessLog>|null} [ActivedAccessLogs] AccessLogResponse ActivedAccessLogs
             * @property {Array.<pubg.globalaccounts.IAccessLog>|null} [AccessLogs] AccessLogResponse AccessLogs
             */

            /**
             * Constructs a new AccessLogResponse.
             * @memberof pubg.globalaccounts
             * @classdesc Represents an AccessLogResponse.
             * @implements IAccessLogResponse
             * @constructor
             * @param {pubg.globalaccounts.IAccessLogResponse=} [properties] Properties to set
             */
            function AccessLogResponse(properties) {
                this.ActivedAccessLogs = [];
                this.AccessLogs = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AccessLogResponse Code.
             * @member {pubg.globalaccounts.BackendErrCode} Code
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @instance
             */
            AccessLogResponse.prototype.Code = 0;

            /**
             * AccessLogResponse Message.
             * @member {string} Message
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @instance
             */
            AccessLogResponse.prototype.Message = "";

            /**
             * AccessLogResponse ActivedAccessLogs.
             * @member {Array.<pubg.globalaccounts.IAccessLog>} ActivedAccessLogs
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @instance
             */
            AccessLogResponse.prototype.ActivedAccessLogs = $util.emptyArray;

            /**
             * AccessLogResponse AccessLogs.
             * @member {Array.<pubg.globalaccounts.IAccessLog>} AccessLogs
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @instance
             */
            AccessLogResponse.prototype.AccessLogs = $util.emptyArray;

            /**
             * Creates a new AccessLogResponse instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {pubg.globalaccounts.IAccessLogResponse=} [properties] Properties to set
             * @returns {pubg.globalaccounts.AccessLogResponse} AccessLogResponse instance
             */
            AccessLogResponse.create = function create(properties) {
                return new AccessLogResponse(properties);
            };

            /**
             * Encodes the specified AccessLogResponse message. Does not implicitly {@link pubg.globalaccounts.AccessLogResponse.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {pubg.globalaccounts.IAccessLogResponse} message AccessLogResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccessLogResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.Code != null && message.hasOwnProperty("Code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Code);
                if (message.Message != null && message.hasOwnProperty("Message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Message);
                if (message.ActivedAccessLogs != null && message.ActivedAccessLogs.length)
                    for (var i = 0; i < message.ActivedAccessLogs.length; ++i)
                        $root.pubg.globalaccounts.AccessLog.encode(message.ActivedAccessLogs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.AccessLogs != null && message.AccessLogs.length)
                    for (var i = 0; i < message.AccessLogs.length; ++i)
                        $root.pubg.globalaccounts.AccessLog.encode(message.AccessLogs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified AccessLogResponse message, length delimited. Does not implicitly {@link pubg.globalaccounts.AccessLogResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {pubg.globalaccounts.IAccessLogResponse} message AccessLogResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AccessLogResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AccessLogResponse message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.AccessLogResponse} AccessLogResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccessLogResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.AccessLogResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.Code = reader.int32();
                        break;
                    case 2:
                        message.Message = reader.string();
                        break;
                    case 3:
                        if (!(message.ActivedAccessLogs && message.ActivedAccessLogs.length))
                            message.ActivedAccessLogs = [];
                        message.ActivedAccessLogs.push($root.pubg.globalaccounts.AccessLog.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.AccessLogs && message.AccessLogs.length))
                            message.AccessLogs = [];
                        message.AccessLogs.push($root.pubg.globalaccounts.AccessLog.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AccessLogResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.AccessLogResponse} AccessLogResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AccessLogResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AccessLogResponse message.
             * @function verify
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AccessLogResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.Code != null && message.hasOwnProperty("Code"))
                    switch (message.Code) {
                    default:
                        return "Code: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 200:
                        break;
                    }
                if (message.Message != null && message.hasOwnProperty("Message"))
                    if (!$util.isString(message.Message))
                        return "Message: string expected";
                if (message.ActivedAccessLogs != null && message.hasOwnProperty("ActivedAccessLogs")) {
                    if (!Array.isArray(message.ActivedAccessLogs))
                        return "ActivedAccessLogs: array expected";
                    for (var i = 0; i < message.ActivedAccessLogs.length; ++i) {
                        var error = $root.pubg.globalaccounts.AccessLog.verify(message.ActivedAccessLogs[i]);
                        if (error)
                            return "ActivedAccessLogs." + error;
                    }
                }
                if (message.AccessLogs != null && message.hasOwnProperty("AccessLogs")) {
                    if (!Array.isArray(message.AccessLogs))
                        return "AccessLogs: array expected";
                    for (var i = 0; i < message.AccessLogs.length; ++i) {
                        var error = $root.pubg.globalaccounts.AccessLog.verify(message.AccessLogs[i]);
                        if (error)
                            return "AccessLogs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an AccessLogResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.AccessLogResponse} AccessLogResponse
             */
            AccessLogResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.AccessLogResponse)
                    return object;
                var message = new $root.pubg.globalaccounts.AccessLogResponse();
                switch (object.Code) {
                case "ErrAccountByIDNotFound":
                case 0:
                    message.Code = 0;
                    break;
                case "ErrAccountByGUIDNotFound":
                case 1:
                    message.Code = 1;
                    break;
                case "ErrAccountByEmailNotFound":
                case 2:
                    message.Code = 2;
                    break;
                case "ErrAccountByProviderIDNotFound":
                case 3:
                    message.Code = 3;
                    break;
                case "ErrAccountDeactivated":
                case 4:
                    message.Code = 4;
                    break;
                case "ErrAccountActivated":
                case 5:
                    message.Code = 5;
                    break;
                case "ErrAccountOnHold":
                case 6:
                    message.Code = 6;
                    break;
                case "ErrInvalidRefreshToken":
                case 7:
                    message.Code = 7;
                    break;
                case "ErrInvalidActivationToken":
                case 8:
                    message.Code = 8;
                    break;
                case "ErrFailedEmailValidation":
                case 9:
                    message.Code = 9;
                    break;
                case "ErrLocalAuthResetPasswordInvalidOldPassword":
                case 10:
                    message.Code = 10;
                    break;
                case "ErrLocalAuthSetPasswordInvalidFormat":
                case 11:
                    message.Code = 11;
                    break;
                case "ErrCouldNotDeleteAccount":
                case 12:
                    message.Code = 12;
                    break;
                case "ErrFailedUpdateEmailOptIn":
                case 13:
                    message.Code = 13;
                    break;
                case "ErrFailedUpdatePersona":
                case 14:
                    message.Code = 14;
                    break;
                case "ErrInvaildProvider":
                case 15:
                    message.Code = 15;
                    break;
                case "ErrFailedCreateLink":
                case 16:
                    message.Code = 16;
                    break;
                case "ErrFailedDeleteLink":
                case 17:
                    message.Code = 17;
                    break;
                case "ErrCouldnotConvertAuth":
                case 18:
                    message.Code = 18;
                    break;
                case "ErrEmailDomainNotWhitelisted":
                case 19:
                    message.Code = 19;
                    break;
                case "ErrTOSNotAccepted":
                case 20:
                    message.Code = 20;
                    break;
                case "ErrInvalidDOB":
                case 21:
                    message.Code = 21;
                    break;
                case "ErrInvalidEmailConfirm":
                case 22:
                    message.Code = 22;
                    break;
                case "ErrInvalidPassword":
                case 23:
                    message.Code = 23;
                    break;
                case "ErrInvalidPasswordConfirm":
                case 24:
                    message.Code = 24;
                    break;
                case "ErrAccountAlreadyExists":
                case 25:
                    message.Code = 25;
                    break;
                case "ErrIncorrectPassword":
                case 26:
                    message.Code = 26;
                    break;
                case "ErrAccountIsArealdyOnHolded":
                case 27:
                    message.Code = 27;
                    break;
                case "ErrFailedUpdateOnHold":
                case 28:
                    message.Code = 28;
                    break;
                case "ErrFailedUpdateLocked":
                case 29:
                    message.Code = 29;
                    break;
                case "ErrAccountLocked":
                case 30:
                    message.Code = 30;
                    break;
                case "ErrAccountUnconfirmed":
                case 31:
                    message.Code = 31;
                    break;
                case "ErrAccountAlreadyLinked":
                case 32:
                    message.Code = 32;
                    break;
                case "ErrLitePCLauncherRegistrationDisabled":
                case 33:
                    message.Code = 33;
                    break;
                case "ErrInvalidLinkInfo":
                case 34:
                    message.Code = 34;
                    break;
                case "ErrEmailChangeNewEmailSameAsOld":
                case 35:
                    message.Code = 35;
                    break;
                case "ErrEmailChangeNewEmailAlreadyRegistered":
                case 36:
                    message.Code = 36;
                    break;
                case "ErrEmailChangeOldEmailAlreadyChanged":
                case 37:
                    message.Code = 37;
                    break;
                case "ErrEmailChangeInvalidToken":
                case 38:
                    message.Code = 38;
                    break;
                case "ErrPasswordResetInvalidToken":
                case 39:
                    message.Code = 39;
                    break;
                case "ErrLinkInfoMissing":
                case 40:
                    message.Code = 40;
                    break;
                case "ErrProviderAccountNotFound":
                case 41:
                    message.Code = 41;
                    break;
                case "ErrTSLProxyRequestFail":
                case 42:
                    message.Code = 42;
                    break;
                case "ErrTSLPlatformAccountUnmarshalFail":
                case 43:
                    message.Code = 43;
                    break;
                case "ErrTSLPlatformAccountEmptyResponse":
                case 44:
                    message.Code = 44;
                    break;
                case "ErrTSLPlatformAccountSummaryNotFound":
                case 45:
                    message.Code = 45;
                    break;
                case "ErrTSLPlatformAccountSummaryMissingData":
                case 46:
                    message.Code = 46;
                    break;
                case "ErrAccountRecentlyUnlinked":
                case 47:
                    message.Code = 47;
                    break;
                case "ErrTooManyRequestByIp":
                case 48:
                    message.Code = 48;
                    break;
                case "ErrTooManyRequestByLogin":
                case 49:
                    message.Code = 49;
                    break;
                case "ErrTooManyRequestByForgotPassword":
                case 50:
                    message.Code = 50;
                    break;
                case "ErrNoPlatformsLinked":
                case 51:
                    message.Code = 51;
                    break;
                case "ErrInvalidUsername":
                case 52:
                    message.Code = 52;
                    break;
                case "ErrUsernameTaken":
                case 53:
                    message.Code = 53;
                    break;
                case "ErrAccountByUsernameNotFound":
                case 54:
                    message.Code = 54;
                    break;
                case "ErrUsernameAlreadySet":
                case 55:
                    message.Code = 55;
                    break;
                case "ErrInvalidCountry":
                case 56:
                    message.Code = 56;
                    break;
                case "ErrMagicLinkCodeInvalid":
                case 57:
                    message.Code = 57;
                    break;
                case "ErrMagicLinkNotComplete":
                case 58:
                    message.Code = 58;
                    break;
                case "ErrInvalidCreatorCode":
                case 59:
                    message.Code = 59;
                    break;
                case "ErrProviderLocked":
                case 60:
                    message.Code = 60;
                    break;
                case "ErrTooManyRequestByChangeEmail":
                case 61:
                    message.Code = 61;
                    break;
                case "ErrCouldNotGetIpLogs":
                case 62:
                    message.Code = 62;
                    break;
                case "ErrCouldNotGetSessionLogs":
                case 63:
                    message.Code = 63;
                    break;
                case "ErrCreatorCodeRequired":
                case 64:
                    message.Code = 64;
                    break;
                case "ErrPromotionNotFound":
                case 65:
                    message.Code = 65;
                    break;
                case "ErrPromotionNotActive":
                case 66:
                    message.Code = 66;
                    break;
                case "ErrPromotionNoCodesAvailable":
                case 67:
                    message.Code = 67;
                    break;
                case "Success":
                case 200:
                    message.Code = 200;
                    break;
                }
                if (object.Message != null)
                    message.Message = String(object.Message);
                if (object.ActivedAccessLogs) {
                    if (!Array.isArray(object.ActivedAccessLogs))
                        throw TypeError(".pubg.globalaccounts.AccessLogResponse.ActivedAccessLogs: array expected");
                    message.ActivedAccessLogs = [];
                    for (var i = 0; i < object.ActivedAccessLogs.length; ++i) {
                        if (typeof object.ActivedAccessLogs[i] !== "object")
                            throw TypeError(".pubg.globalaccounts.AccessLogResponse.ActivedAccessLogs: object expected");
                        message.ActivedAccessLogs[i] = $root.pubg.globalaccounts.AccessLog.fromObject(object.ActivedAccessLogs[i]);
                    }
                }
                if (object.AccessLogs) {
                    if (!Array.isArray(object.AccessLogs))
                        throw TypeError(".pubg.globalaccounts.AccessLogResponse.AccessLogs: array expected");
                    message.AccessLogs = [];
                    for (var i = 0; i < object.AccessLogs.length; ++i) {
                        if (typeof object.AccessLogs[i] !== "object")
                            throw TypeError(".pubg.globalaccounts.AccessLogResponse.AccessLogs: object expected");
                        message.AccessLogs[i] = $root.pubg.globalaccounts.AccessLog.fromObject(object.AccessLogs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an AccessLogResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @static
             * @param {pubg.globalaccounts.AccessLogResponse} message AccessLogResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AccessLogResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.ActivedAccessLogs = [];
                    object.AccessLogs = [];
                }
                if (options.defaults) {
                    object.Code = options.enums === String ? "ErrAccountByIDNotFound" : 0;
                    object.Message = "";
                }
                if (message.Code != null && message.hasOwnProperty("Code"))
                    object.Code = options.enums === String ? $root.pubg.globalaccounts.BackendErrCode[message.Code] : message.Code;
                if (message.Message != null && message.hasOwnProperty("Message"))
                    object.Message = message.Message;
                if (message.ActivedAccessLogs && message.ActivedAccessLogs.length) {
                    object.ActivedAccessLogs = [];
                    for (var j = 0; j < message.ActivedAccessLogs.length; ++j)
                        object.ActivedAccessLogs[j] = $root.pubg.globalaccounts.AccessLog.toObject(message.ActivedAccessLogs[j], options);
                }
                if (message.AccessLogs && message.AccessLogs.length) {
                    object.AccessLogs = [];
                    for (var j = 0; j < message.AccessLogs.length; ++j)
                        object.AccessLogs[j] = $root.pubg.globalaccounts.AccessLog.toObject(message.AccessLogs[j], options);
                }
                return object;
            };

            /**
             * Converts this AccessLogResponse to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.AccessLogResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AccessLogResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return AccessLogResponse;
        })();

        globalaccounts.PromotionInfo = (function() {

            /**
             * Properties of a PromotionInfo.
             * @memberof pubg.globalaccounts
             * @interface IPromotionInfo
             * @property {string|null} [PromotionID] PromotionInfo PromotionID
             * @property {string|null} [Name] PromotionInfo Name
             * @property {string|null} [Description] PromotionInfo Description
             * @property {string|null} [ImageURL] PromotionInfo ImageURL
             * @property {string|null} [LinkURL] PromotionInfo LinkURL
             * @property {number|Long|null} [Remaining] PromotionInfo Remaining
             * @property {number|Long|null} [Total] PromotionInfo Total
             * @property {number|Long|null} [StartDate] PromotionInfo StartDate
             * @property {number|Long|null} [EndDate] PromotionInfo EndDate
             * @property {boolean|null} [PreGeneratedCodes] PromotionInfo PreGeneratedCodes
             * @property {string|null} [PromotionType] PromotionInfo PromotionType
             * @property {boolean|null} [ShowCode] PromotionInfo ShowCode
             */

            /**
             * Constructs a new PromotionInfo.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PromotionInfo.
             * @implements IPromotionInfo
             * @constructor
             * @param {pubg.globalaccounts.IPromotionInfo=} [properties] Properties to set
             */
            function PromotionInfo(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PromotionInfo PromotionID.
             * @member {string} PromotionID
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.PromotionID = "";

            /**
             * PromotionInfo Name.
             * @member {string} Name
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.Name = "";

            /**
             * PromotionInfo Description.
             * @member {string} Description
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.Description = "";

            /**
             * PromotionInfo ImageURL.
             * @member {string} ImageURL
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.ImageURL = "";

            /**
             * PromotionInfo LinkURL.
             * @member {string} LinkURL
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.LinkURL = "";

            /**
             * PromotionInfo Remaining.
             * @member {number|Long} Remaining
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.Remaining = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PromotionInfo Total.
             * @member {number|Long} Total
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.Total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PromotionInfo StartDate.
             * @member {number|Long} StartDate
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.StartDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PromotionInfo EndDate.
             * @member {number|Long} EndDate
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.EndDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PromotionInfo PreGeneratedCodes.
             * @member {boolean} PreGeneratedCodes
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.PreGeneratedCodes = false;

            /**
             * PromotionInfo PromotionType.
             * @member {string} PromotionType
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.PromotionType = "";

            /**
             * PromotionInfo ShowCode.
             * @member {boolean} ShowCode
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             */
            PromotionInfo.prototype.ShowCode = false;

            /**
             * Creates a new PromotionInfo instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {pubg.globalaccounts.IPromotionInfo=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PromotionInfo} PromotionInfo instance
             */
            PromotionInfo.create = function create(properties) {
                return new PromotionInfo(properties);
            };

            /**
             * Encodes the specified PromotionInfo message. Does not implicitly {@link pubg.globalaccounts.PromotionInfo.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {pubg.globalaccounts.IPromotionInfo} message PromotionInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PromotionInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.PromotionID != null && message.hasOwnProperty("PromotionID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.PromotionID);
                if (message.Name != null && message.hasOwnProperty("Name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.Name);
                if (message.Description != null && message.hasOwnProperty("Description"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.Description);
                if (message.ImageURL != null && message.hasOwnProperty("ImageURL"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.ImageURL);
                if (message.LinkURL != null && message.hasOwnProperty("LinkURL"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.LinkURL);
                if (message.Remaining != null && message.hasOwnProperty("Remaining"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.Remaining);
                if (message.Total != null && message.hasOwnProperty("Total"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int64(message.Total);
                if (message.StartDate != null && message.hasOwnProperty("StartDate"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int64(message.StartDate);
                if (message.EndDate != null && message.hasOwnProperty("EndDate"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int64(message.EndDate);
                if (message.PreGeneratedCodes != null && message.hasOwnProperty("PreGeneratedCodes"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.PreGeneratedCodes);
                if (message.PromotionType != null && message.hasOwnProperty("PromotionType"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.PromotionType);
                if (message.ShowCode != null && message.hasOwnProperty("ShowCode"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.ShowCode);
                return writer;
            };

            /**
             * Encodes the specified PromotionInfo message, length delimited. Does not implicitly {@link pubg.globalaccounts.PromotionInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {pubg.globalaccounts.IPromotionInfo} message PromotionInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PromotionInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PromotionInfo message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PromotionInfo} PromotionInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PromotionInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PromotionInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.PromotionID = reader.string();
                        break;
                    case 2:
                        message.Name = reader.string();
                        break;
                    case 3:
                        message.Description = reader.string();
                        break;
                    case 4:
                        message.ImageURL = reader.string();
                        break;
                    case 5:
                        message.LinkURL = reader.string();
                        break;
                    case 6:
                        message.Remaining = reader.int64();
                        break;
                    case 7:
                        message.Total = reader.int64();
                        break;
                    case 8:
                        message.StartDate = reader.int64();
                        break;
                    case 9:
                        message.EndDate = reader.int64();
                        break;
                    case 10:
                        message.PreGeneratedCodes = reader.bool();
                        break;
                    case 11:
                        message.PromotionType = reader.string();
                        break;
                    case 12:
                        message.ShowCode = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PromotionInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PromotionInfo} PromotionInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PromotionInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PromotionInfo message.
             * @function verify
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PromotionInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.PromotionID != null && message.hasOwnProperty("PromotionID"))
                    if (!$util.isString(message.PromotionID))
                        return "PromotionID: string expected";
                if (message.Name != null && message.hasOwnProperty("Name"))
                    if (!$util.isString(message.Name))
                        return "Name: string expected";
                if (message.Description != null && message.hasOwnProperty("Description"))
                    if (!$util.isString(message.Description))
                        return "Description: string expected";
                if (message.ImageURL != null && message.hasOwnProperty("ImageURL"))
                    if (!$util.isString(message.ImageURL))
                        return "ImageURL: string expected";
                if (message.LinkURL != null && message.hasOwnProperty("LinkURL"))
                    if (!$util.isString(message.LinkURL))
                        return "LinkURL: string expected";
                if (message.Remaining != null && message.hasOwnProperty("Remaining"))
                    if (!$util.isInteger(message.Remaining) && !(message.Remaining && $util.isInteger(message.Remaining.low) && $util.isInteger(message.Remaining.high)))
                        return "Remaining: integer|Long expected";
                if (message.Total != null && message.hasOwnProperty("Total"))
                    if (!$util.isInteger(message.Total) && !(message.Total && $util.isInteger(message.Total.low) && $util.isInteger(message.Total.high)))
                        return "Total: integer|Long expected";
                if (message.StartDate != null && message.hasOwnProperty("StartDate"))
                    if (!$util.isInteger(message.StartDate) && !(message.StartDate && $util.isInteger(message.StartDate.low) && $util.isInteger(message.StartDate.high)))
                        return "StartDate: integer|Long expected";
                if (message.EndDate != null && message.hasOwnProperty("EndDate"))
                    if (!$util.isInteger(message.EndDate) && !(message.EndDate && $util.isInteger(message.EndDate.low) && $util.isInteger(message.EndDate.high)))
                        return "EndDate: integer|Long expected";
                if (message.PreGeneratedCodes != null && message.hasOwnProperty("PreGeneratedCodes"))
                    if (typeof message.PreGeneratedCodes !== "boolean")
                        return "PreGeneratedCodes: boolean expected";
                if (message.PromotionType != null && message.hasOwnProperty("PromotionType"))
                    if (!$util.isString(message.PromotionType))
                        return "PromotionType: string expected";
                if (message.ShowCode != null && message.hasOwnProperty("ShowCode"))
                    if (typeof message.ShowCode !== "boolean")
                        return "ShowCode: boolean expected";
                return null;
            };

            /**
             * Creates a PromotionInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PromotionInfo} PromotionInfo
             */
            PromotionInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PromotionInfo)
                    return object;
                var message = new $root.pubg.globalaccounts.PromotionInfo();
                if (object.PromotionID != null)
                    message.PromotionID = String(object.PromotionID);
                if (object.Name != null)
                    message.Name = String(object.Name);
                if (object.Description != null)
                    message.Description = String(object.Description);
                if (object.ImageURL != null)
                    message.ImageURL = String(object.ImageURL);
                if (object.LinkURL != null)
                    message.LinkURL = String(object.LinkURL);
                if (object.Remaining != null)
                    if ($util.Long)
                        (message.Remaining = $util.Long.fromValue(object.Remaining)).unsigned = false;
                    else if (typeof object.Remaining === "string")
                        message.Remaining = parseInt(object.Remaining, 10);
                    else if (typeof object.Remaining === "number")
                        message.Remaining = object.Remaining;
                    else if (typeof object.Remaining === "object")
                        message.Remaining = new $util.LongBits(object.Remaining.low >>> 0, object.Remaining.high >>> 0).toNumber();
                if (object.Total != null)
                    if ($util.Long)
                        (message.Total = $util.Long.fromValue(object.Total)).unsigned = false;
                    else if (typeof object.Total === "string")
                        message.Total = parseInt(object.Total, 10);
                    else if (typeof object.Total === "number")
                        message.Total = object.Total;
                    else if (typeof object.Total === "object")
                        message.Total = new $util.LongBits(object.Total.low >>> 0, object.Total.high >>> 0).toNumber();
                if (object.StartDate != null)
                    if ($util.Long)
                        (message.StartDate = $util.Long.fromValue(object.StartDate)).unsigned = false;
                    else if (typeof object.StartDate === "string")
                        message.StartDate = parseInt(object.StartDate, 10);
                    else if (typeof object.StartDate === "number")
                        message.StartDate = object.StartDate;
                    else if (typeof object.StartDate === "object")
                        message.StartDate = new $util.LongBits(object.StartDate.low >>> 0, object.StartDate.high >>> 0).toNumber();
                if (object.EndDate != null)
                    if ($util.Long)
                        (message.EndDate = $util.Long.fromValue(object.EndDate)).unsigned = false;
                    else if (typeof object.EndDate === "string")
                        message.EndDate = parseInt(object.EndDate, 10);
                    else if (typeof object.EndDate === "number")
                        message.EndDate = object.EndDate;
                    else if (typeof object.EndDate === "object")
                        message.EndDate = new $util.LongBits(object.EndDate.low >>> 0, object.EndDate.high >>> 0).toNumber();
                if (object.PreGeneratedCodes != null)
                    message.PreGeneratedCodes = Boolean(object.PreGeneratedCodes);
                if (object.PromotionType != null)
                    message.PromotionType = String(object.PromotionType);
                if (object.ShowCode != null)
                    message.ShowCode = Boolean(object.ShowCode);
                return message;
            };

            /**
             * Creates a plain object from a PromotionInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PromotionInfo
             * @static
             * @param {pubg.globalaccounts.PromotionInfo} message PromotionInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PromotionInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.PromotionID = "";
                    object.Name = "";
                    object.Description = "";
                    object.ImageURL = "";
                    object.LinkURL = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Remaining = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Remaining = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.Total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.Total = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.StartDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.StartDate = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.EndDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.EndDate = options.longs === String ? "0" : 0;
                    object.PreGeneratedCodes = false;
                    object.PromotionType = "";
                    object.ShowCode = false;
                }
                if (message.PromotionID != null && message.hasOwnProperty("PromotionID"))
                    object.PromotionID = message.PromotionID;
                if (message.Name != null && message.hasOwnProperty("Name"))
                    object.Name = message.Name;
                if (message.Description != null && message.hasOwnProperty("Description"))
                    object.Description = message.Description;
                if (message.ImageURL != null && message.hasOwnProperty("ImageURL"))
                    object.ImageURL = message.ImageURL;
                if (message.LinkURL != null && message.hasOwnProperty("LinkURL"))
                    object.LinkURL = message.LinkURL;
                if (message.Remaining != null && message.hasOwnProperty("Remaining"))
                    if (typeof message.Remaining === "number")
                        object.Remaining = options.longs === String ? String(message.Remaining) : message.Remaining;
                    else
                        object.Remaining = options.longs === String ? $util.Long.prototype.toString.call(message.Remaining) : options.longs === Number ? new $util.LongBits(message.Remaining.low >>> 0, message.Remaining.high >>> 0).toNumber() : message.Remaining;
                if (message.Total != null && message.hasOwnProperty("Total"))
                    if (typeof message.Total === "number")
                        object.Total = options.longs === String ? String(message.Total) : message.Total;
                    else
                        object.Total = options.longs === String ? $util.Long.prototype.toString.call(message.Total) : options.longs === Number ? new $util.LongBits(message.Total.low >>> 0, message.Total.high >>> 0).toNumber() : message.Total;
                if (message.StartDate != null && message.hasOwnProperty("StartDate"))
                    if (typeof message.StartDate === "number")
                        object.StartDate = options.longs === String ? String(message.StartDate) : message.StartDate;
                    else
                        object.StartDate = options.longs === String ? $util.Long.prototype.toString.call(message.StartDate) : options.longs === Number ? new $util.LongBits(message.StartDate.low >>> 0, message.StartDate.high >>> 0).toNumber() : message.StartDate;
                if (message.EndDate != null && message.hasOwnProperty("EndDate"))
                    if (typeof message.EndDate === "number")
                        object.EndDate = options.longs === String ? String(message.EndDate) : message.EndDate;
                    else
                        object.EndDate = options.longs === String ? $util.Long.prototype.toString.call(message.EndDate) : options.longs === Number ? new $util.LongBits(message.EndDate.low >>> 0, message.EndDate.high >>> 0).toNumber() : message.EndDate;
                if (message.PreGeneratedCodes != null && message.hasOwnProperty("PreGeneratedCodes"))
                    object.PreGeneratedCodes = message.PreGeneratedCodes;
                if (message.PromotionType != null && message.hasOwnProperty("PromotionType"))
                    object.PromotionType = message.PromotionType;
                if (message.ShowCode != null && message.hasOwnProperty("ShowCode"))
                    object.ShowCode = message.ShowCode;
                return object;
            };

            /**
             * Converts this PromotionInfo to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PromotionInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PromotionInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PromotionInfo;
        })();

        /**
         * BackendErrCode enum.
         * @name pubg.globalaccounts.BackendErrCode
         * @enum {string}
         * @property {number} ErrAccountByIDNotFound=0 ErrAccountByIDNotFound value
         * @property {number} ErrAccountByGUIDNotFound=1 ErrAccountByGUIDNotFound value
         * @property {number} ErrAccountByEmailNotFound=2 ErrAccountByEmailNotFound value
         * @property {number} ErrAccountByProviderIDNotFound=3 ErrAccountByProviderIDNotFound value
         * @property {number} ErrAccountDeactivated=4 ErrAccountDeactivated value
         * @property {number} ErrAccountActivated=5 ErrAccountActivated value
         * @property {number} ErrAccountOnHold=6 ErrAccountOnHold value
         * @property {number} ErrInvalidRefreshToken=7 ErrInvalidRefreshToken value
         * @property {number} ErrInvalidActivationToken=8 ErrInvalidActivationToken value
         * @property {number} ErrFailedEmailValidation=9 ErrFailedEmailValidation value
         * @property {number} ErrLocalAuthResetPasswordInvalidOldPassword=10 ErrLocalAuthResetPasswordInvalidOldPassword value
         * @property {number} ErrLocalAuthSetPasswordInvalidFormat=11 ErrLocalAuthSetPasswordInvalidFormat value
         * @property {number} ErrCouldNotDeleteAccount=12 ErrCouldNotDeleteAccount value
         * @property {number} ErrFailedUpdateEmailOptIn=13 ErrFailedUpdateEmailOptIn value
         * @property {number} ErrFailedUpdatePersona=14 ErrFailedUpdatePersona value
         * @property {number} ErrInvaildProvider=15 ErrInvaildProvider value
         * @property {number} ErrFailedCreateLink=16 ErrFailedCreateLink value
         * @property {number} ErrFailedDeleteLink=17 ErrFailedDeleteLink value
         * @property {number} ErrCouldnotConvertAuth=18 ErrCouldnotConvertAuth value
         * @property {number} ErrEmailDomainNotWhitelisted=19 ErrEmailDomainNotWhitelisted value
         * @property {number} ErrTOSNotAccepted=20 ErrTOSNotAccepted value
         * @property {number} ErrInvalidDOB=21 ErrInvalidDOB value
         * @property {number} ErrInvalidEmailConfirm=22 ErrInvalidEmailConfirm value
         * @property {number} ErrInvalidPassword=23 ErrInvalidPassword value
         * @property {number} ErrInvalidPasswordConfirm=24 ErrInvalidPasswordConfirm value
         * @property {number} ErrAccountAlreadyExists=25 ErrAccountAlreadyExists value
         * @property {number} ErrIncorrectPassword=26 ErrIncorrectPassword value
         * @property {number} ErrAccountIsArealdyOnHolded=27 ErrAccountIsArealdyOnHolded value
         * @property {number} ErrFailedUpdateOnHold=28 ErrFailedUpdateOnHold value
         * @property {number} ErrFailedUpdateLocked=29 ErrFailedUpdateLocked value
         * @property {number} ErrAccountLocked=30 ErrAccountLocked value
         * @property {number} ErrAccountUnconfirmed=31 ErrAccountUnconfirmed value
         * @property {number} ErrAccountAlreadyLinked=32 ErrAccountAlreadyLinked value
         * @property {number} ErrLitePCLauncherRegistrationDisabled=33 ErrLitePCLauncherRegistrationDisabled value
         * @property {number} ErrInvalidLinkInfo=34 ErrInvalidLinkInfo value
         * @property {number} ErrEmailChangeNewEmailSameAsOld=35 ErrEmailChangeNewEmailSameAsOld value
         * @property {number} ErrEmailChangeNewEmailAlreadyRegistered=36 ErrEmailChangeNewEmailAlreadyRegistered value
         * @property {number} ErrEmailChangeOldEmailAlreadyChanged=37 ErrEmailChangeOldEmailAlreadyChanged value
         * @property {number} ErrEmailChangeInvalidToken=38 ErrEmailChangeInvalidToken value
         * @property {number} ErrPasswordResetInvalidToken=39 ErrPasswordResetInvalidToken value
         * @property {number} ErrLinkInfoMissing=40 ErrLinkInfoMissing value
         * @property {number} ErrProviderAccountNotFound=41 ErrProviderAccountNotFound value
         * @property {number} ErrTSLProxyRequestFail=42 ErrTSLProxyRequestFail value
         * @property {number} ErrTSLPlatformAccountUnmarshalFail=43 ErrTSLPlatformAccountUnmarshalFail value
         * @property {number} ErrTSLPlatformAccountEmptyResponse=44 ErrTSLPlatformAccountEmptyResponse value
         * @property {number} ErrTSLPlatformAccountSummaryNotFound=45 ErrTSLPlatformAccountSummaryNotFound value
         * @property {number} ErrTSLPlatformAccountSummaryMissingData=46 ErrTSLPlatformAccountSummaryMissingData value
         * @property {number} ErrAccountRecentlyUnlinked=47 ErrAccountRecentlyUnlinked value
         * @property {number} ErrTooManyRequestByIp=48 ErrTooManyRequestByIp value
         * @property {number} ErrTooManyRequestByLogin=49 ErrTooManyRequestByLogin value
         * @property {number} ErrTooManyRequestByForgotPassword=50 ErrTooManyRequestByForgotPassword value
         * @property {number} ErrNoPlatformsLinked=51 ErrNoPlatformsLinked value
         * @property {number} ErrInvalidUsername=52 ErrInvalidUsername value
         * @property {number} ErrUsernameTaken=53 ErrUsernameTaken value
         * @property {number} ErrAccountByUsernameNotFound=54 ErrAccountByUsernameNotFound value
         * @property {number} ErrUsernameAlreadySet=55 ErrUsernameAlreadySet value
         * @property {number} ErrInvalidCountry=56 ErrInvalidCountry value
         * @property {number} ErrMagicLinkCodeInvalid=57 ErrMagicLinkCodeInvalid value
         * @property {number} ErrMagicLinkNotComplete=58 ErrMagicLinkNotComplete value
         * @property {number} ErrInvalidCreatorCode=59 ErrInvalidCreatorCode value
         * @property {number} ErrProviderLocked=60 ErrProviderLocked value
         * @property {number} ErrTooManyRequestByChangeEmail=61 ErrTooManyRequestByChangeEmail value
         * @property {number} ErrCouldNotGetIpLogs=62 ErrCouldNotGetIpLogs value
         * @property {number} ErrCouldNotGetSessionLogs=63 ErrCouldNotGetSessionLogs value
         * @property {number} ErrCreatorCodeRequired=64 ErrCreatorCodeRequired value
         * @property {number} ErrPromotionNotFound=65 ErrPromotionNotFound value
         * @property {number} ErrPromotionNotActive=66 ErrPromotionNotActive value
         * @property {number} ErrPromotionNoCodesAvailable=67 ErrPromotionNoCodesAvailable value
         * @property {number} Success=200 Success value
         */
        globalaccounts.BackendErrCode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ErrAccountByIDNotFound"] = 0;
            values[valuesById[1] = "ErrAccountByGUIDNotFound"] = 1;
            values[valuesById[2] = "ErrAccountByEmailNotFound"] = 2;
            values[valuesById[3] = "ErrAccountByProviderIDNotFound"] = 3;
            values[valuesById[4] = "ErrAccountDeactivated"] = 4;
            values[valuesById[5] = "ErrAccountActivated"] = 5;
            values[valuesById[6] = "ErrAccountOnHold"] = 6;
            values[valuesById[7] = "ErrInvalidRefreshToken"] = 7;
            values[valuesById[8] = "ErrInvalidActivationToken"] = 8;
            values[valuesById[9] = "ErrFailedEmailValidation"] = 9;
            values[valuesById[10] = "ErrLocalAuthResetPasswordInvalidOldPassword"] = 10;
            values[valuesById[11] = "ErrLocalAuthSetPasswordInvalidFormat"] = 11;
            values[valuesById[12] = "ErrCouldNotDeleteAccount"] = 12;
            values[valuesById[13] = "ErrFailedUpdateEmailOptIn"] = 13;
            values[valuesById[14] = "ErrFailedUpdatePersona"] = 14;
            values[valuesById[15] = "ErrInvaildProvider"] = 15;
            values[valuesById[16] = "ErrFailedCreateLink"] = 16;
            values[valuesById[17] = "ErrFailedDeleteLink"] = 17;
            values[valuesById[18] = "ErrCouldnotConvertAuth"] = 18;
            values[valuesById[19] = "ErrEmailDomainNotWhitelisted"] = 19;
            values[valuesById[20] = "ErrTOSNotAccepted"] = 20;
            values[valuesById[21] = "ErrInvalidDOB"] = 21;
            values[valuesById[22] = "ErrInvalidEmailConfirm"] = 22;
            values[valuesById[23] = "ErrInvalidPassword"] = 23;
            values[valuesById[24] = "ErrInvalidPasswordConfirm"] = 24;
            values[valuesById[25] = "ErrAccountAlreadyExists"] = 25;
            values[valuesById[26] = "ErrIncorrectPassword"] = 26;
            values[valuesById[27] = "ErrAccountIsArealdyOnHolded"] = 27;
            values[valuesById[28] = "ErrFailedUpdateOnHold"] = 28;
            values[valuesById[29] = "ErrFailedUpdateLocked"] = 29;
            values[valuesById[30] = "ErrAccountLocked"] = 30;
            values[valuesById[31] = "ErrAccountUnconfirmed"] = 31;
            values[valuesById[32] = "ErrAccountAlreadyLinked"] = 32;
            values[valuesById[33] = "ErrLitePCLauncherRegistrationDisabled"] = 33;
            values[valuesById[34] = "ErrInvalidLinkInfo"] = 34;
            values[valuesById[35] = "ErrEmailChangeNewEmailSameAsOld"] = 35;
            values[valuesById[36] = "ErrEmailChangeNewEmailAlreadyRegistered"] = 36;
            values[valuesById[37] = "ErrEmailChangeOldEmailAlreadyChanged"] = 37;
            values[valuesById[38] = "ErrEmailChangeInvalidToken"] = 38;
            values[valuesById[39] = "ErrPasswordResetInvalidToken"] = 39;
            values[valuesById[40] = "ErrLinkInfoMissing"] = 40;
            values[valuesById[41] = "ErrProviderAccountNotFound"] = 41;
            values[valuesById[42] = "ErrTSLProxyRequestFail"] = 42;
            values[valuesById[43] = "ErrTSLPlatformAccountUnmarshalFail"] = 43;
            values[valuesById[44] = "ErrTSLPlatformAccountEmptyResponse"] = 44;
            values[valuesById[45] = "ErrTSLPlatformAccountSummaryNotFound"] = 45;
            values[valuesById[46] = "ErrTSLPlatformAccountSummaryMissingData"] = 46;
            values[valuesById[47] = "ErrAccountRecentlyUnlinked"] = 47;
            values[valuesById[48] = "ErrTooManyRequestByIp"] = 48;
            values[valuesById[49] = "ErrTooManyRequestByLogin"] = 49;
            values[valuesById[50] = "ErrTooManyRequestByForgotPassword"] = 50;
            values[valuesById[51] = "ErrNoPlatformsLinked"] = 51;
            values[valuesById[52] = "ErrInvalidUsername"] = 52;
            values[valuesById[53] = "ErrUsernameTaken"] = 53;
            values[valuesById[54] = "ErrAccountByUsernameNotFound"] = 54;
            values[valuesById[55] = "ErrUsernameAlreadySet"] = 55;
            values[valuesById[56] = "ErrInvalidCountry"] = 56;
            values[valuesById[57] = "ErrMagicLinkCodeInvalid"] = 57;
            values[valuesById[58] = "ErrMagicLinkNotComplete"] = 58;
            values[valuesById[59] = "ErrInvalidCreatorCode"] = 59;
            values[valuesById[60] = "ErrProviderLocked"] = 60;
            values[valuesById[61] = "ErrTooManyRequestByChangeEmail"] = 61;
            values[valuesById[62] = "ErrCouldNotGetIpLogs"] = 62;
            values[valuesById[63] = "ErrCouldNotGetSessionLogs"] = 63;
            values[valuesById[64] = "ErrCreatorCodeRequired"] = 64;
            values[valuesById[65] = "ErrPromotionNotFound"] = 65;
            values[valuesById[66] = "ErrPromotionNotActive"] = 66;
            values[valuesById[67] = "ErrPromotionNoCodesAvailable"] = 67;
            values[valuesById[200] = "Success"] = 200;
            return values;
        })();

        globalaccounts.PlatformAccount = (function() {

            /**
             * Properties of a PlatformAccount.
             * @memberof pubg.globalaccounts
             * @interface IPlatformAccount
             * @property {string|null} [GUID] PlatformAccount GUID
             * @property {string|null} [DisplayName] PlatformAccount DisplayName
             * @property {string|null} [PlatformID] PlatformAccount PlatformID
             * @property {string|null} [AuthProviderID] PlatformAccount AuthProviderID
             * @property {number|Long|null} [CreatedAt] PlatformAccount CreatedAt
             * @property {number|Long|null} [UpdatedAt] PlatformAccount UpdatedAt
             */

            /**
             * Constructs a new PlatformAccount.
             * @memberof pubg.globalaccounts
             * @classdesc Represents a PlatformAccount.
             * @implements IPlatformAccount
             * @constructor
             * @param {pubg.globalaccounts.IPlatformAccount=} [properties] Properties to set
             */
            function PlatformAccount(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlatformAccount GUID.
             * @member {string} GUID
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             */
            PlatformAccount.prototype.GUID = "";

            /**
             * PlatformAccount DisplayName.
             * @member {string} DisplayName
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             */
            PlatformAccount.prototype.DisplayName = "";

            /**
             * PlatformAccount PlatformID.
             * @member {string} PlatformID
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             */
            PlatformAccount.prototype.PlatformID = "";

            /**
             * PlatformAccount AuthProviderID.
             * @member {string} AuthProviderID
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             */
            PlatformAccount.prototype.AuthProviderID = "";

            /**
             * PlatformAccount CreatedAt.
             * @member {number|Long} CreatedAt
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             */
            PlatformAccount.prototype.CreatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * PlatformAccount UpdatedAt.
             * @member {number|Long} UpdatedAt
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             */
            PlatformAccount.prototype.UpdatedAt = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PlatformAccount instance using the specified properties.
             * @function create
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {pubg.globalaccounts.IPlatformAccount=} [properties] Properties to set
             * @returns {pubg.globalaccounts.PlatformAccount} PlatformAccount instance
             */
            PlatformAccount.create = function create(properties) {
                return new PlatformAccount(properties);
            };

            /**
             * Encodes the specified PlatformAccount message. Does not implicitly {@link pubg.globalaccounts.PlatformAccount.verify|verify} messages.
             * @function encode
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {pubg.globalaccounts.IPlatformAccount} message PlatformAccount message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlatformAccount.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.GUID);
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.DisplayName);
                if (message.PlatformID != null && message.hasOwnProperty("PlatformID"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.PlatformID);
                if (message.AuthProviderID != null && message.hasOwnProperty("AuthProviderID"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.AuthProviderID);
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.CreatedAt);
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int64(message.UpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified PlatformAccount message, length delimited. Does not implicitly {@link pubg.globalaccounts.PlatformAccount.verify|verify} messages.
             * @function encodeDelimited
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {pubg.globalaccounts.IPlatformAccount} message PlatformAccount message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlatformAccount.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlatformAccount message from the specified reader or buffer.
             * @function decode
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {pubg.globalaccounts.PlatformAccount} PlatformAccount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlatformAccount.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pubg.globalaccounts.PlatformAccount();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.GUID = reader.string();
                        break;
                    case 2:
                        message.DisplayName = reader.string();
                        break;
                    case 3:
                        message.PlatformID = reader.string();
                        break;
                    case 4:
                        message.AuthProviderID = reader.string();
                        break;
                    case 5:
                        message.CreatedAt = reader.int64();
                        break;
                    case 6:
                        message.UpdatedAt = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlatformAccount message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {pubg.globalaccounts.PlatformAccount} PlatformAccount
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlatformAccount.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlatformAccount message.
             * @function verify
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlatformAccount.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    if (!$util.isString(message.GUID))
                        return "GUID: string expected";
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    if (!$util.isString(message.DisplayName))
                        return "DisplayName: string expected";
                if (message.PlatformID != null && message.hasOwnProperty("PlatformID"))
                    if (!$util.isString(message.PlatformID))
                        return "PlatformID: string expected";
                if (message.AuthProviderID != null && message.hasOwnProperty("AuthProviderID"))
                    if (!$util.isString(message.AuthProviderID))
                        return "AuthProviderID: string expected";
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (!$util.isInteger(message.CreatedAt) && !(message.CreatedAt && $util.isInteger(message.CreatedAt.low) && $util.isInteger(message.CreatedAt.high)))
                        return "CreatedAt: integer|Long expected";
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (!$util.isInteger(message.UpdatedAt) && !(message.UpdatedAt && $util.isInteger(message.UpdatedAt.low) && $util.isInteger(message.UpdatedAt.high)))
                        return "UpdatedAt: integer|Long expected";
                return null;
            };

            /**
             * Creates a PlatformAccount message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {pubg.globalaccounts.PlatformAccount} PlatformAccount
             */
            PlatformAccount.fromObject = function fromObject(object) {
                if (object instanceof $root.pubg.globalaccounts.PlatformAccount)
                    return object;
                var message = new $root.pubg.globalaccounts.PlatformAccount();
                if (object.GUID != null)
                    message.GUID = String(object.GUID);
                if (object.DisplayName != null)
                    message.DisplayName = String(object.DisplayName);
                if (object.PlatformID != null)
                    message.PlatformID = String(object.PlatformID);
                if (object.AuthProviderID != null)
                    message.AuthProviderID = String(object.AuthProviderID);
                if (object.CreatedAt != null)
                    if ($util.Long)
                        (message.CreatedAt = $util.Long.fromValue(object.CreatedAt)).unsigned = false;
                    else if (typeof object.CreatedAt === "string")
                        message.CreatedAt = parseInt(object.CreatedAt, 10);
                    else if (typeof object.CreatedAt === "number")
                        message.CreatedAt = object.CreatedAt;
                    else if (typeof object.CreatedAt === "object")
                        message.CreatedAt = new $util.LongBits(object.CreatedAt.low >>> 0, object.CreatedAt.high >>> 0).toNumber();
                if (object.UpdatedAt != null)
                    if ($util.Long)
                        (message.UpdatedAt = $util.Long.fromValue(object.UpdatedAt)).unsigned = false;
                    else if (typeof object.UpdatedAt === "string")
                        message.UpdatedAt = parseInt(object.UpdatedAt, 10);
                    else if (typeof object.UpdatedAt === "number")
                        message.UpdatedAt = object.UpdatedAt;
                    else if (typeof object.UpdatedAt === "object")
                        message.UpdatedAt = new $util.LongBits(object.UpdatedAt.low >>> 0, object.UpdatedAt.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PlatformAccount message. Also converts values to other types if specified.
             * @function toObject
             * @memberof pubg.globalaccounts.PlatformAccount
             * @static
             * @param {pubg.globalaccounts.PlatformAccount} message PlatformAccount
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlatformAccount.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.GUID = "";
                    object.DisplayName = "";
                    object.PlatformID = "";
                    object.AuthProviderID = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.CreatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.CreatedAt = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.UpdatedAt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.UpdatedAt = options.longs === String ? "0" : 0;
                }
                if (message.GUID != null && message.hasOwnProperty("GUID"))
                    object.GUID = message.GUID;
                if (message.DisplayName != null && message.hasOwnProperty("DisplayName"))
                    object.DisplayName = message.DisplayName;
                if (message.PlatformID != null && message.hasOwnProperty("PlatformID"))
                    object.PlatformID = message.PlatformID;
                if (message.AuthProviderID != null && message.hasOwnProperty("AuthProviderID"))
                    object.AuthProviderID = message.AuthProviderID;
                if (message.CreatedAt != null && message.hasOwnProperty("CreatedAt"))
                    if (typeof message.CreatedAt === "number")
                        object.CreatedAt = options.longs === String ? String(message.CreatedAt) : message.CreatedAt;
                    else
                        object.CreatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.CreatedAt) : options.longs === Number ? new $util.LongBits(message.CreatedAt.low >>> 0, message.CreatedAt.high >>> 0).toNumber() : message.CreatedAt;
                if (message.UpdatedAt != null && message.hasOwnProperty("UpdatedAt"))
                    if (typeof message.UpdatedAt === "number")
                        object.UpdatedAt = options.longs === String ? String(message.UpdatedAt) : message.UpdatedAt;
                    else
                        object.UpdatedAt = options.longs === String ? $util.Long.prototype.toString.call(message.UpdatedAt) : options.longs === Number ? new $util.LongBits(message.UpdatedAt.low >>> 0, message.UpdatedAt.high >>> 0).toNumber() : message.UpdatedAt;
                return object;
            };

            /**
             * Converts this PlatformAccount to JSON.
             * @function toJSON
             * @memberof pubg.globalaccounts.PlatformAccount
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlatformAccount.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PlatformAccount;
        })();

        return globalaccounts;
    })();

    return pubg;
})();

module.exports = $root;
