// Code generated by protoc-gen-twirp v7.1.0, DO NOT EDIT.
// source: rpc/identity/identity.proto

/*
Package identity is a generated twirp stub package.
This code was generated with github.com/twitchtv/twirp/protoc-gen-twirp v7.1.0.

It is generated from these files:
	rpc/identity/identity.proto
*/
package identity

import (
	bytes "bytes"
	strings "strings"

	context "context"

	fmt "fmt"

	ioutil "io/ioutil"

	http "net/http"

	strconv "strconv"

	jsonpb "github.com/golang/protobuf/jsonpb"

	proto "github.com/golang/protobuf/proto"

	twirp "github.com/twitchtv/twirp"

	ctxsetters "github.com/twitchtv/twirp/ctxsetters"

	// Imports only used by utility functions:

	io "io"

	json "encoding/json"

	path "path"

	url "net/url"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the twirp package used in your project.
// A compilation error at this line likely means your copy of the
// twirp package needs to be updated.
const _ = twirp.TwirpPackageIsVersion7

// ==================
// Identity Interface
// ==================

//
// The Identity Service is the main RPC service for interacting with the Global Accounts/Identity system.
//
// We use <a href="https://developers.google.com/protocol-buffers">Protocol Buffers</a> to define the API and then generate client and server stubs. If you're writing your service in Golang or Typescript you can ask us for a client library. For other languages the server also accepts JSON requests so you can use whatever HTTP request library you prefer.
//
// When making JSON requests over HTTP you'll make requests like:
// <code>
// curl --location --request POST 'https://{base_url}/twirp/pubg.globalaccounts.Identity/GetGlobalAccount' \ <br>--header 'Authorization: Bearer {token}' \ <br>--header 'Content-Type: application/json' \<br>--data-raw '{"Criteria":"globalaccount.723f1e42-4347-4760-9460-c259d111a5f4", "CriteriaType": "guid"}'
// </code>
//
// <b>NOTE: All requests will be made with the POST verb</b>
//
// Endpoints will only ever respond with a 200 or 500 status code. Keep in mind 200 doesn't always mean success; depending on the endpoint you're hitting the response object may contain a "code" field that will indicate success (200) or a specific error (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum).
type Identity interface {
	//
	// Creates a new Local Authentication record. Usually this triggers an Activation email to be sent to the user.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrTOSNotAccepted
	// - ErrInvalidDOB
	// - ErrInvalidUsername
	// - ErrInvalidCountry
	// - ErrUsernameTaken
	// - ErrEmailDomainNotWhitelisted
	// - ErrAccountAlreadyExists
	// - ErrAccountByGUIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CreateGlobalAccount(context.Context, *CreateAccountParams) (*GlobalAccountResponse, error)

	//
	// Attempts to find a Global Account record using the provided identifiers. If none is found then we create a new Platform
	// record with its own GUID and return that information.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	FindOrInitGPPAccount(context.Context, *FindOrInitGPPAccountParams) (*GPPAccountResponse, error)

	//
	// Removes all of an account's records from the database. This CANNOT be undone.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrCouldnotConvertAuth
	// - ErrCouldNotDeleteAccount
	// - ErrInvalidPassword
	// - ErrInvalidPasswordConfirm
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	DeleteGlobalAccount(context.Context, *DeleteAccountParams) (*StatusResponse, error)

	//
	// Retrieve all information about a Global Account
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByProviderIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	GetGlobalAccount(context.Context, *CriteriaQuery) (*GlobalAccountResponse, error)

	//
	// When an account is created we usually send an email to the user asking them to verify their email and activate their account.
	// That email contains a JWT that must be sent to this endpoint to complete activation of the account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrInvalidActivationToken
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	ActivateGlobalAccount(context.Context, *ActivateAccountParams) (*TokenClaimResponse, error)

	//
	// If a user did not receive their activation email, or it expired before they used it, this endpoint will trigger a new JWT to be generated and sent to the user.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	ResendActivation(context.Context, *ResendActivationParams) (*StatusResponse, error)

	//
	// Changing the email address of an account is a two-step process. This is to ensure that the user has access to the new email address before we change the account information. When an email change is requested this is the first endpoint that should be hit. That will trigger a JWT to be generated and sent to the NewEmail. Once the user has the JWT from their new email it needs to be sent to `CompleteEmailChange` endpoint to save the new email address to the account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrEmailChangeNewEmailSameAsOld
	// - ErrFailedEmailValidation
	// - ErrIncorrectPassword
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	BeginEmailChange(context.Context, *BeginEmailChangeParams) (*StatusResponse, error)

	//
	// This takes the JWT generated by BeginEmailChange, verifies its authenticity, and then saves the new email address to the user's account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrEmailChangeInvalidToken
	// - ErrEmailChangeNewEmailAlreadyRegistered
	// - ErrEmailChangeNewEmailSameAsOld
	// - ErrEmailChangeOldEmailAlreadyChanged
	// - ErrFailedEmailValidation
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CompleteEmailChange(context.Context, *CompleteEmailChangeParams) (*TokenClaimResponse, error)

	//
	// This endpoint is used to set or update the username of an account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrInvalidUsername
	// - ErrUsernameTaken
	// - ErrUsernameAlreadySet
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	UpdateUsername(context.Context, *UpdateUsernameParams) (*StatusResponse, error)

	//
	// This endpoint is used to change the password of an account when the user remembers the old password. We confirm that the old password is correct, salt and hash the new password, and then save it to the account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrInvalidPassword
	// - ErrInvalidPasswordConfirm
	// - ErrLocalAuthResetPasswordInvalidOldPassword
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	UpdatePassword(context.Context, *UpdatePasswordParams) (*StatusResponse, error)

	//
	// When a user can't remember the password to access their account we generate a JWT and email it to the address on the account. The user must then send the JWT back to the `CompleteForgotPassword` endpoint to be able to change their password.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrFailedEmailValidation
	// - ErrTooManyRequestByForgotPassword
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	BeginForgotPassword(context.Context, *BeginForgotPasswordParams) (*StatusResponse, error)

	//
	// This takes the JWT generated by `BeginForgotPassword` and verifies it. If the verification is successful we salt and hash the new password and update their account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrAccountOnHold
	// - ErrInvalidPassword
	// - ErrInvalidPasswordConfirm
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CompleteForgotPassword(context.Context, *CompleteForgotPasswordParams) (*TokenClaimResponse, error)

	//
	// This endpoint changes whether or not the user wants to receive email communications from PUBG.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrCouldnotConvertAuth
	// - ErrFailedUpdateEmailOptIn
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	SetCommPrefs(context.Context, *SetCommPrefsParams) (*StatusResponse, error)

	//
	// This changes the platform that's used as the user's Persona platform. The Persona platform dictates what username we display when communicating with the player.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrCouldnotConvertAuth
	// - ErrFailedUpdatePersona
	// - ErrInvaildProvider
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	SetPersona(context.Context, *SetPersonaParams) (*StatusResponse, error)

	//
	// Youtube linking is different than most of our other social links. We don't actually link with YT; they link with us. We use this method to save a record indicating that the user has linked with Youtube, but we have no information about their YouTube account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	LinkYoutube(context.Context, *GuidInput) (*StatusResponse, error)

	//
	// LitePC links contain no data about the user's LitePC account. We only use these links to track what users have access to LitePC.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrLitePCLauncherRegistrationDisabled
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	LinkLitePC(context.Context, *GuidInput) (*StatusResponse, error)

	//
	// This is used to create a link record when a player logs in to Global Accounts through an OIDC Relying Partner.
	// These links are simply a record that the player logged in to the partner's system.
	// We do not receive any information about the player's account in the partner's system.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrInvaildProvider
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CreateRelyingPartyLink(context.Context, *CreateRelyingPartyLinkParams) (*StatusResponse, error)

	//
	// This is used to create a link between a third-party account and a PUBG Global Account.
	//
	// Youtube and LitePC should not be linked with this endpoint. (See <a href="#pubg.globalaccounts.Identity.LinkLitePC">LinkLitePC</a> and <a href="pubg.globalaccounts.Identity.LinkYoutube">LinkYoutube</a>)
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountAlreadyLinked
	// - ErrAccountRecentlyUnlinked
	// - ErrFailedCreateLink
	// - ErrFailedDeleteLink
	// - ErrTSLProxyRequestFail
	// - ErrTSLPlatformAccountEmptyResponse
	// - ErrTSLPlatformAccountSummaryNotFound
	// - ErrTSLPlatformAccountSummaryMissingData
	// - ErrTSLPlatformAccountUnmarshalFail
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CreateLink(context.Context, *CreateLinkParams) (*StatusResponse, error)

	//
	// This is used to deactivate a link between a third-party account and a PUBG account. Destroyed links are not actually deleted, they're "deactivated". This leaves the record in the database for tracking purposes but the deactivated account will be omitted from Global Account lookups.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountDeactivated
	// - ErrAccountByGUIDNotFound
	// - ErrAccountAlreadyLinked
	// - ErrProviderLocked
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	DestroyLink(context.Context, *DestroyLinkParams) (*StatusResponse, error)

	//
	// This is used to determine whether a PUBG Global Account is linked to a third-party platform. This does not return information about the linked platform account, only whether or not the link is active.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CheckLink(context.Context, *GuidProviderCombo) (*StatusResponse, error)

	//
	// This returns information about a specific third-party account linked to a PUBG Global Account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	GetLink(context.Context, *GuidProviderCombo) (*GetLinkResponse, error)

	//
	// This is the main endpoint used for logging in. We take an email address and plain-text password. The password is checked against the password stored on the account. If the passwords match we return the full Global Account object for that user and they can be considered logged in. If the password does not match what's stored on the account then no Account will be returned.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountLocked
	// - ErrAccountUnconfirmed
	// - ErrTooManyRequestByIp
	// - ErrTooManyRequestByLogin
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	VerifyPassword(context.Context, *VerifyPasswordParams) (*GlobalAccountResponse, error)

	//
	// Returns information about the last Twitch account linked to the specified Global Account.
	// This endpoint is generally not useful and only exists to support TSL.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrProviderAccountNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	GetPrevTwitch(context.Context, *GetPrevTwitchParams) (*PrevTwitchResponse, error)

	//
	// <div class="not-ready"><b>This endpoint is not ready for general use</b></div>
	BeginEnableTOTP(context.Context, *GuidInput) (*BeginEnableTOTPResponse, error)

	//
	// <div class="not-ready"><b>This endpoint is not ready for general use</b></div>
	CompleteEnableTOTP(context.Context, *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error)

	//
	// <div class="not-ready"><b>This endpoint is not ready for general use</b></div>
	RegenerateRecoveryTOPTCodes(context.Context, *GuidInput) (*StatusResponse, error)

	//
	// <div class="not-ready"><b>This endpoint is not ready for general use</b></div>
	SendTOTPCode(context.Context, *GuidInput) (*StatusResponse, error)

	//
	// <div class="not-ready"><b>This endpoint is not ready for general use</b></div>
	VerifyTOTPCode(context.Context, *VerifyTOTPCodeParams) (*StatusResponse, error)

	//
	// When a user unlinks a provider from their PUBG Global Account there's a delay before they're allowed to link a different account from that same provider. This endpoint can be used to check whether or not a user is able to link a specific provider at this time.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountRecentlyUnlinked
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	CheckGUIDLinkDelay(context.Context, *GuidProviderCombo) (*StatusResponse, error)

	SocialLoginLookup(context.Context, *SocialLoginParams) (*GlobalAccountResponse, error)

	//
	// Set a user's Preferred Language.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	SetPrefLang(context.Context, *PreferredLangParams) (*StatusResponse, error)

	// ErrMagicLinkCodeInvalid
	MagicLinkGenerate(context.Context, *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error)

	MagicLinkValidate(context.Context, *MagicLinkCodeParams) (*MagicLinkValidateResponse, error)

	MagicLinkCheckComplete(context.Context, *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error)

	//
	// Updates the creator code attached to a global account.
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrNoPlatformsLinked
	// - ErrInvalidCreatorCode
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	UpdateCreatorCode(context.Context, *UpdateCreatorCodeParams) (*StatusResponse, error)

	//
	// Gets a list of creator codes in order to populate UI elements
	GetCreatorCodes(context.Context, *GetCreatorCodesParams) (*CodesResponse, error)

	//
	// Gets list of access logs and actived access logs to populate UI elements
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrCouldNotGetIpLogs
	// - ErrCouldNotGetSessionLogs
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	GetAccessLogs(context.Context, *GuidInput) (*AccessLogResponse, error)

	//
	// Gets a list of ongoing promotions
	GetPromotions(context.Context, *GetPromotionsParams) (*PromotionsResponse, error)

	//
	// Claims a promo code for a given account and promotion
	//
	// <b>Possible Error Codes:</b>
	// <pre>
	// - ErrAccountByGUIDNotFound
	// - ErrCreatorCodeRequired
	// - ErrPromotionNotFound
	// - ErrPromotionNotActive
	// - ErrPromotionNoCodesAvailable
	// - Success
	// </pre>
	// (See the <a href="#pubg.globalaccounts.BackendErrCode">BackendErrCode</a> enum for more information)
	ClaimPromoCode(context.Context, *ClaimPromoCodeParams) (*StatusResponse, error)
}

// ========================
// Identity Protobuf Client
// ========================

type identityProtobufClient struct {
	client      HTTPClient
	urls        [39]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewIdentityProtobufClient creates a Protobuf client that implements the Identity interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewIdentityProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Identity {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "pubg.globalaccounts", "Identity")
	urls := [39]string{
		serviceURL + "CreateGlobalAccount",
		serviceURL + "FindOrInitGPPAccount",
		serviceURL + "DeleteGlobalAccount",
		serviceURL + "GetGlobalAccount",
		serviceURL + "ActivateGlobalAccount",
		serviceURL + "ResendActivation",
		serviceURL + "BeginEmailChange",
		serviceURL + "CompleteEmailChange",
		serviceURL + "UpdateUsername",
		serviceURL + "UpdatePassword",
		serviceURL + "BeginForgotPassword",
		serviceURL + "CompleteForgotPassword",
		serviceURL + "SetCommPrefs",
		serviceURL + "SetPersona",
		serviceURL + "LinkYoutube",
		serviceURL + "LinkLitePC",
		serviceURL + "CreateRelyingPartyLink",
		serviceURL + "CreateLink",
		serviceURL + "DestroyLink",
		serviceURL + "CheckLink",
		serviceURL + "GetLink",
		serviceURL + "VerifyPassword",
		serviceURL + "GetPrevTwitch",
		serviceURL + "BeginEnableTOTP",
		serviceURL + "CompleteEnableTOTP",
		serviceURL + "RegenerateRecoveryTOPTCodes",
		serviceURL + "SendTOTPCode",
		serviceURL + "VerifyTOTPCode",
		serviceURL + "CheckGUIDLinkDelay",
		serviceURL + "SocialLoginLookup",
		serviceURL + "SetPrefLang",
		serviceURL + "MagicLinkGenerate",
		serviceURL + "MagicLinkValidate",
		serviceURL + "MagicLinkCheckComplete",
		serviceURL + "UpdateCreatorCode",
		serviceURL + "GetCreatorCodes",
		serviceURL + "GetAccessLogs",
		serviceURL + "GetPromotions",
		serviceURL + "ClaimPromoCode",
	}

	return &identityProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *identityProtobufClient) CreateGlobalAccount(ctx context.Context, in *CreateAccountParams) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CreateGlobalAccount")
	caller := c.callCreateGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateAccountParams) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateAccountParams) when calling interceptor")
					}
					return c.callCreateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCreateGlobalAccount(ctx context.Context, in *CreateAccountParams) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) FindOrInitGPPAccount(ctx context.Context, in *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "FindOrInitGPPAccount")
	caller := c.callFindOrInitGPPAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*FindOrInitGPPAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*FindOrInitGPPAccountParams) when calling interceptor")
					}
					return c.callFindOrInitGPPAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GPPAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GPPAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callFindOrInitGPPAccount(ctx context.Context, in *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
	out := new(GPPAccountResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) DeleteGlobalAccount(ctx context.Context, in *DeleteAccountParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteGlobalAccount")
	caller := c.callDeleteGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteAccountParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteAccountParams) when calling interceptor")
					}
					return c.callDeleteGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callDeleteGlobalAccount(ctx context.Context, in *DeleteAccountParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) GetGlobalAccount(ctx context.Context, in *CriteriaQuery) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetGlobalAccount")
	caller := c.callGetGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CriteriaQuery) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CriteriaQuery)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CriteriaQuery) when calling interceptor")
					}
					return c.callGetGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callGetGlobalAccount(ctx context.Context, in *CriteriaQuery) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) ActivateGlobalAccount(ctx context.Context, in *ActivateAccountParams) (*TokenClaimResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "ActivateGlobalAccount")
	caller := c.callActivateGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ActivateAccountParams) (*TokenClaimResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ActivateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ActivateAccountParams) when calling interceptor")
					}
					return c.callActivateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callActivateGlobalAccount(ctx context.Context, in *ActivateAccountParams) (*TokenClaimResponse, error) {
	out := new(TokenClaimResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) ResendActivation(ctx context.Context, in *ResendActivationParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "ResendActivation")
	caller := c.callResendActivation
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResendActivationParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResendActivationParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResendActivationParams) when calling interceptor")
					}
					return c.callResendActivation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callResendActivation(ctx context.Context, in *ResendActivationParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) BeginEmailChange(ctx context.Context, in *BeginEmailChangeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "BeginEmailChange")
	caller := c.callBeginEmailChange
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BeginEmailChangeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginEmailChangeParams) when calling interceptor")
					}
					return c.callBeginEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callBeginEmailChange(ctx context.Context, in *BeginEmailChangeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CompleteEmailChange(ctx context.Context, in *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEmailChange")
	caller := c.callCompleteEmailChange
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEmailChangeParams) when calling interceptor")
					}
					return c.callCompleteEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCompleteEmailChange(ctx context.Context, in *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
	out := new(TokenClaimResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) UpdateUsername(ctx context.Context, in *UpdateUsernameParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUsername")
	caller := c.callUpdateUsername
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateUsernameParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateUsernameParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateUsernameParams) when calling interceptor")
					}
					return c.callUpdateUsername(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callUpdateUsername(ctx context.Context, in *UpdateUsernameParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) UpdatePassword(ctx context.Context, in *UpdatePasswordParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePassword")
	caller := c.callUpdatePassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePasswordParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePasswordParams) when calling interceptor")
					}
					return c.callUpdatePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callUpdatePassword(ctx context.Context, in *UpdatePasswordParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) BeginForgotPassword(ctx context.Context, in *BeginForgotPasswordParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "BeginForgotPassword")
	caller := c.callBeginForgotPassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BeginForgotPasswordParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginForgotPasswordParams) when calling interceptor")
					}
					return c.callBeginForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callBeginForgotPassword(ctx context.Context, in *BeginForgotPasswordParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CompleteForgotPassword(ctx context.Context, in *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CompleteForgotPassword")
	caller := c.callCompleteForgotPassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteForgotPasswordParams) when calling interceptor")
					}
					return c.callCompleteForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCompleteForgotPassword(ctx context.Context, in *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
	out := new(TokenClaimResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) SetCommPrefs(ctx context.Context, in *SetCommPrefsParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SetCommPrefs")
	caller := c.callSetCommPrefs
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetCommPrefsParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetCommPrefsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetCommPrefsParams) when calling interceptor")
					}
					return c.callSetCommPrefs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callSetCommPrefs(ctx context.Context, in *SetCommPrefsParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) SetPersona(ctx context.Context, in *SetPersonaParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SetPersona")
	caller := c.callSetPersona
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetPersonaParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetPersonaParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetPersonaParams) when calling interceptor")
					}
					return c.callSetPersona(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callSetPersona(ctx context.Context, in *SetPersonaParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) LinkYoutube(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "LinkYoutube")
	caller := c.callLinkYoutube
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callLinkYoutube(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callLinkYoutube(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) LinkLitePC(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "LinkLitePC")
	caller := c.callLinkLitePC
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callLinkLitePC(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callLinkLitePC(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CreateRelyingPartyLink(ctx context.Context, in *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CreateRelyingPartyLink")
	caller := c.callCreateRelyingPartyLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRelyingPartyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRelyingPartyLinkParams) when calling interceptor")
					}
					return c.callCreateRelyingPartyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCreateRelyingPartyLink(ctx context.Context, in *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CreateLink(ctx context.Context, in *CreateLinkParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CreateLink")
	caller := c.callCreateLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateLinkParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateLinkParams) when calling interceptor")
					}
					return c.callCreateLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCreateLink(ctx context.Context, in *CreateLinkParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) DestroyLink(ctx context.Context, in *DestroyLinkParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "DestroyLink")
	caller := c.callDestroyLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DestroyLinkParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DestroyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DestroyLinkParams) when calling interceptor")
					}
					return c.callDestroyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callDestroyLink(ctx context.Context, in *DestroyLinkParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CheckLink(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CheckLink")
	caller := c.callCheckLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return c.callCheckLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCheckLink(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) GetLink(ctx context.Context, in *GuidProviderCombo) (*GetLinkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetLink")
	caller := c.callGetLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidProviderCombo) (*GetLinkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return c.callGetLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLinkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLinkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callGetLink(ctx context.Context, in *GuidProviderCombo) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) VerifyPassword(ctx context.Context, in *VerifyPasswordParams) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPassword")
	caller := c.callVerifyPassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerifyPasswordParams) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyPasswordParams) when calling interceptor")
					}
					return c.callVerifyPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callVerifyPassword(ctx context.Context, in *VerifyPasswordParams) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) GetPrevTwitch(ctx context.Context, in *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetPrevTwitch")
	caller := c.callGetPrevTwitch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPrevTwitchParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPrevTwitchParams) when calling interceptor")
					}
					return c.callGetPrevTwitch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrevTwitchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrevTwitchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callGetPrevTwitch(ctx context.Context, in *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
	out := new(PrevTwitchResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) BeginEnableTOTP(ctx context.Context, in *GuidInput) (*BeginEnableTOTPResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "BeginEnableTOTP")
	caller := c.callBeginEnableTOTP
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*BeginEnableTOTPResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callBeginEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BeginEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BeginEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callBeginEnableTOTP(ctx context.Context, in *GuidInput) (*BeginEnableTOTPResponse, error) {
	out := new(BeginEnableTOTPResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CompleteEnableTOTP(ctx context.Context, in *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEnableTOTP")
	caller := c.callCompleteEnableTOTP
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEnableTOTPParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEnableTOTPParams) when calling interceptor")
					}
					return c.callCompleteEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompleteEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompleteEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCompleteEnableTOTP(ctx context.Context, in *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
	out := new(CompleteEnableTOTPResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) RegenerateRecoveryTOPTCodes(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "RegenerateRecoveryTOPTCodes")
	caller := c.callRegenerateRecoveryTOPTCodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callRegenerateRecoveryTOPTCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callRegenerateRecoveryTOPTCodes(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[25], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) SendTOTPCode(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SendTOTPCode")
	caller := c.callSendTOTPCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callSendTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callSendTOTPCode(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[26], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) VerifyTOTPCode(ctx context.Context, in *VerifyTOTPCodeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyTOTPCode")
	caller := c.callVerifyTOTPCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerifyTOTPCodeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyTOTPCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyTOTPCodeParams) when calling interceptor")
					}
					return c.callVerifyTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callVerifyTOTPCode(ctx context.Context, in *VerifyTOTPCodeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[27], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) CheckGUIDLinkDelay(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CheckGUIDLinkDelay")
	caller := c.callCheckGUIDLinkDelay
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return c.callCheckGUIDLinkDelay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callCheckGUIDLinkDelay(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[28], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) SocialLoginLookup(ctx context.Context, in *SocialLoginParams) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SocialLoginLookup")
	caller := c.callSocialLoginLookup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SocialLoginParams) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocialLoginParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocialLoginParams) when calling interceptor")
					}
					return c.callSocialLoginLookup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callSocialLoginLookup(ctx context.Context, in *SocialLoginParams) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[29], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) SetPrefLang(ctx context.Context, in *PreferredLangParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SetPrefLang")
	caller := c.callSetPrefLang
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PreferredLangParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PreferredLangParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PreferredLangParams) when calling interceptor")
					}
					return c.callSetPrefLang(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callSetPrefLang(ctx context.Context, in *PreferredLangParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[30], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) MagicLinkGenerate(ctx context.Context, in *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkGenerate")
	caller := c.callMagicLinkGenerate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkGenerateParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkGenerateParams) when calling interceptor")
					}
					return c.callMagicLinkGenerate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkGenerateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkGenerateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callMagicLinkGenerate(ctx context.Context, in *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
	out := new(MagicLinkGenerateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[31], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) MagicLinkValidate(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkValidate")
	caller := c.callMagicLinkValidate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return c.callMagicLinkValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callMagicLinkValidate(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
	out := new(MagicLinkValidateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[32], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) MagicLinkCheckComplete(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkCheckComplete")
	caller := c.callMagicLinkCheckComplete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return c.callMagicLinkCheckComplete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkCheckCompleteResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkCheckCompleteResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callMagicLinkCheckComplete(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
	out := new(MagicLinkCheckCompleteResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[33], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) UpdateCreatorCode(ctx context.Context, in *UpdateCreatorCodeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCreatorCode")
	caller := c.callUpdateCreatorCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateCreatorCodeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCreatorCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCreatorCodeParams) when calling interceptor")
					}
					return c.callUpdateCreatorCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callUpdateCreatorCode(ctx context.Context, in *UpdateCreatorCodeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[34], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) GetCreatorCodes(ctx context.Context, in *GetCreatorCodesParams) (*CodesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetCreatorCodes")
	caller := c.callGetCreatorCodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCreatorCodesParams) (*CodesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCreatorCodesParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCreatorCodesParams) when calling interceptor")
					}
					return c.callGetCreatorCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callGetCreatorCodes(ctx context.Context, in *GetCreatorCodesParams) (*CodesResponse, error) {
	out := new(CodesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[35], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) GetAccessLogs(ctx context.Context, in *GuidInput) (*AccessLogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetAccessLogs")
	caller := c.callGetAccessLogs
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*AccessLogResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callGetAccessLogs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AccessLogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AccessLogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callGetAccessLogs(ctx context.Context, in *GuidInput) (*AccessLogResponse, error) {
	out := new(AccessLogResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[36], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) GetPromotions(ctx context.Context, in *GetPromotionsParams) (*PromotionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetPromotions")
	caller := c.callGetPromotions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPromotionsParams) (*PromotionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPromotionsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPromotionsParams) when calling interceptor")
					}
					return c.callGetPromotions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PromotionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PromotionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callGetPromotions(ctx context.Context, in *GetPromotionsParams) (*PromotionsResponse, error) {
	out := new(PromotionsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[37], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityProtobufClient) ClaimPromoCode(ctx context.Context, in *ClaimPromoCodeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "ClaimPromoCode")
	caller := c.callClaimPromoCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ClaimPromoCodeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClaimPromoCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClaimPromoCodeParams) when calling interceptor")
					}
					return c.callClaimPromoCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityProtobufClient) callClaimPromoCode(ctx context.Context, in *ClaimPromoCodeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[38], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ====================
// Identity JSON Client
// ====================

type identityJSONClient struct {
	client      HTTPClient
	urls        [39]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewIdentityJSONClient creates a JSON client that implements the Identity interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewIdentityJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Identity {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(clientOpts.PathPrefix(), "pubg.globalaccounts", "Identity")
	urls := [39]string{
		serviceURL + "CreateGlobalAccount",
		serviceURL + "FindOrInitGPPAccount",
		serviceURL + "DeleteGlobalAccount",
		serviceURL + "GetGlobalAccount",
		serviceURL + "ActivateGlobalAccount",
		serviceURL + "ResendActivation",
		serviceURL + "BeginEmailChange",
		serviceURL + "CompleteEmailChange",
		serviceURL + "UpdateUsername",
		serviceURL + "UpdatePassword",
		serviceURL + "BeginForgotPassword",
		serviceURL + "CompleteForgotPassword",
		serviceURL + "SetCommPrefs",
		serviceURL + "SetPersona",
		serviceURL + "LinkYoutube",
		serviceURL + "LinkLitePC",
		serviceURL + "CreateRelyingPartyLink",
		serviceURL + "CreateLink",
		serviceURL + "DestroyLink",
		serviceURL + "CheckLink",
		serviceURL + "GetLink",
		serviceURL + "VerifyPassword",
		serviceURL + "GetPrevTwitch",
		serviceURL + "BeginEnableTOTP",
		serviceURL + "CompleteEnableTOTP",
		serviceURL + "RegenerateRecoveryTOPTCodes",
		serviceURL + "SendTOTPCode",
		serviceURL + "VerifyTOTPCode",
		serviceURL + "CheckGUIDLinkDelay",
		serviceURL + "SocialLoginLookup",
		serviceURL + "SetPrefLang",
		serviceURL + "MagicLinkGenerate",
		serviceURL + "MagicLinkValidate",
		serviceURL + "MagicLinkCheckComplete",
		serviceURL + "UpdateCreatorCode",
		serviceURL + "GetCreatorCodes",
		serviceURL + "GetAccessLogs",
		serviceURL + "GetPromotions",
		serviceURL + "ClaimPromoCode",
	}

	return &identityJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *identityJSONClient) CreateGlobalAccount(ctx context.Context, in *CreateAccountParams) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CreateGlobalAccount")
	caller := c.callCreateGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateAccountParams) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateAccountParams) when calling interceptor")
					}
					return c.callCreateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCreateGlobalAccount(ctx context.Context, in *CreateAccountParams) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) FindOrInitGPPAccount(ctx context.Context, in *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "FindOrInitGPPAccount")
	caller := c.callFindOrInitGPPAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*FindOrInitGPPAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*FindOrInitGPPAccountParams) when calling interceptor")
					}
					return c.callFindOrInitGPPAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GPPAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GPPAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callFindOrInitGPPAccount(ctx context.Context, in *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
	out := new(GPPAccountResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) DeleteGlobalAccount(ctx context.Context, in *DeleteAccountParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteGlobalAccount")
	caller := c.callDeleteGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteAccountParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteAccountParams) when calling interceptor")
					}
					return c.callDeleteGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callDeleteGlobalAccount(ctx context.Context, in *DeleteAccountParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) GetGlobalAccount(ctx context.Context, in *CriteriaQuery) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetGlobalAccount")
	caller := c.callGetGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CriteriaQuery) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CriteriaQuery)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CriteriaQuery) when calling interceptor")
					}
					return c.callGetGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callGetGlobalAccount(ctx context.Context, in *CriteriaQuery) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) ActivateGlobalAccount(ctx context.Context, in *ActivateAccountParams) (*TokenClaimResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "ActivateGlobalAccount")
	caller := c.callActivateGlobalAccount
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ActivateAccountParams) (*TokenClaimResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ActivateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ActivateAccountParams) when calling interceptor")
					}
					return c.callActivateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callActivateGlobalAccount(ctx context.Context, in *ActivateAccountParams) (*TokenClaimResponse, error) {
	out := new(TokenClaimResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) ResendActivation(ctx context.Context, in *ResendActivationParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "ResendActivation")
	caller := c.callResendActivation
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ResendActivationParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResendActivationParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResendActivationParams) when calling interceptor")
					}
					return c.callResendActivation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callResendActivation(ctx context.Context, in *ResendActivationParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) BeginEmailChange(ctx context.Context, in *BeginEmailChangeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "BeginEmailChange")
	caller := c.callBeginEmailChange
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BeginEmailChangeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginEmailChangeParams) when calling interceptor")
					}
					return c.callBeginEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callBeginEmailChange(ctx context.Context, in *BeginEmailChangeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CompleteEmailChange(ctx context.Context, in *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEmailChange")
	caller := c.callCompleteEmailChange
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEmailChangeParams) when calling interceptor")
					}
					return c.callCompleteEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCompleteEmailChange(ctx context.Context, in *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
	out := new(TokenClaimResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) UpdateUsername(ctx context.Context, in *UpdateUsernameParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUsername")
	caller := c.callUpdateUsername
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateUsernameParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateUsernameParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateUsernameParams) when calling interceptor")
					}
					return c.callUpdateUsername(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callUpdateUsername(ctx context.Context, in *UpdateUsernameParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) UpdatePassword(ctx context.Context, in *UpdatePasswordParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePassword")
	caller := c.callUpdatePassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdatePasswordParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePasswordParams) when calling interceptor")
					}
					return c.callUpdatePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callUpdatePassword(ctx context.Context, in *UpdatePasswordParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) BeginForgotPassword(ctx context.Context, in *BeginForgotPasswordParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "BeginForgotPassword")
	caller := c.callBeginForgotPassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *BeginForgotPasswordParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginForgotPasswordParams) when calling interceptor")
					}
					return c.callBeginForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callBeginForgotPassword(ctx context.Context, in *BeginForgotPasswordParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CompleteForgotPassword(ctx context.Context, in *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CompleteForgotPassword")
	caller := c.callCompleteForgotPassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteForgotPasswordParams) when calling interceptor")
					}
					return c.callCompleteForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCompleteForgotPassword(ctx context.Context, in *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
	out := new(TokenClaimResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) SetCommPrefs(ctx context.Context, in *SetCommPrefsParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SetCommPrefs")
	caller := c.callSetCommPrefs
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetCommPrefsParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetCommPrefsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetCommPrefsParams) when calling interceptor")
					}
					return c.callSetCommPrefs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callSetCommPrefs(ctx context.Context, in *SetCommPrefsParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) SetPersona(ctx context.Context, in *SetPersonaParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SetPersona")
	caller := c.callSetPersona
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SetPersonaParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetPersonaParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetPersonaParams) when calling interceptor")
					}
					return c.callSetPersona(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callSetPersona(ctx context.Context, in *SetPersonaParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) LinkYoutube(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "LinkYoutube")
	caller := c.callLinkYoutube
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callLinkYoutube(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callLinkYoutube(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) LinkLitePC(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "LinkLitePC")
	caller := c.callLinkLitePC
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callLinkLitePC(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callLinkLitePC(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CreateRelyingPartyLink(ctx context.Context, in *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CreateRelyingPartyLink")
	caller := c.callCreateRelyingPartyLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRelyingPartyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRelyingPartyLinkParams) when calling interceptor")
					}
					return c.callCreateRelyingPartyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCreateRelyingPartyLink(ctx context.Context, in *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CreateLink(ctx context.Context, in *CreateLinkParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CreateLink")
	caller := c.callCreateLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateLinkParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateLinkParams) when calling interceptor")
					}
					return c.callCreateLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCreateLink(ctx context.Context, in *CreateLinkParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) DestroyLink(ctx context.Context, in *DestroyLinkParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "DestroyLink")
	caller := c.callDestroyLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DestroyLinkParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DestroyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DestroyLinkParams) when calling interceptor")
					}
					return c.callDestroyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callDestroyLink(ctx context.Context, in *DestroyLinkParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CheckLink(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CheckLink")
	caller := c.callCheckLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return c.callCheckLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCheckLink(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) GetLink(ctx context.Context, in *GuidProviderCombo) (*GetLinkResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetLink")
	caller := c.callGetLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidProviderCombo) (*GetLinkResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return c.callGetLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLinkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLinkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callGetLink(ctx context.Context, in *GuidProviderCombo) (*GetLinkResponse, error) {
	out := new(GetLinkResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) VerifyPassword(ctx context.Context, in *VerifyPasswordParams) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPassword")
	caller := c.callVerifyPassword
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerifyPasswordParams) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyPasswordParams) when calling interceptor")
					}
					return c.callVerifyPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callVerifyPassword(ctx context.Context, in *VerifyPasswordParams) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) GetPrevTwitch(ctx context.Context, in *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetPrevTwitch")
	caller := c.callGetPrevTwitch
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPrevTwitchParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPrevTwitchParams) when calling interceptor")
					}
					return c.callGetPrevTwitch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrevTwitchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrevTwitchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callGetPrevTwitch(ctx context.Context, in *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
	out := new(PrevTwitchResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) BeginEnableTOTP(ctx context.Context, in *GuidInput) (*BeginEnableTOTPResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "BeginEnableTOTP")
	caller := c.callBeginEnableTOTP
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*BeginEnableTOTPResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callBeginEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BeginEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BeginEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callBeginEnableTOTP(ctx context.Context, in *GuidInput) (*BeginEnableTOTPResponse, error) {
	out := new(BeginEnableTOTPResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CompleteEnableTOTP(ctx context.Context, in *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEnableTOTP")
	caller := c.callCompleteEnableTOTP
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEnableTOTPParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEnableTOTPParams) when calling interceptor")
					}
					return c.callCompleteEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompleteEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompleteEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCompleteEnableTOTP(ctx context.Context, in *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
	out := new(CompleteEnableTOTPResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) RegenerateRecoveryTOPTCodes(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "RegenerateRecoveryTOPTCodes")
	caller := c.callRegenerateRecoveryTOPTCodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callRegenerateRecoveryTOPTCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callRegenerateRecoveryTOPTCodes(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[25], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) SendTOTPCode(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SendTOTPCode")
	caller := c.callSendTOTPCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callSendTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callSendTOTPCode(ctx context.Context, in *GuidInput) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[26], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) VerifyTOTPCode(ctx context.Context, in *VerifyTOTPCodeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "VerifyTOTPCode")
	caller := c.callVerifyTOTPCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *VerifyTOTPCodeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyTOTPCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyTOTPCodeParams) when calling interceptor")
					}
					return c.callVerifyTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callVerifyTOTPCode(ctx context.Context, in *VerifyTOTPCodeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[27], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) CheckGUIDLinkDelay(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "CheckGUIDLinkDelay")
	caller := c.callCheckGUIDLinkDelay
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return c.callCheckGUIDLinkDelay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callCheckGUIDLinkDelay(ctx context.Context, in *GuidProviderCombo) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[28], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) SocialLoginLookup(ctx context.Context, in *SocialLoginParams) (*GlobalAccountResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SocialLoginLookup")
	caller := c.callSocialLoginLookup
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SocialLoginParams) (*GlobalAccountResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocialLoginParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocialLoginParams) when calling interceptor")
					}
					return c.callSocialLoginLookup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callSocialLoginLookup(ctx context.Context, in *SocialLoginParams) (*GlobalAccountResponse, error) {
	out := new(GlobalAccountResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[29], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) SetPrefLang(ctx context.Context, in *PreferredLangParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "SetPrefLang")
	caller := c.callSetPrefLang
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PreferredLangParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PreferredLangParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PreferredLangParams) when calling interceptor")
					}
					return c.callSetPrefLang(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callSetPrefLang(ctx context.Context, in *PreferredLangParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[30], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) MagicLinkGenerate(ctx context.Context, in *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkGenerate")
	caller := c.callMagicLinkGenerate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkGenerateParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkGenerateParams) when calling interceptor")
					}
					return c.callMagicLinkGenerate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkGenerateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkGenerateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callMagicLinkGenerate(ctx context.Context, in *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
	out := new(MagicLinkGenerateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[31], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) MagicLinkValidate(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkValidate")
	caller := c.callMagicLinkValidate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return c.callMagicLinkValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callMagicLinkValidate(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
	out := new(MagicLinkValidateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[32], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) MagicLinkCheckComplete(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkCheckComplete")
	caller := c.callMagicLinkCheckComplete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return c.callMagicLinkCheckComplete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkCheckCompleteResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkCheckCompleteResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callMagicLinkCheckComplete(ctx context.Context, in *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
	out := new(MagicLinkCheckCompleteResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[33], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) UpdateCreatorCode(ctx context.Context, in *UpdateCreatorCodeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCreatorCode")
	caller := c.callUpdateCreatorCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateCreatorCodeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCreatorCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCreatorCodeParams) when calling interceptor")
					}
					return c.callUpdateCreatorCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callUpdateCreatorCode(ctx context.Context, in *UpdateCreatorCodeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[34], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) GetCreatorCodes(ctx context.Context, in *GetCreatorCodesParams) (*CodesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetCreatorCodes")
	caller := c.callGetCreatorCodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetCreatorCodesParams) (*CodesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCreatorCodesParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCreatorCodesParams) when calling interceptor")
					}
					return c.callGetCreatorCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callGetCreatorCodes(ctx context.Context, in *GetCreatorCodesParams) (*CodesResponse, error) {
	out := new(CodesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[35], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) GetAccessLogs(ctx context.Context, in *GuidInput) (*AccessLogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetAccessLogs")
	caller := c.callGetAccessLogs
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GuidInput) (*AccessLogResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return c.callGetAccessLogs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AccessLogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AccessLogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callGetAccessLogs(ctx context.Context, in *GuidInput) (*AccessLogResponse, error) {
	out := new(AccessLogResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[36], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) GetPromotions(ctx context.Context, in *GetPromotionsParams) (*PromotionsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "GetPromotions")
	caller := c.callGetPromotions
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetPromotionsParams) (*PromotionsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPromotionsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPromotionsParams) when calling interceptor")
					}
					return c.callGetPromotions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PromotionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PromotionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callGetPromotions(ctx context.Context, in *GetPromotionsParams) (*PromotionsResponse, error) {
	out := new(PromotionsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[37], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *identityJSONClient) ClaimPromoCode(ctx context.Context, in *ClaimPromoCodeParams) (*StatusResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithMethodName(ctx, "ClaimPromoCode")
	caller := c.callClaimPromoCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ClaimPromoCodeParams) (*StatusResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClaimPromoCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClaimPromoCodeParams) when calling interceptor")
					}
					return c.callClaimPromoCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *identityJSONClient) callClaimPromoCode(ctx context.Context, in *ClaimPromoCodeParams) (*StatusResponse, error) {
	out := new(StatusResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[38], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// Identity Server Handler
// =======================

type identityServer struct {
	Identity
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
}

// NewIdentityServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewIdentityServer(svc Identity, opts ...interface{}) TwirpServer {
	serverOpts := twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(&serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(&serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T on NewIdentityServer", o))
		}
	}

	return &identityServer{
		Identity:         svc,
		pathPrefix:       serverOpts.PathPrefix(),
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		hooks:            serverOpts.Hooks,
		jsonSkipDefaults: serverOpts.JSONSkipDefaults,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *identityServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// IdentityPathPrefix is a convenience constant that could used to identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// that add a "/twirp" prefix by default, and use CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const IdentityPathPrefix = "/twirp/pubg.globalaccounts.Identity/"

func (s *identityServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "pubg.globalaccounts")
	ctx = ctxsetters.WithServiceName(ctx, "Identity")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "pubg.globalaccounts.Identity" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateGlobalAccount":
		s.serveCreateGlobalAccount(ctx, resp, req)
		return
	case "FindOrInitGPPAccount":
		s.serveFindOrInitGPPAccount(ctx, resp, req)
		return
	case "DeleteGlobalAccount":
		s.serveDeleteGlobalAccount(ctx, resp, req)
		return
	case "GetGlobalAccount":
		s.serveGetGlobalAccount(ctx, resp, req)
		return
	case "ActivateGlobalAccount":
		s.serveActivateGlobalAccount(ctx, resp, req)
		return
	case "ResendActivation":
		s.serveResendActivation(ctx, resp, req)
		return
	case "BeginEmailChange":
		s.serveBeginEmailChange(ctx, resp, req)
		return
	case "CompleteEmailChange":
		s.serveCompleteEmailChange(ctx, resp, req)
		return
	case "UpdateUsername":
		s.serveUpdateUsername(ctx, resp, req)
		return
	case "UpdatePassword":
		s.serveUpdatePassword(ctx, resp, req)
		return
	case "BeginForgotPassword":
		s.serveBeginForgotPassword(ctx, resp, req)
		return
	case "CompleteForgotPassword":
		s.serveCompleteForgotPassword(ctx, resp, req)
		return
	case "SetCommPrefs":
		s.serveSetCommPrefs(ctx, resp, req)
		return
	case "SetPersona":
		s.serveSetPersona(ctx, resp, req)
		return
	case "LinkYoutube":
		s.serveLinkYoutube(ctx, resp, req)
		return
	case "LinkLitePC":
		s.serveLinkLitePC(ctx, resp, req)
		return
	case "CreateRelyingPartyLink":
		s.serveCreateRelyingPartyLink(ctx, resp, req)
		return
	case "CreateLink":
		s.serveCreateLink(ctx, resp, req)
		return
	case "DestroyLink":
		s.serveDestroyLink(ctx, resp, req)
		return
	case "CheckLink":
		s.serveCheckLink(ctx, resp, req)
		return
	case "GetLink":
		s.serveGetLink(ctx, resp, req)
		return
	case "VerifyPassword":
		s.serveVerifyPassword(ctx, resp, req)
		return
	case "GetPrevTwitch":
		s.serveGetPrevTwitch(ctx, resp, req)
		return
	case "BeginEnableTOTP":
		s.serveBeginEnableTOTP(ctx, resp, req)
		return
	case "CompleteEnableTOTP":
		s.serveCompleteEnableTOTP(ctx, resp, req)
		return
	case "RegenerateRecoveryTOPTCodes":
		s.serveRegenerateRecoveryTOPTCodes(ctx, resp, req)
		return
	case "SendTOTPCode":
		s.serveSendTOTPCode(ctx, resp, req)
		return
	case "VerifyTOTPCode":
		s.serveVerifyTOTPCode(ctx, resp, req)
		return
	case "CheckGUIDLinkDelay":
		s.serveCheckGUIDLinkDelay(ctx, resp, req)
		return
	case "SocialLoginLookup":
		s.serveSocialLoginLookup(ctx, resp, req)
		return
	case "SetPrefLang":
		s.serveSetPrefLang(ctx, resp, req)
		return
	case "MagicLinkGenerate":
		s.serveMagicLinkGenerate(ctx, resp, req)
		return
	case "MagicLinkValidate":
		s.serveMagicLinkValidate(ctx, resp, req)
		return
	case "MagicLinkCheckComplete":
		s.serveMagicLinkCheckComplete(ctx, resp, req)
		return
	case "UpdateCreatorCode":
		s.serveUpdateCreatorCode(ctx, resp, req)
		return
	case "GetCreatorCodes":
		s.serveGetCreatorCodes(ctx, resp, req)
		return
	case "GetAccessLogs":
		s.serveGetAccessLogs(ctx, resp, req)
		return
	case "GetPromotions":
		s.serveGetPromotions(ctx, resp, req)
		return
	case "ClaimPromoCode":
		s.serveClaimPromoCode(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *identityServer) serveCreateGlobalAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateGlobalAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateGlobalAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCreateGlobalAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateAccountParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CreateGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateAccountParams) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateAccountParams) when calling interceptor")
					}
					return s.Identity.CreateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling CreateGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCreateGlobalAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateAccountParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CreateGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateAccountParams) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateAccountParams) when calling interceptor")
					}
					return s.Identity.CreateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling CreateGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveFindOrInitGPPAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveFindOrInitGPPAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveFindOrInitGPPAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveFindOrInitGPPAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "FindOrInitGPPAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(FindOrInitGPPAccountParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.FindOrInitGPPAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*FindOrInitGPPAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*FindOrInitGPPAccountParams) when calling interceptor")
					}
					return s.Identity.FindOrInitGPPAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GPPAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GPPAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GPPAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GPPAccountResponse and nil error while calling FindOrInitGPPAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveFindOrInitGPPAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "FindOrInitGPPAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(FindOrInitGPPAccountParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.FindOrInitGPPAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *FindOrInitGPPAccountParams) (*GPPAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*FindOrInitGPPAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*FindOrInitGPPAccountParams) when calling interceptor")
					}
					return s.Identity.FindOrInitGPPAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GPPAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GPPAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GPPAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GPPAccountResponse and nil error while calling FindOrInitGPPAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveDeleteGlobalAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteGlobalAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteGlobalAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveDeleteGlobalAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DeleteAccountParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.DeleteGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteAccountParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteAccountParams) when calling interceptor")
					}
					return s.Identity.DeleteGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling DeleteGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveDeleteGlobalAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DeleteAccountParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.DeleteGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteAccountParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteAccountParams) when calling interceptor")
					}
					return s.Identity.DeleteGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling DeleteGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetGlobalAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetGlobalAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetGlobalAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveGetGlobalAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CriteriaQuery)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.GetGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CriteriaQuery) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CriteriaQuery)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CriteriaQuery) when calling interceptor")
					}
					return s.Identity.GetGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling GetGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetGlobalAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CriteriaQuery)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.GetGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CriteriaQuery) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CriteriaQuery)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CriteriaQuery) when calling interceptor")
					}
					return s.Identity.GetGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling GetGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveActivateGlobalAccount(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveActivateGlobalAccountJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveActivateGlobalAccountProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveActivateGlobalAccountJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ActivateGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ActivateAccountParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.ActivateGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ActivateAccountParams) (*TokenClaimResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ActivateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ActivateAccountParams) when calling interceptor")
					}
					return s.Identity.ActivateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TokenClaimResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokenClaimResponse and nil error while calling ActivateGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveActivateGlobalAccountProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ActivateGlobalAccount")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ActivateAccountParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.ActivateGlobalAccount
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ActivateAccountParams) (*TokenClaimResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ActivateAccountParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ActivateAccountParams) when calling interceptor")
					}
					return s.Identity.ActivateGlobalAccount(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TokenClaimResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokenClaimResponse and nil error while calling ActivateGlobalAccount. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveResendActivation(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveResendActivationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveResendActivationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveResendActivationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResendActivation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ResendActivationParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.ResendActivation
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResendActivationParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResendActivationParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResendActivationParams) when calling interceptor")
					}
					return s.Identity.ResendActivation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling ResendActivation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveResendActivationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ResendActivation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ResendActivationParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.ResendActivation
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ResendActivationParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ResendActivationParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ResendActivationParams) when calling interceptor")
					}
					return s.Identity.ResendActivation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling ResendActivation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveBeginEmailChange(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBeginEmailChangeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBeginEmailChangeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveBeginEmailChangeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BeginEmailChange")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(BeginEmailChangeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.BeginEmailChange
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BeginEmailChangeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginEmailChangeParams) when calling interceptor")
					}
					return s.Identity.BeginEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling BeginEmailChange. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveBeginEmailChangeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BeginEmailChange")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(BeginEmailChangeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.BeginEmailChange
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BeginEmailChangeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginEmailChangeParams) when calling interceptor")
					}
					return s.Identity.BeginEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling BeginEmailChange. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCompleteEmailChange(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCompleteEmailChangeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCompleteEmailChangeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCompleteEmailChangeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEmailChange")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CompleteEmailChangeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CompleteEmailChange
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEmailChangeParams) when calling interceptor")
					}
					return s.Identity.CompleteEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TokenClaimResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokenClaimResponse and nil error while calling CompleteEmailChange. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCompleteEmailChangeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEmailChange")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CompleteEmailChangeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CompleteEmailChange
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompleteEmailChangeParams) (*TokenClaimResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEmailChangeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEmailChangeParams) when calling interceptor")
					}
					return s.Identity.CompleteEmailChange(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TokenClaimResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokenClaimResponse and nil error while calling CompleteEmailChange. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveUpdateUsername(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateUsernameJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateUsernameProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveUpdateUsernameJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUsername")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateUsernameParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.UpdateUsername
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateUsernameParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateUsernameParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateUsernameParams) when calling interceptor")
					}
					return s.Identity.UpdateUsername(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling UpdateUsername. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveUpdateUsernameProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateUsername")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateUsernameParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.UpdateUsername
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateUsernameParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateUsernameParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateUsernameParams) when calling interceptor")
					}
					return s.Identity.UpdateUsername(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling UpdateUsername. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveUpdatePassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdatePasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdatePasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveUpdatePasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdatePasswordParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.UpdatePassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePasswordParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePasswordParams) when calling interceptor")
					}
					return s.Identity.UpdatePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling UpdatePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveUpdatePasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdatePassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdatePasswordParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.UpdatePassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdatePasswordParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdatePasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdatePasswordParams) when calling interceptor")
					}
					return s.Identity.UpdatePassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling UpdatePassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveBeginForgotPassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBeginForgotPasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBeginForgotPasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveBeginForgotPasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BeginForgotPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(BeginForgotPasswordParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.BeginForgotPassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BeginForgotPasswordParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginForgotPasswordParams) when calling interceptor")
					}
					return s.Identity.BeginForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling BeginForgotPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveBeginForgotPasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BeginForgotPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(BeginForgotPasswordParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.BeginForgotPassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *BeginForgotPasswordParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*BeginForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*BeginForgotPasswordParams) when calling interceptor")
					}
					return s.Identity.BeginForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling BeginForgotPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCompleteForgotPassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCompleteForgotPasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCompleteForgotPasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCompleteForgotPasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompleteForgotPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CompleteForgotPasswordParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CompleteForgotPassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteForgotPasswordParams) when calling interceptor")
					}
					return s.Identity.CompleteForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TokenClaimResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokenClaimResponse and nil error while calling CompleteForgotPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCompleteForgotPasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompleteForgotPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CompleteForgotPasswordParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CompleteForgotPassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompleteForgotPasswordParams) (*TokenClaimResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteForgotPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteForgotPasswordParams) when calling interceptor")
					}
					return s.Identity.CompleteForgotPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TokenClaimResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TokenClaimResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TokenClaimResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TokenClaimResponse and nil error while calling CompleteForgotPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSetCommPrefs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetCommPrefsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetCommPrefsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveSetCommPrefsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetCommPrefs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SetCommPrefsParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.SetCommPrefs
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetCommPrefsParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetCommPrefsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetCommPrefsParams) when calling interceptor")
					}
					return s.Identity.SetCommPrefs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SetCommPrefs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSetCommPrefsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetCommPrefs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SetCommPrefsParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.SetCommPrefs
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetCommPrefsParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetCommPrefsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetCommPrefsParams) when calling interceptor")
					}
					return s.Identity.SetCommPrefs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SetCommPrefs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSetPersona(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetPersonaJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetPersonaProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveSetPersonaJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetPersona")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SetPersonaParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.SetPersona
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetPersonaParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetPersonaParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetPersonaParams) when calling interceptor")
					}
					return s.Identity.SetPersona(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SetPersona. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSetPersonaProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetPersona")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SetPersonaParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.SetPersona
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SetPersonaParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SetPersonaParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SetPersonaParams) when calling interceptor")
					}
					return s.Identity.SetPersona(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SetPersona. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveLinkYoutube(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLinkYoutubeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLinkYoutubeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveLinkYoutubeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LinkYoutube")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidInput)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.LinkYoutube
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.LinkYoutube(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling LinkYoutube. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveLinkYoutubeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LinkYoutube")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.LinkYoutube
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.LinkYoutube(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling LinkYoutube. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveLinkLitePC(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveLinkLitePCJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveLinkLitePCProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveLinkLitePCJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LinkLitePC")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidInput)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.LinkLitePC
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.LinkLitePC(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling LinkLitePC. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveLinkLitePCProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "LinkLitePC")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.LinkLitePC
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.LinkLitePC(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling LinkLitePC. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCreateRelyingPartyLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateRelyingPartyLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateRelyingPartyLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCreateRelyingPartyLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateRelyingPartyLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateRelyingPartyLinkParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CreateRelyingPartyLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRelyingPartyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRelyingPartyLinkParams) when calling interceptor")
					}
					return s.Identity.CreateRelyingPartyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CreateRelyingPartyLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCreateRelyingPartyLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateRelyingPartyLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateRelyingPartyLinkParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CreateRelyingPartyLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateRelyingPartyLinkParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRelyingPartyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRelyingPartyLinkParams) when calling interceptor")
					}
					return s.Identity.CreateRelyingPartyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CreateRelyingPartyLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCreateLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCreateLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CreateLinkParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CreateLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateLinkParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateLinkParams) when calling interceptor")
					}
					return s.Identity.CreateLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CreateLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCreateLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CreateLinkParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CreateLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateLinkParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateLinkParams) when calling interceptor")
					}
					return s.Identity.CreateLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CreateLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveDestroyLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDestroyLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDestroyLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveDestroyLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DestroyLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DestroyLinkParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.DestroyLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DestroyLinkParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DestroyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DestroyLinkParams) when calling interceptor")
					}
					return s.Identity.DestroyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling DestroyLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveDestroyLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DestroyLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(DestroyLinkParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.DestroyLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DestroyLinkParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DestroyLinkParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DestroyLinkParams) when calling interceptor")
					}
					return s.Identity.DestroyLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling DestroyLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCheckLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCheckLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCheckLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCheckLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidProviderCombo)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CheckLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return s.Identity.CheckLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CheckLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCheckLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidProviderCombo)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CheckLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return s.Identity.CheckLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CheckLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveGetLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidProviderCombo)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.GetLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidProviderCombo) (*GetLinkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return s.Identity.GetLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLinkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLinkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetLinkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetLinkResponse and nil error while calling GetLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidProviderCombo)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.GetLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidProviderCombo) (*GetLinkResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return s.Identity.GetLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetLinkResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetLinkResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetLinkResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetLinkResponse and nil error while calling GetLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveVerifyPassword(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVerifyPasswordJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVerifyPasswordProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveVerifyPasswordJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(VerifyPasswordParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.VerifyPassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerifyPasswordParams) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyPasswordParams) when calling interceptor")
					}
					return s.Identity.VerifyPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling VerifyPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveVerifyPasswordProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyPassword")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(VerifyPasswordParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.VerifyPassword
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerifyPasswordParams) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyPasswordParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyPasswordParams) when calling interceptor")
					}
					return s.Identity.VerifyPassword(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling VerifyPassword. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetPrevTwitch(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPrevTwitchJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPrevTwitchProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveGetPrevTwitchJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPrevTwitch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetPrevTwitchParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.GetPrevTwitch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPrevTwitchParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPrevTwitchParams) when calling interceptor")
					}
					return s.Identity.GetPrevTwitch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrevTwitchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrevTwitchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrevTwitchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrevTwitchResponse and nil error while calling GetPrevTwitch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetPrevTwitchProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPrevTwitch")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetPrevTwitchParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.GetPrevTwitch
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPrevTwitchParams) (*PrevTwitchResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPrevTwitchParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPrevTwitchParams) when calling interceptor")
					}
					return s.Identity.GetPrevTwitch(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrevTwitchResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrevTwitchResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrevTwitchResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrevTwitchResponse and nil error while calling GetPrevTwitch. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveBeginEnableTOTP(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveBeginEnableTOTPJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveBeginEnableTOTPProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveBeginEnableTOTPJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BeginEnableTOTP")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidInput)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.BeginEnableTOTP
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*BeginEnableTOTPResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.BeginEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BeginEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BeginEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BeginEnableTOTPResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BeginEnableTOTPResponse and nil error while calling BeginEnableTOTP. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveBeginEnableTOTPProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "BeginEnableTOTP")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.BeginEnableTOTP
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*BeginEnableTOTPResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.BeginEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*BeginEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*BeginEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *BeginEnableTOTPResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BeginEnableTOTPResponse and nil error while calling BeginEnableTOTP. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCompleteEnableTOTP(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCompleteEnableTOTPJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCompleteEnableTOTPProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCompleteEnableTOTPJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEnableTOTP")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CompleteEnableTOTPParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CompleteEnableTOTP
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEnableTOTPParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEnableTOTPParams) when calling interceptor")
					}
					return s.Identity.CompleteEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompleteEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompleteEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CompleteEnableTOTPResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CompleteEnableTOTPResponse and nil error while calling CompleteEnableTOTP. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCompleteEnableTOTPProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CompleteEnableTOTP")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(CompleteEnableTOTPParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CompleteEnableTOTP
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CompleteEnableTOTPParams) (*CompleteEnableTOTPResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CompleteEnableTOTPParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CompleteEnableTOTPParams) when calling interceptor")
					}
					return s.Identity.CompleteEnableTOTP(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CompleteEnableTOTPResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CompleteEnableTOTPResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CompleteEnableTOTPResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CompleteEnableTOTPResponse and nil error while calling CompleteEnableTOTP. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveRegenerateRecoveryTOPTCodes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegenerateRecoveryTOPTCodesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegenerateRecoveryTOPTCodesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveRegenerateRecoveryTOPTCodesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegenerateRecoveryTOPTCodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidInput)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.RegenerateRecoveryTOPTCodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.RegenerateRecoveryTOPTCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling RegenerateRecoveryTOPTCodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveRegenerateRecoveryTOPTCodesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegenerateRecoveryTOPTCodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.RegenerateRecoveryTOPTCodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.RegenerateRecoveryTOPTCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling RegenerateRecoveryTOPTCodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSendTOTPCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSendTOTPCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSendTOTPCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveSendTOTPCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendTOTPCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidInput)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.SendTOTPCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.SendTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SendTOTPCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSendTOTPCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SendTOTPCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.SendTOTPCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.SendTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SendTOTPCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveVerifyTOTPCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveVerifyTOTPCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveVerifyTOTPCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveVerifyTOTPCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyTOTPCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(VerifyTOTPCodeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.VerifyTOTPCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerifyTOTPCodeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyTOTPCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyTOTPCodeParams) when calling interceptor")
					}
					return s.Identity.VerifyTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling VerifyTOTPCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveVerifyTOTPCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "VerifyTOTPCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(VerifyTOTPCodeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.VerifyTOTPCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *VerifyTOTPCodeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*VerifyTOTPCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*VerifyTOTPCodeParams) when calling interceptor")
					}
					return s.Identity.VerifyTOTPCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling VerifyTOTPCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCheckGUIDLinkDelay(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCheckGUIDLinkDelayJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCheckGUIDLinkDelayProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveCheckGUIDLinkDelayJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckGUIDLinkDelay")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidProviderCombo)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.CheckGUIDLinkDelay
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return s.Identity.CheckGUIDLinkDelay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CheckGUIDLinkDelay. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveCheckGUIDLinkDelayProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CheckGUIDLinkDelay")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidProviderCombo)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.CheckGUIDLinkDelay
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidProviderCombo) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidProviderCombo)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidProviderCombo) when calling interceptor")
					}
					return s.Identity.CheckGUIDLinkDelay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling CheckGUIDLinkDelay. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSocialLoginLookup(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSocialLoginLookupJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSocialLoginLookupProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveSocialLoginLookupJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SocialLoginLookup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SocialLoginParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.SocialLoginLookup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SocialLoginParams) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocialLoginParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocialLoginParams) when calling interceptor")
					}
					return s.Identity.SocialLoginLookup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling SocialLoginLookup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSocialLoginLookupProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SocialLoginLookup")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(SocialLoginParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.SocialLoginLookup
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SocialLoginParams) (*GlobalAccountResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SocialLoginParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SocialLoginParams) when calling interceptor")
					}
					return s.Identity.SocialLoginLookup(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GlobalAccountResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GlobalAccountResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GlobalAccountResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GlobalAccountResponse and nil error while calling SocialLoginLookup. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSetPrefLang(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetPrefLangJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSetPrefLangProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveSetPrefLangJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetPrefLang")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(PreferredLangParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.SetPrefLang
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PreferredLangParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PreferredLangParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PreferredLangParams) when calling interceptor")
					}
					return s.Identity.SetPrefLang(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SetPrefLang. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveSetPrefLangProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SetPrefLang")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(PreferredLangParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.SetPrefLang
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PreferredLangParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PreferredLangParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PreferredLangParams) when calling interceptor")
					}
					return s.Identity.SetPrefLang(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling SetPrefLang. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveMagicLinkGenerate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMagicLinkGenerateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMagicLinkGenerateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveMagicLinkGenerateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkGenerate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MagicLinkGenerateParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.MagicLinkGenerate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkGenerateParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkGenerateParams) when calling interceptor")
					}
					return s.Identity.MagicLinkGenerate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkGenerateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkGenerateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MagicLinkGenerateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MagicLinkGenerateResponse and nil error while calling MagicLinkGenerate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveMagicLinkGenerateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkGenerate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MagicLinkGenerateParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.MagicLinkGenerate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MagicLinkGenerateParams) (*MagicLinkGenerateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkGenerateParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkGenerateParams) when calling interceptor")
					}
					return s.Identity.MagicLinkGenerate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkGenerateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkGenerateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MagicLinkGenerateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MagicLinkGenerateResponse and nil error while calling MagicLinkGenerate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveMagicLinkValidate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMagicLinkValidateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMagicLinkValidateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveMagicLinkValidateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkValidate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MagicLinkCodeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.MagicLinkValidate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return s.Identity.MagicLinkValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MagicLinkValidateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MagicLinkValidateResponse and nil error while calling MagicLinkValidate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveMagicLinkValidateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkValidate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MagicLinkCodeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.MagicLinkValidate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkValidateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return s.Identity.MagicLinkValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MagicLinkValidateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MagicLinkValidateResponse and nil error while calling MagicLinkValidate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveMagicLinkCheckComplete(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveMagicLinkCheckCompleteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveMagicLinkCheckCompleteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveMagicLinkCheckCompleteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkCheckComplete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(MagicLinkCodeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.MagicLinkCheckComplete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return s.Identity.MagicLinkCheckComplete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkCheckCompleteResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkCheckCompleteResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MagicLinkCheckCompleteResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MagicLinkCheckCompleteResponse and nil error while calling MagicLinkCheckComplete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveMagicLinkCheckCompleteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "MagicLinkCheckComplete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(MagicLinkCodeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.MagicLinkCheckComplete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *MagicLinkCodeParams) (*MagicLinkCheckCompleteResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*MagicLinkCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*MagicLinkCodeParams) when calling interceptor")
					}
					return s.Identity.MagicLinkCheckComplete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*MagicLinkCheckCompleteResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*MagicLinkCheckCompleteResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *MagicLinkCheckCompleteResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *MagicLinkCheckCompleteResponse and nil error while calling MagicLinkCheckComplete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveUpdateCreatorCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateCreatorCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateCreatorCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveUpdateCreatorCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCreatorCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateCreatorCodeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.UpdateCreatorCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateCreatorCodeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCreatorCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCreatorCodeParams) when calling interceptor")
					}
					return s.Identity.UpdateCreatorCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling UpdateCreatorCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveUpdateCreatorCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateCreatorCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(UpdateCreatorCodeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.UpdateCreatorCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateCreatorCodeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateCreatorCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateCreatorCodeParams) when calling interceptor")
					}
					return s.Identity.UpdateCreatorCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling UpdateCreatorCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetCreatorCodes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetCreatorCodesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetCreatorCodesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveGetCreatorCodesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCreatorCodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetCreatorCodesParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.GetCreatorCodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCreatorCodesParams) (*CodesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCreatorCodesParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCreatorCodesParams) when calling interceptor")
					}
					return s.Identity.GetCreatorCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CodesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CodesResponse and nil error while calling GetCreatorCodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetCreatorCodesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetCreatorCodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetCreatorCodesParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.GetCreatorCodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetCreatorCodesParams) (*CodesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetCreatorCodesParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetCreatorCodesParams) when calling interceptor")
					}
					return s.Identity.GetCreatorCodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CodesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CodesResponse and nil error while calling GetCreatorCodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetAccessLogs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAccessLogsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAccessLogsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveGetAccessLogsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAccessLogs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GuidInput)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.GetAccessLogs
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*AccessLogResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.GetAccessLogs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AccessLogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AccessLogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AccessLogResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AccessLogResponse and nil error while calling GetAccessLogs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetAccessLogsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAccessLogs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GuidInput)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.GetAccessLogs
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GuidInput) (*AccessLogResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GuidInput)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GuidInput) when calling interceptor")
					}
					return s.Identity.GetAccessLogs(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AccessLogResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AccessLogResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AccessLogResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AccessLogResponse and nil error while calling GetAccessLogs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetPromotions(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPromotionsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPromotionsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveGetPromotionsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPromotions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetPromotionsParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.GetPromotions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPromotionsParams) (*PromotionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPromotionsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPromotionsParams) when calling interceptor")
					}
					return s.Identity.GetPromotions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PromotionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PromotionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PromotionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PromotionsResponse and nil error while calling GetPromotions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveGetPromotionsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPromotions")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(GetPromotionsParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.GetPromotions
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetPromotionsParams) (*PromotionsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetPromotionsParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetPromotionsParams) when calling interceptor")
					}
					return s.Identity.GetPromotions(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PromotionsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PromotionsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PromotionsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PromotionsResponse and nil error while calling GetPromotions. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveClaimPromoCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveClaimPromoCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveClaimPromoCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *identityServer) serveClaimPromoCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ClaimPromoCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ClaimPromoCodeParams)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the json request could not be decoded"))
		return
	}

	handler := s.Identity.ClaimPromoCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ClaimPromoCodeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClaimPromoCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClaimPromoCodeParams) when calling interceptor")
					}
					return s.Identity.ClaimPromoCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling ClaimPromoCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true, EmitDefaults: !s.jsonSkipDefaults}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	respBytes := buf.Bytes()
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) serveClaimPromoCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ClaimPromoCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to read request body"))
		return
	}
	reqContent := new(ClaimPromoCodeParams)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Identity.ClaimPromoCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ClaimPromoCodeParams) (*StatusResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClaimPromoCodeParams)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClaimPromoCodeParams) when calling interceptor")
					}
					return s.Identity.ClaimPromoCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*StatusResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*StatusResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *StatusResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *StatusResponse and nil error while calling ClaimPromoCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *identityServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *identityServer) ProtocGenTwirpVersion() string {
	return "v7.1.0"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *identityServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "pubg.globalaccounts", "Identity")
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler

	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// github.com/golang/protobuf/protoc-gen-go/descriptor.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)

	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string

	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route Twirp requests.
	// The path prefix is in the form: "/<prefix>/<package>.<Service>/"
	// that is, everything in a Twirp route except for the <Method> at the end.
	PathPrefix() string
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Non-twirp errors are wrapped as Internal (default)
	twerr, ok := err.(twirp.Error)
	if !ok {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// sanitizeBaseURL parses the the baseURL, and adds the "http" scheme if needed.
// If the URL is unparsable, the baseURL is returned unchaged.
func sanitizeBaseURL(baseURL string) string {
	u, err := url.Parse(baseURL)
	if err != nil {
		return baseURL // invalid URL will fail later when making requests
	}
	if u.Scheme == "" {
		u.Scheme = "http"
	}
	return u.String()
}

// baseServicePath composes the path prefix for the service (without <Method>).
// e.g.: baseServicePath("/twirp", "my.pkg", "MyService")
//       returns => "/twirp/my.pkg.MyService/"
// e.g.: baseServicePath("", "", "MyService")
//       returns => "/MyService/"
func baseServicePath(prefix, pkg, service string) string {
	fullServiceName := service
	if pkg != "" {
		fullServiceName = pkg + "." + service
	}
	return path.Join("/", prefix, fullServiceName) + "/"
}

// parseTwirpPath extracts path components form a valid Twirp route.
// Expected format: "[<prefix>]/<package>.<Service>/<Method>"
// e.g.: prefix, pkgService, method := parseTwirpPath("/twirp/pkg.Svc/MakeHat")
func parseTwirpPath(path string) (string, string, string) {
	parts := strings.Split(path, "/")
	if len(parts) < 2 {
		return "", "", ""
	}
	method := parts[len(parts)-1]
	pkgService := parts[len(parts)-2]
	prefix := strings.Join(parts[0:len(parts)-2], "/")
	return prefix, pkgService, method
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v7.1.0")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}

	var tj twerrJSON
	dec := json.NewDecoder(bytes.NewReader(respBodyBytes))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&tj); err != nil || tj.Code == "" {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg).WithMeta("body", string(respBodyBytes))
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429: // Too Many Requests
			code = twirp.ResourceExhausted
		case 502, 503, 504: // Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }
func (e *wrappedError) Unwrap() error { return e.cause } // for go1.13 + errors.Is/As
func (e *wrappedError) Cause() error  { return e.cause } // for github.com/pkg/errors

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause,
// but the original error message is not exposed on Msg(). The original error
// can be checked with go1.13+ errors.Is/As, and also by (github.com/pkg/errors).Unwrap
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Unwrap() error                               { return e.cause } // for go1.13 + errors.Is/As
func (e *internalWithCause) Cause() error                                { return e.cause } // for github.com/pkg/errors
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// malformedRequestError is used when the twirp server cannot unmarshal a request
func malformedRequestError(msg string) twirp.Error {
	return twirp.NewError(twirp.Malformed, msg)
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	respBodyBytes, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return ctx, wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal proto response")
	}
	return ctx, nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	reqBody := bytes.NewBuffer(nil)
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(reqBody, in); err != nil {
		return ctx, wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/json")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(resp.Body, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}
	return ctx, nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

func callClientResponseReceived(ctx context.Context, h *twirp.ClientHooks) {
	if h == nil || h.ResponseReceived == nil {
		return
	}
	h.ResponseReceived(ctx)
}

func callClientRequestPrepared(ctx context.Context, h *twirp.ClientHooks, req *http.Request) (context.Context, error) {
	if h == nil || h.RequestPrepared == nil {
		return ctx, nil
	}
	return h.RequestPrepared(ctx, req)
}

func callClientError(ctx context.Context, h *twirp.ClientHooks, err twirp.Error) {
	if h == nil || h.Error == nil {
		return
	}
	h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 5135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3c, 0x5d, 0x6f, 0x1b, 0x57,
	0x76, 0x1d, 0x91, 0x12, 0xa9, 0xa3, 0xaf, 0xf1, 0x95, 0x6c, 0xd3, 0xb2, 0x63, 0x3b, 0x13, 0xc7,
	0x51, 0xbe, 0xe4, 0x8d, 0xb3, 0x1b, 0xa7, 0xc9, 0x26, 0x5d, 0x49, 0x94, 0xb5, 0x4c, 0x64, 0x89,
	0x21, 0x25, 0x27, 0x0d, 0x02, 0x34, 0x23, 0xce, 0x15, 0x35, 0xd1, 0x70, 0x86, 0x3b, 0x73, 0x29,
	0x9b, 0x4d, 0x81, 0x2d, 0x0a, 0xb4, 0x5b, 0xb4, 0x40, 0x9f, 0xda, 0xa7, 0xee, 0x07, 0x16, 0x45,
	0xd1, 0x62, 0x8b, 0xfd, 0x03, 0x05, 0xda, 0x87, 0x3e, 0x15, 0xd8, 0xf6, 0xa5, 0x4f, 0x2d, 0xd0,
	0xe7, 0x7d, 0x69, 0x9f, 0x8a, 0x16, 0x68, 0x81, 0x3e, 0x2c, 0xee, 0xe7, 0xdc, 0x19, 0xce, 0x50,
	0x74, 0x24, 0x3a, 0x7e, 0xe3, 0x3d, 0xf7, 0xdc, 0x39, 0x1f, 0xf7, 0xdc, 0x73, 0xee, 0xc7, 0x39,
	0x84, 0xab, 0x61, 0xb7, 0x75, 0xc7, 0x75, 0xb0, 0x4f, 0x5c, 0xd2, 0x57, 0x3f, 0x56, 0xbb, 0x61,
	0x40, 0x02, 0xb4, 0xd8, 0xed, 0x1d, 0xb4, 0x57, 0xdb, 0x5e, 0x70, 0x60, 0x7b, 0x76, 0xab, 0x15,
	0xf4, 0x7c, 0x12, 0x59, 0xff, 0x60, 0x40, 0x79, 0x3f, 0xc2, 0x61, 0xd5, 0x26, 0x36, 0x9a, 0x87,
	0x89, 0x5a, 0xbd, 0x62, 0xdc, 0x34, 0x56, 0xa6, 0x1b, 0x13, 0xb5, 0x3a, 0xba, 0x04, 0x53, 0xdb,
	0x41, 0xcb, 0xf6, 0x70, 0x65, 0x82, 0xc1, 0x44, 0x0b, 0x55, 0xa0, 0xd4, 0xc0, 0x5e, 0xdf, 0xf5,
	0xdb, 0x95, 0x02, 0xeb, 0x90, 0x4d, 0xf4, 0x2e, 0x14, 0x1f, 0x60, 0x62, 0x57, 0x8a, 0x37, 0x0b,
	0x2b, 0x33, 0x77, 0x5f, 0x5a, 0xcd, 0x20, 0xb9, 0x2a, 0xc9, 0xad, 0x52, 0xcc, 0x4d, 0x9f, 0x84,
	0xfd, 0x06, 0x1b, 0xb4, 0x7c, 0x0f, 0xa6, 0x15, 0x08, 0x99, 0x50, 0x38, 0xc6, 0x7d, 0xc1, 0x0c,
	0xfd, 0x89, 0x96, 0x60, 0xf2, 0xc4, 0xf6, 0x7a, 0x92, 0x19, 0xde, 0x78, 0x67, 0xe2, 0x6d, 0xc3,
	0xfa, 0xe7, 0x02, 0x2c, 0x6e, 0x84, 0xd8, 0x26, 0x78, 0x8d, 0x13, 0xa9, 0xdb, 0xa1, 0xdd, 0x89,
	0xd0, 0x1b, 0x50, 0xa4, 0xc4, 0xd8, 0x47, 0x66, 0xee, 0x3e, 0x37, 0x94, 0x9b, 0x06, 0x43, 0xa5,
	0x44, 0x36, 0x3b, 0xb6, 0xeb, 0x49, 0x22, 0xac, 0x81, 0x96, 0xa1, 0x5c, 0xb7, 0xa3, 0xe8, 0x51,
	0x10, 0x3a, 0x95, 0x22, 0xeb, 0x50, 0x6d, 0x74, 0x17, 0x96, 0xe4, 0xef, 0x8d, 0xc0, 0x3f, 0x74,
	0xc3, 0x8e, 0x4d, 0xdc, 0xc0, 0xaf, 0x4c, 0x32, 0xbc, 0xcc, 0x3e, 0x74, 0x13, 0x66, 0xaa, 0x36,
	0xc1, 0xbb, 0x87, 0xeb, 0x6e, 0x48, 0x8e, 0x2a, 0x53, 0x37, 0x8d, 0x95, 0x42, 0x43, 0x07, 0x51,
	0x15, 0x6f, 0x50, 0x06, 0xc3, 0x7e, 0xa5, 0xc4, 0x55, 0x2c, 0x9a, 0xe8, 0x3a, 0x00, 0x63, 0x6a,
	0xb7, 0x4b, 0x6a, 0x7e, 0xa5, 0x7c, 0xd3, 0x58, 0x29, 0x37, 0x34, 0x08, 0xfd, 0xf6, 0x5e, 0x10,
	0xad, 0xb5, 0x5a, 0xb8, 0x4b, 0xb0, 0x53, 0x99, 0x66, 0x08, 0x3a, 0x88, 0x4a, 0xb3, 0xe1, 0xb9,
	0xd8, 0x27, 0xb5, 0x6a, 0x05, 0xb8, 0x34, 0xb2, 0x8d, 0xde, 0x83, 0xf2, 0xb6, 0xeb, 0x1f, 0xd7,
	0xfc, 0xc3, 0xa0, 0x32, 0xcb, 0xd4, 0xf6, 0x7c, 0xa6, 0xda, 0xd6, 0x7a, 0xe4, 0x48, 0x22, 0x36,
	0xd4, 0x10, 0x64, 0xc1, 0xec, 0x5a, 0x8b, 0xb8, 0x27, 0x36, 0xc1, 0x7b, 0x38, 0x22, 0x95, 0x39,
	0xf6, 0xf9, 0x04, 0x8c, 0x92, 0xa7, 0xaa, 0xf6, 0xed, 0x0e, 0xae, 0xcc, 0x73, 0xf2, 0xb2, 0xfd,
	0x41, 0xb1, 0x5c, 0x30, 0x8b, 0xd6, 0x9f, 0x18, 0xb0, 0x7c, 0xdf, 0xf5, 0x9d, 0xdd, 0xb0, 0xe6,
	0xbb, 0x64, 0xab, 0x5e, 0x4f, 0x4e, 0x2b, 0x25, 0xd2, 0x23, 0x47, 0xf5, 0x30, 0x38, 0x71, 0x1d,
	0x31, 0xbd, 0x94, 0x88, 0x06, 0x43, 0xb7, 0x61, 0x5e, 0x6f, 0xd7, 0xaa, 0x62, 0x42, 0x53, 0x50,
	0x74, 0x0b, 0xe6, 0xb6, 0xec, 0x8e, 0xb4, 0x9b, 0x5a, 0x55, 0x18, 0x74, 0x12, 0x68, 0xfd, 0xa5,
	0x01, 0x28, 0x66, 0xa3, 0x81, 0xa3, 0x6e, 0xe0, 0x47, 0x18, 0xdd, 0x83, 0xe2, 0x46, 0xe0, 0x60,
	0xc6, 0xc0, 0xfc, 0xdd, 0x17, 0x32, 0x15, 0xb5, 0x6e, 0xb7, 0x8e, 0xb1, 0xef, 0x6c, 0x86, 0x21,
	0x45, 0x6d, 0xb0, 0x01, 0x74, 0x76, 0x1f, 0xe0, 0x28, 0xb2, 0xdb, 0xd2, 0x98, 0x65, 0x13, 0x7d,
	0x1b, 0x4a, 0x82, 0x0a, 0xe3, 0x64, 0xe6, 0xae, 0x95, 0xf9, 0xd5, 0x2d, 0xd6, 0x94, 0xfc, 0xc8,
	0x21, 0xd6, 0x1f, 0x4c, 0x71, 0xd5, 0xa8, 0xf9, 0xa0, 0x86, 0x9b, 0x54, 0x93, 0x6a, 0xa3, 0x35,
	0x28, 0xdf, 0xb7, 0x5b, 0xf8, 0x20, 0x08, 0x8e, 0x05, 0xad, 0x17, 0x33, 0x69, 0x49, 0xa4, 0x78,
	0xba, 0x25, 0x04, 0xbd, 0x0b, 0x53, 0x5b, 0x41, 0xd0, 0xf6, 0x30, 0x5b, 0x15, 0x33, 0x39, 0x2a,
	0xe0, 0x28, 0x6a, 0xb8, 0x18, 0x82, 0xbe, 0x05, 0xc5, 0x6d, 0xd7, 0xc7, 0x6c, 0xa1, 0xe4, 0x99,
	0x19, 0x45, 0x50, 0x03, 0x19, 0x3a, 0xfa, 0x00, 0x66, 0xea, 0x9e, 0xdd, 0x8f, 0x08, 0x5f, 0x66,
	0x53, 0x6c, 0xf4, 0x4a, 0xe6, 0x68, 0x0d, 0x4f, 0x7d, 0x44, 0x1f, 0x8c, 0xde, 0x86, 0xc9, 0x26,
	0xc1, 0x76, 0x87, 0xad, 0xb1, 0x3c, 0x5d, 0x33, 0x0c, 0x35, 0x9e, 0x0f, 0xa0, 0x92, 0xef, 0x3d,
	0x72, 0x49, 0xeb, 0x88, 0xad, 0xc0, 0x3c, 0xc9, 0x39, 0x4a, 0x2c, 0x39, 0x6f, 0xa3, 0xf7, 0xa1,
	0x44, 0x7f, 0x11, 0x1c, 0xb2, 0xe5, 0x39, 0x73, 0xf7, 0x56, 0xee, 0x68, 0x82, 0x43, 0x35, 0x5c,
	0x0e, 0x42, 0x77, 0x60, 0xe2, 0xe1, 0x87, 0x6c, 0xe9, 0xce, 0xdc, 0xbd, 0x91, 0x39, 0xf4, 0xe1,
	0x87, 0x6a, 0xd4, 0xc4, 0xc3, 0x0f, 0xa9, 0xaa, 0x3f, 0x39, 0x08, 0x1e, 0x57, 0x66, 0x86, 0xa8,
	0x9a, 0x22, 0xc4, 0xaa, 0xa6, 0x2d, 0x2a, 0x64, 0x93, 0xd8, 0x8e, 0x6b, 0x0b, 0x57, 0xf0, 0x42,
	0x8e, 0x7e, 0x28, 0x4a, 0x2c, 0x24, 0x6f, 0x53, 0x21, 0xab, 0x6e, 0xd4, 0xa2, 0x2e, 0x73, 0x6e,
	0x88, 0x90, 0x02, 0x27, 0x16, 0x52, 0x00, 0x28, 0xf1, 0x06, 0x76, 0x1c, 0x97, 0x30, 0x27, 0x91,
	0x47, 0x9c, 0xa3, 0xc4, 0xc4, 0x79, 0xdb, 0xfa, 0x1d, 0x30, 0xd3, 0x66, 0xcb, 0xa2, 0x5b, 0x55,
	0x45, 0xb7, 0x2a, 0x73, 0xc2, 0x6e, 0xd4, 0xf5, 0xec, 0xfe, 0x0e, 0x75, 0x45, 0x7c, 0x21, 0xea,
	0x20, 0x8a, 0x41, 0x9d, 0x66, 0x14, 0xed, 0x05, 0xc7, 0xd8, 0x17, 0xae, 0x41, 0x07, 0xc5, 0xe1,
	0xa2, 0xa8, 0x85, 0x0b, 0xeb, 0xc7, 0x06, 0xcc, 0x27, 0x8d, 0x7e, 0x2c, 0xc4, 0x2d, 0x98, 0x6d,
	0xe0, 0xc3, 0x10, 0x47, 0x47, 0x1c, 0x85, 0xf3, 0x90, 0x80, 0xc5, 0x0c, 0x4e, 0xea, 0x0c, 0xfe,
	0xd0, 0x80, 0x59, 0x7d, 0x69, 0x3d, 0x63, 0xec, 0xfd, 0x6e, 0x01, 0x16, 0x33, 0xd6, 0x2e, 0xba,
	0x06, 0xd3, 0xb1, 0xa3, 0xe6, 0xcc, 0xc6, 0x80, 0x73, 0xe1, 0xd9, 0x84, 0xc2, 0x5a, 0x9b, 0x7b,
	0xb3, 0xc9, 0x06, 0xfd, 0x89, 0x56, 0x60, 0x61, 0x23, 0xe8, 0x74, 0x7a, 0xbe, 0x4b, 0xfa, 0xd5,
	0xa0, 0x63, 0xbb, 0x32, 0xb2, 0xa7, 0xc1, 0x59, 0x41, 0x7d, 0x3a, 0x19, 0xd4, 0x97, 0xa1, 0xbc,
	0x6d, 0xfb, 0xed, 0x1e, 0xf5, 0xfb, 0x3c, 0xaa, 0xab, 0x36, 0xfa, 0x08, 0x16, 0xea, 0x76, 0x88,
	0x7d, 0x62, 0x7b, 0x1b, 0x81, 0x4f, 0xc2, 0xc0, 0x13, 0x9e, 0x25, 0x7b, 0x13, 0x55, 0x6f, 0xee,
	0xa4, 0xd0, 0x1b, 0xe9, 0xf1, 0x74, 0xfb, 0xd6, 0xc0, 0x6d, 0xea, 0x24, 0xa7, 0xf9, 0xf6, 0x8d,
	0xb7, 0xe8, 0xc4, 0xd4, 0xa2, 0x66, 0xef, 0x40, 0x06, 0x1a, 0x60, 0x5b, 0x84, 0x04, 0x8c, 0x86,
	0x60, 0x34, 0x48, 0x83, 0xcf, 0x69, 0x44, 0x42, 0xb7, 0x45, 0x36, 0x8e, 0x6c, 0xc2, 0x26, 0xa1,
	0xdc, 0x48, 0xc0, 0xa8, 0x1e, 0x64, 0x7b, 0x7f, 0xeb, 0x01, 0x9b, 0x87, 0x72, 0x43, 0x07, 0xd1,
	0x2d, 0x93, 0x6c, 0x36, 0x49, 0x10, 0x62, 0xfa, 0x75, 0x2c, 0x22, 0x5e, 0xb9, 0x91, 0xd9, 0x67,
	0xfd, 0xa1, 0x01, 0xf3, 0xc9, 0xc5, 0xfe, 0x75, 0x19, 0xad, 0xb5, 0x0e, 0xf3, 0x49, 0x9f, 0xf7,
	0xe4, 0x9c, 0x58, 0xbf, 0x0d, 0x73, 0x89, 0xb8, 0xf2, 0x15, 0x84, 0xb9, 0x07, 0x53, 0xf5, 0xa3,
	0x80, 0x04, 0x51, 0xa5, 0xc0, 0x76, 0xdb, 0x37, 0xf2, 0xa3, 0x17, 0xc3, 0x6b, 0x08, 0x74, 0xcb,
	0x02, 0x88, 0xa1, 0x74, 0x09, 0x3e, 0x64, 0xdb, 0x6a, 0x4e, 0x9b, 0x37, 0xac, 0xbf, 0x35, 0x60,
	0x3e, 0x19, 0xbd, 0x9e, 0x2d, 0x1f, 0x91, 0xd8, 0x45, 0x4e, 0x25, 0x77, 0x91, 0xd6, 0x97, 0xb0,
	0x90, 0x8a, 0x9d, 0x4f, 0xd1, 0xf9, 0x9f, 0x00, 0xc4, 0xd1, 0xf7, 0x29, 0xd2, 0xfd, 0x99, 0x01,
	0xb3, 0x7a, 0x0c, 0x47, 0x08, 0x8a, 0x9f, 0xec, 0x2b, 0xe2, 0xec, 0xf7, 0x53, 0x9b, 0xb3, 0xeb,
	0x00, 0x0f, 0x6d, 0xcf, 0x75, 0xf6, 0x7d, 0x22, 0x26, 0xae, 0xd0, 0xd0, 0x20, 0xd6, 0xef, 0x17,
	0x60, 0x21, 0x15, 0xf9, 0x07, 0x54, 0xa5, 0xcf, 0xf0, 0x44, 0x72, 0x86, 0xe9, 0xb6, 0x9d, 0x0e,
	0x0f, 0xdd, 0x8e, 0xeb, 0xdb, 0x24, 0x08, 0xe5, 0xb6, 0x3d, 0x01, 0xcc, 0x56, 0x14, 0xfd, 0xee,
	0x43, 0x1c, 0xba, 0x87, 0x2e, 0x76, 0x18, 0x67, 0xe5, 0x86, 0x6a, 0x53, 0xff, 0xbf, 0x1e, 0x10,
	0x66, 0x50, 0xe5, 0x06, 0xfd, 0x99, 0xd6, 0x47, 0xe9, 0x74, 0x7d, 0x94, 0x33, 0xf4, 0x71, 0x0d,
	0xa6, 0x37, 0x1f, 0x77, 0xdd, 0x10, 0x47, 0x35, 0xee, 0x8d, 0x0b, 0x8d, 0x18, 0x40, 0xb5, 0xb5,
	0x76, 0x62, 0x13, 0x3b, 0xfc, 0xae, 0x1d, 0x1d, 0x89, 0x23, 0x99, 0x06, 0xa1, 0x3c, 0xd4, 0x43,
	0xdc, 0x71, 0x7b, 0x9d, 0xbd, 0x7e, 0x17, 0xb3, 0x5d, 0x5c, 0xa1, 0xa1, 0x83, 0xa8, 0xa4, 0xf7,
	0x3d, 0xbb, 0x1d, 0xb1, 0x8d, 0x5a, 0xa1, 0xc1, 0x1b, 0x6c, 0x5c, 0xef, 0xc0, 0x73, 0x5b, 0xbc,
	0x6f, 0x4e, 0x8c, 0x8b, 0x41, 0xd6, 0x63, 0x58, 0xac, 0x62, 0x0f, 0x9f, 0xc3, 0xc1, 0x19, 0x41,
	0x71, 0x6b, 0x5f, 0x1d, 0xb3, 0xd8, 0xef, 0xc4, 0xb1, 0xb9, 0x90, 0x3c, 0x36, 0x5b, 0x3f, 0x31,
	0xe0, 0x52, 0x03, 0x47, 0xd8, 0x77, 0xc4, 0xe1, 0xd0, 0x0d, 0xfc, 0x73, 0xa7, 0xae, 0x8e, 0xb9,
	0x85, 0xd4, 0x31, 0x37, 0x7d, 0x4e, 0x2d, 0x0e, 0x9e, 0x53, 0x2d, 0x1f, 0xa6, 0xb7, 0x7a, 0xae,
	0x53, 0xf3, 0xbb, 0x3d, 0xf2, 0x14, 0x78, 0xb2, 0x36, 0xe0, 0x02, 0xa5, 0x27, 0xcf, 0x67, 0x1b,
	0x41, 0xe7, 0x20, 0x50, 0x1f, 0x31, 0x52, 0x6a, 0x95, 0x87, 0xba, 0x89, 0xe4, 0xa1, 0xce, 0x3a,
	0x81, 0x0b, 0x55, 0x1a, 0x3e, 0x83, 0x3e, 0x5d, 0x57, 0xe7, 0x3f, 0x9d, 0x92, 0x6e, 0x21, 0x45,
	0x77, 0x17, 0xe6, 0x36, 0x42, 0x97, 0xe0, 0xd0, 0xb5, 0x3f, 0xea, 0xe1, 0xb0, 0xcf, 0x24, 0x15,
	0x00, 0x79, 0xf2, 0x94, 0x6d, 0xaa, 0x7d, 0xf9, 0x9b, 0x19, 0x34, 0x27, 0x92, 0x80, 0x59, 0x04,
	0x2e, 0xca, 0xd9, 0x38, 0xb3, 0x6d, 0xae, 0xc0, 0x42, 0x6c, 0x64, 0xba, 0x5f, 0x4b, 0x83, 0xad,
	0x1f, 0x19, 0x70, 0x69, 0x1d, 0xb7, 0x5d, 0x9f, 0xb9, 0x8a, 0x8d, 0x23, 0xdb, 0x6f, 0xe3, 0x73,
	0x57, 0xe2, 0x0e, 0x7e, 0xc4, 0xdd, 0x92, 0x50, 0xa2, 0x6c, 0x27, 0xd6, 0xcb, 0x64, 0x72, 0xbd,
	0x7c, 0x50, 0x2c, 0x17, 0xcd, 0x49, 0xcb, 0x81, 0x2b, 0x1b, 0x41, 0xa7, 0x4b, 0x57, 0xec, 0xb9,
	0x70, 0xb8, 0x04, 0x93, 0x5c, 0x1f, 0xe2, 0xba, 0x8b, 0x6b, 0xe1, 0xfb, 0xb0, 0xb4, 0xdf, 0x75,
	0x6c, 0x82, 0xa5, 0xbf, 0x3d, 0x5f, 0x15, 0xdc, 0x84, 0x99, 0x1d, 0xfc, 0x48, 0xf9, 0x76, 0x11,
	0x62, 0x34, 0x90, 0xf5, 0x73, 0x43, 0x72, 0x20, 0xe5, 0x3f, 0x5f, 0x0e, 0x2a, 0x50, 0xda, 0xf5,
	0x1c, 0xfa, 0x6d, 0x79, 0x81, 0x29, 0x9a, 0xb4, 0x67, 0x07, 0x3f, 0x62, 0x3d, 0xdc, 0x27, 0xc8,
	0xa6, 0x9c, 0x9c, 0x8d, 0xc0, 0x3f, 0xd4, 0x27, 0x87, 0xb6, 0xad, 0x3f, 0x35, 0xe0, 0x0a, 0x33,
	0x9b, 0xfb, 0x41, 0xd8, 0x0e, 0xc8, 0xd9, 0x99, 0xce, 0xbe, 0x86, 0x94, 0xa2, 0x14, 0x72, 0x3c,
	0x4a, 0x31, 0xe5, 0x51, 0xfe, 0xca, 0x80, 0x6b, 0xd2, 0x5c, 0xce, 0x8b, 0xb3, 0xeb, 0x00, 0xd4,
	0x6d, 0x13, 0xdd, 0x6c, 0x34, 0x88, 0xae, 0xc0, 0x42, 0xbe, 0x02, 0x8b, 0x29, 0x05, 0x7e, 0x09,
	0xa8, 0x89, 0x09, 0x3d, 0x51, 0xd5, 0x43, 0x7c, 0x18, 0x9d, 0xef, 0x6c, 0x27, 0x6f, 0x4c, 0x0b,
	0xe9, 0x1b, 0x53, 0x6b, 0x1d, 0xcc, 0x26, 0x26, 0x75, 0x1c, 0x46, 0x81, 0x6f, 0x0b, 0xd2, 0x79,
	0x7e, 0xd7, 0xb3, 0xc9, 0x61, 0x10, 0x76, 0x94, 0xdf, 0x15, 0x6d, 0xeb, 0xef, 0x0d, 0x30, 0xf9,
	0x15, 0xf4, 0xf9, 0xfb, 0x5d, 0xfd, 0x4e, 0xb6, 0xf0, 0xe4, 0x77, 0xb2, 0xb7, 0x60, 0xee, 0x81,
	0xdd, 0x76, 0x5b, 0x14, 0xc0, 0xae, 0x2b, 0xb9, 0xf2, 0x93, 0x40, 0xea, 0xf9, 0xae, 0x71, 0x01,
	0xc4, 0x5d, 0x7e, 0xdd, 0x0e, 0xc9, 0x19, 0x83, 0xc8, 0x90, 0x40, 0xf5, 0xc4, 0xb6, 0xfc, 0x25,
	0x2c, 0xb1, 0x5d, 0x5a, 0x7f, 0x5c, 0x8b, 0x6b, 0xd8, 0x66, 0xe5, 0x33, 0x58, 0xdc, 0xc2, 0xa4,
	0x1e, 0xe2, 0x13, 0x7e, 0x26, 0x3a, 0xd7, 0xf9, 0xb5, 0xd6, 0xa1, 0xa2, 0x9c, 0xba, 0x6f, 0x1f,
	0x78, 0x78, 0x6f, 0x77, 0xaf, 0x3e, 0xc4, 0x0e, 0x91, 0xb8, 0x76, 0x16, 0xdf, 0x60, 0xd3, 0xf7,
	0xa9, 0x54, 0x0f, 0x1d, 0x4b, 0x21, 0xa7, 0xd8, 0xb1, 0x94, 0x74, 0x22, 0xf5, 0x9a, 0x21, 0xbf,
	0x5d, 0xd0, 0xbe, 0x7d, 0x08, 0x17, 0x9a, 0x41, 0xcb, 0xb5, 0xbd, 0xed, 0xa0, 0xed, 0xfa, 0x67,
	0x72, 0x1d, 0x03, 0xf7, 0xf1, 0x1a, 0x84, 0x6e, 0x46, 0xe9, 0xea, 0xc7, 0x61, 0x88, 0x9d, 0x6d,
	0x9b, 0x59, 0xe0, 0xf9, 0x06, 0x5e, 0x75, 0xf9, 0x52, 0x48, 0x5e, 0xbe, 0xd0, 0xb3, 0xd3, 0x65,
	0xb5, 0x1c, 0xb6, 0xb0, 0x8f, 0x43, 0x16, 0x7a, 0xc6, 0x61, 0xf7, 0x49, 0x25, 0x14, 0xd2, 0x4a,
	0x48, 0x9f, 0xd0, 0x8a, 0x83, 0x57, 0x07, 0x0e, 0x2c, 0x26, 0x96, 0xee, 0x99, 0xf8, 0x54, 0x4e,
	0x41, 0xf0, 0xa9, 0xfc, 0xc1, 0xef, 0x19, 0x70, 0x99, 0x87, 0x60, 0xe6, 0x15, 0x82, 0xf0, 0x6c,
	0xa4, 0x72, 0xf6, 0x01, 0xda, 0xb7, 0xe5, 0x3e, 0x40, 0x03, 0x59, 0x97, 0xe1, 0xe2, 0x16, 0x26,
	0x1a, 0x44, 0x44, 0x06, 0xeb, 0xa2, 0x58, 0x90, 0x41, 0x27, 0xa0, 0x9b, 0x37, 0x09, 0xfe, 0x3e,
	0x2c, 0x6d, 0x78, 0xb6, 0xdb, 0x61, 0x1d, 0x63, 0x61, 0x58, 0x91, 0x54, 0x93, 0xa7, 0x83, 0xac,
	0x3e, 0xbb, 0x1a, 0x22, 0xbd, 0x68, 0x9c, 0x6f, 0x44, 0xd4, 0x7f, 0x85, 0xa1, 0x3a, 0xf4, 0xf2,
	0x86, 0xf5, 0x67, 0x13, 0x80, 0x58, 0x08, 0x66, 0x1a, 0x78, 0xea, 0xf4, 0xd1, 0xc7, 0x00, 0x31,
	0x79, 0xf1, 0x00, 0x7c, 0x2f, 0xfb, 0x5d, 0x63, 0x80, 0x4b, 0x0d, 0xc4, 0x1f, 0x84, 0xb5, 0x4f,
	0x2d, 0xbf, 0x07, 0x0b, 0xa9, 0xee, 0x27, 0x7a, 0x1c, 0xfe, 0x6b, 0x03, 0x2e, 0x26, 0x9f, 0xcb,
	0x9e, 0xd9, 0xe7, 0xbb, 0x9f, 0x1a, 0xb0, 0xb0, 0x85, 0xd9, 0x05, 0xe7, 0x38, 0x99, 0x7c, 0x97,
	0x3d, 0xbc, 0xc9, 0x47, 0xbf, 0x97, 0x72, 0xf7, 0x12, 0xd8, 0x27, 0x6e, 0x8b, 0x1d, 0x8e, 0xf8,
	0xba, 0xa0, 0x83, 0xac, 0x1f, 0x1a, 0x80, 0xe2, 0x40, 0x38, 0x4e, 0x36, 0xdf, 0x84, 0x22, 0xa5,
	0x2b, 0xd8, 0xcc, 0xbe, 0xdd, 0xd4, 0x38, 0x61, 0xc8, 0x74, 0x27, 0x7e, 0x99, 0x1f, 0xe0, 0x54,
	0x24, 0x1d, 0x27, 0x8f, 0xb7, 0x61, 0x9e, 0x92, 0x68, 0x62, 0xd2, 0xeb, 0xd6, 0x3a, 0x32, 0xb4,
	0xcc, 0x36, 0x52, 0x50, 0xeb, 0x07, 0x06, 0x2c, 0x0f, 0xc6, 0xf8, 0x71, 0x72, 0xc6, 0x2e, 0xff,
	0xa3, 0x9e, 0x27, 0x6f, 0xd5, 0x45, 0xcb, 0xfa, 0x23, 0x03, 0xae, 0x0c, 0x84, 0x3a, 0xc5, 0x88,
	0x1e, 0x11, 0x8c, 0x64, 0x44, 0x50, 0x4c, 0x16, 0xce, 0xc0, 0x64, 0x31, 0xc1, 0xa4, 0xf5, 0x4f,
	0x3a, 0x33, 0xec, 0x7a, 0x30, 0xc5, 0x4c, 0xee, 0xe3, 0xf5, 0x29, 0x7b, 0x89, 0x31, 0x30, 0x9b,
	0x8e, 0xcc, 0x93, 0x83, 0x91, 0xf9, 0x07, 0x06, 0x5c, 0x8f, 0x43, 0xf3, 0x11, 0x6e, 0x1d, 0xcb,
	0x39, 0x57, 0x32, 0x65, 0xed, 0xc7, 0xc6, 0xa0, 0xd8, 0x9f, 0x19, 0x30, 0xc7, 0xe2, 0xe5, 0x38,
	0x4d, 0x8c, 0x5d, 0xe3, 0xc4, 0xa1, 0x99, 0x3d, 0x43, 0xb0, 0x6b, 0x9c, 0x18, 0xa6, 0xe1, 0x50,
	0x0d, 0x45, 0x2c, 0x2e, 0xc4, 0x38, 0x0c, 0x66, 0xfd, 0x0d, 0x73, 0x29, 0x32, 0x94, 0x8f, 0x93,
	0xe3, 0x75, 0x66, 0x35, 0x82, 0x90, 0x78, 0x36, 0xb1, 0x72, 0x1c, 0x8b, 0x0c, 0xea, 0xf4, 0x30,
	0xa5, 0x8d, 0xb2, 0x7e, 0x5e, 0x84, 0xb9, 0x84, 0xff, 0xce, 0xdb, 0x63, 0xe7, 0x5e, 0x5e, 0xaf,
	0xc0, 0x82, 0x3c, 0x6c, 0xca, 0xe3, 0xa4, 0xb8, 0x8e, 0x4a, 0x81, 0xf9, 0x83, 0x27, 0xbf, 0x04,
	0xe3, 0x89, 0x47, 0xe5, 0x46, 0x0c, 0x48, 0x9d, 0x6b, 0x27, 0x07, 0x32, 0x81, 0x3e, 0x82, 0x85,
	0xa4, 0x1b, 0x8f, 0x44, 0xb6, 0xc4, 0xc8, 0x2e, 0x3f, 0x3d, 0x1e, 0xed, 0xc2, 0xb4, 0x64, 0x2e,
	0xaa, 0x94, 0x98, 0xfe, 0xde, 0x38, 0x3d, 0xc2, 0xad, 0xaa, 0x31, 0x3c, 0xba, 0xc7, 0xdf, 0x40,
	0x6f, 0x41, 0xa9, 0x1e, 0x06, 0x87, 0xae, 0x87, 0xc5, 0x73, 0xe7, 0xb5, 0xbc, 0xe9, 0xa0, 0x38,
	0x0d, 0x89, 0x8c, 0xaa, 0x30, 0xab, 0xa5, 0xe8, 0x44, 0x95, 0x69, 0xc6, 0xcb, 0xcd, 0x6c, 0x5e,
	0x62, 0xc4, 0x46, 0x62, 0xd4, 0xf2, 0x01, 0xcc, 0x27, 0x59, 0xcb, 0xd8, 0x59, 0xbc, 0xa3, 0xef,
	0x2c, 0xf2, 0xb2, 0x18, 0xe4, 0x57, 0x24, 0x19, 0x6d, 0xff, 0xf1, 0xa3, 0x12, 0xa0, 0x41, 0xd5,
	0xa2, 0x6f, 0xc2, 0xa4, 0x17, 0xb4, 0x6c, 0x4f, 0xec, 0x49, 0xaf, 0x67, 0xa7, 0xbf, 0x50, 0x0c,
	0x3a, 0xb8, 0xc1, 0x91, 0xd1, 0x3d, 0x98, 0x22, 0x3c, 0xed, 0x64, 0x62, 0x48, 0x54, 0xe4, 0x11,
	0x91, 0x8d, 0x13, 0xe8, 0xe8, 0x3d, 0x28, 0x1f, 0x26, 0x93, 0x7d, 0x9e, 0x1f, 0x9a, 0xec, 0xc3,
	0x06, 0xab, 0x21, 0x94, 0xae, 0xe7, 0x12, 0xdc, 0x6d, 0x89, 0x44, 0x9f, 0x1b, 0x39, 0xd9, 0x3a,
	0x04, 0xd7, 0x37, 0x38, 0x5d, 0x8e, 0x4e, 0x07, 0xb6, 0x79, 0x86, 0xd0, 0xe4, 0x90, 0x81, 0x3c,
	0x59, 0x82, 0x0f, 0xe4, 0xe8, 0x74, 0xcb, 0xee, 0xb9, 0x3e, 0x16, 0x16, 0xfb, 0x5c, 0x6e, 0x76,
	0x10, 0x1b, 0xc4, 0x50, 0xd1, 0x3b, 0x50, 0x22, 0x22, 0xad, 0x86, 0xe7, 0xf3, 0xdc, 0x1c, 0x96,
	0x56, 0xc3, 0x06, 0xca, 0x01, 0xe8, 0x2d, 0x28, 0x74, 0x23, 0x5f, 0xd8, 0xe0, 0xad, 0xd3, 0xb2,
	0x89, 0xd8, 0x58, 0x3a, 0x80, 0x4e, 0x63, 0xc4, 0x32, 0x88, 0xa6, 0x87, 0x4c, 0x23, 0x7b, 0x6d,
	0xe5, 0xd3, 0xc8, 0x90, 0xa9, 0x70, 0x8f, 0x0f, 0x82, 0xc7, 0x22, 0x85, 0xe7, 0xb9, 0xdc, 0x7c,
	0x1c, 0x2e, 0x1c, 0x45, 0x45, 0xaf, 0xc2, 0xc4, 0xc9, 0xb1, 0x48, 0xe0, 0xb9, 0x9a, 0x9d, 0xf3,
	0xc3, 0x27, 0x6d, 0xe2, 0xe4, 0x98, 0x6a, 0xa2, 0x1f, 0xf4, 0x48, 0xef, 0x00, 0x8b, 0xcc, 0x9d,
	0x6c, 0x4d, 0xfc, 0x26, 0xc7, 0xe1, 0x9a, 0x10, 0x03, 0xe8, 0x8c, 0x45, 0x3c, 0xe9, 0x67, 0x6e,
	0xc8, 0x8c, 0xf1, 0x07, 0x70, 0x3e, 0x63, 0x1c, 0x9d, 0x12, 0x75, 0x44, 0xc2, 0xcf, 0xfc, 0x10,
	0xa2, 0xe2, 0xd9, 0x8f, 0x13, 0x15, 0x03, 0x28, 0xd1, 0x90, 0x27, 0xfb, 0x2c, 0x0c, 0x21, 0xca,
	0xdf, 0xff, 0x39, 0x51, 0x8e, 0x8e, 0xbe, 0x03, 0xd3, 0xf6, 0x61, 0x88, 0x71, 0xcb, 0x26, 0x27,
	0x15, 0x73, 0xc8, 0x96, 0x7b, 0x8d, 0x63, 0xed, 0x3d, 0x64, 0xc3, 0xe3, 0x41, 0xd6, 0x5f, 0x4c,
	0xc0, 0xb4, 0x5a, 0x67, 0x99, 0xbe, 0x7c, 0xa4, 0x47, 0xd3, 0x2a, 0xb6, 0x95, 0xa7, 0xe6, 0x3b,
	0x2e, 0x1d, 0x44, 0x3d, 0xb9, 0xc8, 0x00, 0x8d, 0x3d, 0xb9, 0x02, 0xc4, 0x37, 0x52, 0x25, 0xfd,
	0x46, 0x8a, 0xa7, 0xdf, 0x1e, 0x63, 0x47, 0x64, 0x68, 0x88, 0x16, 0x85, 0xef, 0xfa, 0xdf, 0x0d,
	0x3c, 0x87, 0x99, 0x43, 0xb9, 0x21, 0x5a, 0x8c, 0x06, 0xbb, 0xc1, 0x73, 0xd6, 0x78, 0xd2, 0x54,
	0xa1, 0x11, 0x03, 0x68, 0x2f, 0x3f, 0xcf, 0xd3, 0xde, 0x05, 0xde, 0xab, 0x00, 0xa9, 0xfd, 0x94,
	0x39, 0x70, 0x37, 0xf3, 0xaf, 0x13, 0x00, 0xb1, 0x5b, 0x19, 0x9b, 0x9a, 0x6e, 0xc3, 0xfc, 0xba,
	0xed, 0x6c, 0x84, 0x98, 0xa5, 0x2e, 0xdb, 0x5e, 0x24, 0x74, 0x95, 0x82, 0xe6, 0xe7, 0x04, 0x70,
	0x1e, 0x6b, 0x55, 0x99, 0x13, 0x20, 0xdb, 0x89, 0x80, 0x5c, 0x4a, 0x05, 0xe4, 0xd4, 0x1b, 0x6f,
	0x79, 0xf0, 0x8d, 0x37, 0xa1, 0xda, 0xe9, 0xa1, 0xaa, 0x85, 0xe1, 0xaa, 0x9d, 0x19, 0x50, 0xed,
	0xff, 0x1a, 0x30, 0xab, 0xbb, 0xdd, 0xb1, 0x29, 0x37, 0xfb, 0x39, 0xfc, 0x3a, 0x80, 0xa4, 0x5e,
	0xab, 0x0a, 0x7d, 0x6a, 0x90, 0xa4, 0xe8, 0x53, 0x43, 0x45, 0x2f, 0x0d, 0x17, 0xbd, 0x3c, 0x20,
	0xfa, 0x8f, 0x0d, 0x80, 0x38, 0x68, 0x64, 0x0a, 0x7e, 0xda, 0x46, 0x7f, 0xb4, 0xa5, 0xa7, 0x04,
	0x28, 0x0e, 0x15, 0x60, 0x32, 0x25, 0x80, 0xf5, 0x13, 0x03, 0x66, 0x34, 0x2f, 0xf9, 0x0c, 0x72,
	0xf8, 0x53, 0x03, 0xe6, 0x12, 0xbe, 0xed, 0x19, 0xe4, 0xf1, 0xbf, 0x0c, 0x80, 0x38, 0xc4, 0x3f,
	0x65, 0xfb, 0x5e, 0x86, 0x32, 0xa7, 0xad, 0xac, 0x5b, 0xb5, 0xc7, 0x6a, 0xdb, 0xff, 0x69, 0xb0,
	0xb3, 0xf4, 0xd7, 0x21, 0x32, 0x0d, 0x1c, 0xae, 0x1f, 0x0b, 0x2c, 0x5a, 0x63, 0x15, 0xf7, 0x7f,
	0x0c, 0x98, 0xd1, 0x76, 0x56, 0x4f, 0x59, 0xe2, 0x6b, 0x30, 0x2d, 0x88, 0x2b, 0xa1, 0x63, 0xc0,
	0x58, 0xe5, 0xfe, 0x65, 0x01, 0x16, 0x52, 0x3b, 0xc3, 0xb1, 0xc9, 0x9e, 0x91, 0x8b, 0x5a, 0x1c,
	0x29, 0x17, 0x75, 0x72, 0x30, 0x17, 0x55, 0x64, 0xba, 0x4e, 0xc5, 0x99, 0xae, 0xc3, 0xb2, 0x53,
	0x97, 0x60, 0xb2, 0xde, 0xdc, 0x51, 0x0a, 0xe0, 0x0d, 0xaa, 0xb9, 0x7a, 0x73, 0x27, 0x91, 0x63,
	0x1a, 0x03, 0xa8, 0xe6, 0x06, 0x92, 0x4c, 0x35, 0x48, 0x56, 0xc6, 0xeb, 0xcc, 0x19, 0x33, 0x5e,
	0x13, 0x13, 0x3d, 0x3b, 0x74, 0xa2, 0xe7, 0x86, 0x4f, 0xf4, 0xfc, 0xc0, 0x44, 0xff, 0xbb, 0x01,
	0x10, 0x6f, 0x40, 0xc7, 0x36, 0xc7, 0xcb, 0x50, 0xe6, 0x54, 0xe2, 0x37, 0x50, 0xd9, 0x4e, 0x8a,
	0x37, 0x39, 0x54, 0xbc, 0xa9, 0xe1, 0xe2, 0x95, 0x32, 0xc5, 0x8b, 0x37, 0xf5, 0xe3, 0x14, 0x8f,
	0x53, 0x89, 0xc5, 0x93, 0xed, 0xb1, 0x8a, 0xf7, 0x6f, 0x06, 0x4c, 0xab, 0x63, 0xd8, 0xd8, 0xa4,
	0xab, 0x40, 0x89, 0x11, 0x51, 0xc2, 0xc9, 0xe6, 0x58, 0x65, 0xfb, 0x17, 0x03, 0xca, 0xf2, 0xb4,
	0x38, 0x36, 0xd1, 0x64, 0x36, 0x69, 0x51, 0xcb, 0x26, 0x1d, 0xa7, 0x50, 0xbf, 0x34, 0x60, 0xea,
	0xe1, 0xd7, 0xb1, 0x1f, 0x46, 0x50, 0x7c, 0xf8, 0xa1, 0x8a, 0x22, 0xec, 0xf7, 0x58, 0x03, 0xc8,
	0x9f, 0x4f, 0x30, 0x51, 0xe4, 0x99, 0xf8, 0x2b, 0x6f, 0xdf, 0x34, 0x6d, 0x14, 0x4e, 0xd5, 0x46,
	0x71, 0x88, 0x36, 0x26, 0x53, 0x81, 0x55, 0x30, 0xa7, 0xce, 0x54, 0x31, 0x60, 0x30, 0x0d, 0xb7,
	0x94, 0x95, 0x86, 0x9b, 0xd0, 0x5e, 0x79, 0xa8, 0xf6, 0xa6, 0xd3, 0x5b, 0xc7, 0xff, 0x2f, 0xaa,
	0x0b, 0xc2, 0x31, 0x69, 0x46, 0xab, 0xb4, 0x2c, 0x26, 0x2b, 0x2d, 0x33, 0x82, 0x68, 0xaa, 0x4a,
	0x53, 0xe9, 0x6c, 0x2a, 0x75, 0xa2, 0xd2, 0xee, 0x65, 0x4b, 0xd9, 0x15, 0x9a, 0x4d, 0x55, 0xa1,
	0x59, 0x96, 0x15, 0x9a, 0x0a, 0x84, 0xbe, 0x01, 0x8b, 0x31, 0x7e, 0x5a, 0x3b, 0x59, 0x5d, 0xe8,
	0x35, 0xb8, 0x90, 0xc8, 0x9d, 0x60, 0x51, 0x9c, 0x67, 0x12, 0x0f, 0x76, 0x24, 0x0e, 0xc3, 0x33,
	0xa9, 0xc3, 0xf0, 0x59, 0x62, 0xe8, 0xba, 0x7a, 0xd1, 0x67, 0xc9, 0x4a, 0xc3, 0xae, 0x81, 0x34,
	0xbc, 0x86, 0x3e, 0x08, 0x6d, 0x8b, 0x3b, 0x7a, 0xfe, 0xa6, 0xb0, 0xc0, 0xee, 0x75, 0x5f, 0x1b,
	0x76, 0x29, 0xbc, 0x1a, 0xa3, 0x8b, 0xc7, 0xe3, 0x18, 0xb0, 0xfc, 0x1e, 0x2c, 0xa4, 0xba, 0x9f,
	0xe8, 0xf1, 0xf8, 0x7d, 0xca, 0x8c, 0x7c, 0x62, 0xfc, 0x0a, 0x65, 0x1e, 0x41, 0x42, 0x21, 0xe9,
	0x8c, 0x07, 0x63, 0x20, 0xe3, 0x41, 0xc3, 0xd0, 0x3f, 0xa9, 0x81, 0x92, 0x33, 0x50, 0x48, 0xaf,
	0x97, 0xbf, 0x33, 0x58, 0x8d, 0x14, 0x8e, 0xa2, 0xed, 0xa0, 0x4d, 0x71, 0x9b, 0x38, 0x8a, 0x78,
	0xba, 0x82, 0x28, 0x98, 0x52, 0x00, 0xb6, 0x69, 0x76, 0x3b, 0x38, 0x22, 0x76, 0xa7, 0xcb, 0x28,
	0x15, 0x1a, 0x31, 0x80, 0xae, 0x8b, 0xf5, 0x30, 0x78, 0x14, 0xa9, 0x64, 0x5f, 0xd9, 0xa4, 0x6a,
	0xd8, 0x95, 0xe9, 0x91, 0x13, 0xbb, 0x91, 0xbe, 0x82, 0x26, 0x93, 0x2b, 0x88, 0x17, 0x94, 0x4f,
	0xa9, 0x82, 0x72, 0x2a, 0x5d, 0x2f, 0xa4, 0x7b, 0x36, 0x96, 0x8e, 0xc1, 0x97, 0x86, 0x0e, 0xb2,
	0xfe, 0xdb, 0x80, 0x0b, 0x8a, 0xff, 0x71, 0x3e, 0x05, 0x6d, 0x53, 0x3a, 0xc4, 0x3d, 0xc1, 0x8e,
	0x22, 0x27, 0x5f, 0x84, 0xb2, 0x2f, 0x71, 0x63, 0xae, 0x06, 0x07, 0xa2, 0xf7, 0x01, 0xb4, 0xcf,
	0x14, 0x47, 0xfa, 0x8c, 0x36, 0xc2, 0xfa, 0xbf, 0x09, 0x98, 0x4b, 0x3c, 0x39, 0xa5, 0x73, 0x4d,
	0x8c, 0x81, 0x5c, 0x13, 0xea, 0x0e, 0x35, 0x1b, 0x29, 0xc6, 0x6e, 0x9e, 0xfa, 0xde, 0x2e, 0x2b,
	0x8e, 0x95, 0xee, 0x2e, 0x06, 0xd1, 0xa5, 0xcf, 0x9e, 0xa4, 0xf7, 0x1b, 0xdb, 0x72, 0x03, 0x26,
	0xdb, 0x54, 0x5b, 0xdb, 0xae, 0x7f, 0x4c, 0xbb, 0xc4, 0x44, 0x8a, 0x26, 0x35, 0x95, 0x06, 0xa6,
	0x27, 0x0b, 0xd7, 0x6f, 0xcb, 0x00, 0xa8, 0x00, 0x3c, 0x8b, 0x98, 0xd8, 0x9e, 0x08, 0x7e, 0xbc,
	0xc1, 0x8c, 0x8f, 0xd8, 0x21, 0xa1, 0x0e, 0x53, 0xba, 0x7d, 0x05, 0xa0, 0xb4, 0x36, 0x7d, 0x87,
	0xf5, 0x71, 0xb7, 0x26, 0x9b, 0xc2, 0x95, 0xc9, 0xa7, 0x69, 0x87, 0xfb, 0x01, 0x7e, 0x7c, 0x18,
	0xec, 0xa0, 0x21, 0x48, 0x29, 0x45, 0x55, 0x47, 0x4c, 0x37, 0x92, 0x40, 0xb6, 0xed, 0x3c, 0x0a,
	0x1e, 0x31, 0x23, 0x9a, 0xe5, 0x35, 0x1f, 0xb2, 0x6d, 0xfd, 0xc2, 0x60, 0x27, 0x38, 0xfd, 0xfd,
	0xe6, 0x2b, 0x6e, 0x39, 0x68, 0x30, 0x12, 0x1f, 0xd2, 0x72, 0xbb, 0x14, 0x24, 0xa3, 0x28, 0xbd,
	0x98, 0x59, 0x94, 0x7e, 0x86, 0x7d, 0x95, 0xf5, 0xc7, 0x13, 0x30, 0xa3, 0xbd, 0x71, 0x7d, 0xa5,
	0xa0, 0x79, 0x9a, 0x1c, 0xe9, 0x02, 0xfc, 0xe2, 0x48, 0x05, 0xf8, 0x93, 0x99, 0xb2, 0xa6, 0xb4,
	0x3a, 0x35, 0xa8, 0xd5, 0x84, 0x36, 0x4a, 0x43, 0xb5, 0x51, 0x4e, 0x69, 0xe3, 0x95, 0x5f, 0x98,
	0x30, 0x9f, 0x74, 0x0c, 0x68, 0x19, 0x2e, 0x6d, 0x86, 0xa1, 0x50, 0xcf, 0x7a, 0xbf, 0x56, 0xdd,
	0x09, 0xc8, 0xfd, 0xa0, 0xe7, 0x3b, 0xe6, 0xaf, 0xa1, 0x6b, 0x50, 0xd1, 0xfb, 0xa8, 0xb2, 0x54,
	0xaf, 0x81, 0x9e, 0x83, 0x2b, 0x7a, 0x2f, 0x0b, 0xc3, 0xaa, 0x7b, 0x02, 0x59, 0x70, 0x5d, 0xef,
	0x8e, 0x65, 0x54, 0x38, 0x05, 0x74, 0x05, 0x2e, 0xc6, 0x38, 0xda, 0xee, 0xcb, 0x2c, 0xa2, 0xcb,
	0xb0, 0x18, 0x77, 0xa9, 0x47, 0x5e, 0x73, 0x12, 0x2d, 0x81, 0x19, 0x77, 0xf0, 0xab, 0x7e, 0x73,
	0x4a, 0x88, 0x51, 0xf3, 0x4f, 0x6c, 0xcf, 0x75, 0xf4, 0x5a, 0x23, 0xb3, 0x24, 0x18, 0x15, 0x7d,
	0xa9, 0x12, 0x07, 0xb3, 0x2c, 0xa4, 0xbc, 0x6f, 0xbb, 0x1e, 0x76, 0x98, 0x10, 0x22, 0xf3, 0xc2,
	0x0d, 0x7c, 0x73, 0x1a, 0xdd, 0x81, 0x57, 0x37, 0xc3, 0x30, 0x7e, 0x79, 0xc4, 0x11, 0x56, 0x69,
	0xe3, 0xe2, 0x93, 0x22, 0x59, 0x9e, 0x42, 0x4c, 0x40, 0x2b, 0x70, 0x4b, 0x1f, 0xd0, 0x1c, 0x40,
	0xbf, 0x1f, 0x84, 0x1d, 0x9b, 0x98, 0x33, 0x82, 0xf0, 0x46, 0xd0, 0xf3, 0x9c, 0x9d, 0x80, 0x24,
	0x0a, 0x8f, 0xcc, 0x59, 0xc1, 0x35, 0x67, 0x8b, 0xcf, 0x60, 0xbc, 0xd1, 0x31, 0xe7, 0x84, 0xc0,
	0x7a, 0xb7, 0x78, 0x2d, 0x37, 0xe7, 0xd1, 0x25, 0x40, 0x42, 0x60, 0xd7, 0x53, 0x05, 0x34, 0xe6,
	0x82, 0xd0, 0x29, 0x1f, 0x13, 0x67, 0x67, 0x9b, 0x66, 0xa2, 0x83, 0xf3, 0xc1, 0x3a, 0x2e, 0x08,
	0x2a, 0x8c, 0x45, 0x3f, 0x20, 0x1b, 0x81, 0x7f, 0x82, 0x43, 0x76, 0xe0, 0x37, 0x11, 0xba, 0x09,
	0xd7, 0x36, 0xc3, 0x90, 0x31, 0xc5, 0xaf, 0x59, 0x76, 0x02, 0xf2, 0xf1, 0x91, 0x4b, 0xb0, 0xe7,
	0x46, 0x74, 0xaa, 0x16, 0xd1, 0x45, 0xb8, 0xb0, 0x19, 0x86, 0x7b, 0xbb, 0xcd, 0x9d, 0x80, 0xc8,
	0xcd, 0x9c, 0xb9, 0x84, 0x2e, 0xc0, 0x5c, 0x3c, 0x1f, 0xd5, 0xdd, 0x75, 0xf3, 0x62, 0x72, 0xfa,
	0x78, 0x29, 0x07, 0x7f, 0x0d, 0x32, 0x2f, 0x69, 0xd2, 0x78, 0x6e, 0xac, 0xe8, 0xcb, 0xc9, 0x69,
	0x4d, 0xfd, 0xaf, 0x88, 0x59, 0x41, 0x57, 0xe1, 0xb2, 0x66, 0x40, 0x5e, 0x88, 0x6d, 0xa7, 0xbf,
	0xf9, 0xd8, 0x8d, 0x48, 0x64, 0x5e, 0x41, 0x15, 0x58, 0x62, 0x63, 0x5b, 0x41, 0x18, 0xe2, 0x96,
	0x9a, 0x21, 0x73, 0x19, 0xdd, 0x80, 0xab, 0xf1, 0xb0, 0x5a, 0xb4, 0x16, 0x62, 0xdb, 0x73, 0xfa,
	0xdc, 0xce, 0xb0, 0x63, 0x5e, 0x15, 0x36, 0xab, 0x2b, 0x5e, 0x18, 0xe1, 0xb5, 0x8c, 0x2e, 0xfe,
	0x44, 0x65, 0x3e, 0x97, 0xb4, 0x5a, 0x01, 0xbd, 0x9e, 0xb4, 0xff, 0x7d, 0xbf, 0x25, 0x5f, 0xc0,
	0xcc, 0x1b, 0x99, 0xec, 0xd3, 0x49, 0xc1, 0x8e, 0x79, 0x13, 0xbd, 0x0c, 0x2f, 0x52, 0x1b, 0x63,
	0x4f, 0x05, 0xdb, 0x76, 0xcf, 0x6f, 0x1d, 0xe1, 0xb0, 0x81, 0xdb, 0x6e, 0x44, 0x42, 0xfe, 0xa4,
	0xee, 0x46, 0xf6, 0x81, 0x87, 0x1d, 0xf3, 0xf9, 0xa4, 0xf6, 0x64, 0x12, 0xbc, 0x69, 0xa1, 0x17,
	0xe0, 0x86, 0x9c, 0x3d, 0x5e, 0x35, 0x23, 0xcb, 0x6e, 0x9a, 0xd4, 0x5b, 0x46, 0xbb, 0x9e, 0x63,
	0xbe, 0x80, 0x5e, 0x85, 0x97, 0xb2, 0x91, 0x04, 0x43, 0x9c, 0x26, 0x0e, 0xb1, 0x63, 0xde, 0x12,
	0x86, 0xaf, 0x21, 0xef, 0x7a, 0x8e, 0x8e, 0xcc, 0x81, 0x8e, 0xf9, 0x22, 0xba, 0x0e, 0xcb, 0x49,
	0x4c, 0xc1, 0x1e, 0x5f, 0x91, 0xb7, 0x85, 0x65, 0xc9, 0x49, 0x61, 0x4b, 0x2e, 0x81, 0xf1, 0x92,
	0x90, 0x4a, 0x8a, 0xf3, 0xc0, 0x8d, 0x22, 0xd7, 0x6f, 0x9b, 0x2b, 0xe2, 0xcb, 0xd2, 0xe4, 0x85,
	0xf6, 0x94, 0xc3, 0x79, 0x59, 0xd8, 0xd9, 0x5e, 0x73, 0xbb, 0x1e, 0x06, 0x8f, 0xfb, 0x0d, 0xfc,
	0xbd, 0x1e, 0x8e, 0x08, 0x9d, 0x30, 0xf3, 0x15, 0x74, 0x1b, 0x2c, 0xd1, 0x97, 0x8c, 0x7e, 0xfb,
	0x7e, 0xc7, 0x0e, 0xa3, 0x23, 0xdb, 0x63, 0x78, 0xaf, 0xe6, 0xe2, 0x6d, 0x76, 0xba, 0xa4, 0x2f,
	0xf7, 0x68, 0xe6, 0x6b, 0x42, 0x1f, 0x83, 0x78, 0xcd, 0x5e, 0xa7, 0x63, 0x87, 0x7d, 0xc5, 0xd5,
	0xeb, 0x42, 0xcd, 0xb9, 0x98, 0x42, 0xbc, 0xaa, 0x4d, 0x6c, 0x73, 0x55, 0x88, 0xa8, 0x92, 0x37,
	0x5b, 0xd8, 0x27, 0x5e, 0x7f, 0xdf, 0xf7, 0xb8, 0x6d, 0xdc, 0x11, 0x36, 0xb5, 0x17, 0x04, 0x0f,
	0x6c, 0x5f, 0x4a, 0xb8, 0xde, 0xaf, 0x75, 0xcd, 0x6f, 0x08, 0x87, 0x93, 0xee, 0x62, 0x69, 0xec,
	0xe6, 0x1b, 0xe8, 0x45, 0x78, 0x3e, 0xa3, 0x37, 0x59, 0x28, 0x63, 0xde, 0x15, 0x4b, 0x67, 0x27,
	0x50, 0x99, 0x22, 0xc2, 0x2a, 0xdf, 0x4c, 0x9a, 0x9a, 0x3c, 0x40, 0x99, 0xdf, 0x14, 0xb6, 0x2f,
	0x01, 0x7b, 0x36, 0x9d, 0xc2, 0x6f, 0x89, 0x49, 0x56, 0xf1, 0x41, 0x76, 0x2b, 0xb5, 0xbc, 0x25,
	0x24, 0x91, 0x1d, 0xc2, 0x8a, 0x9a, 0x98, 0x98, 0xf7, 0x84, 0x67, 0x11, 0xa4, 0xc4, 0xf6, 0xda,
	0x7c, 0x5b, 0x2c, 0x9a, 0x44, 0x3a, 0xb8, 0xc0, 0x31, 0x7f, 0x3d, 0xdd, 0xb9, 0x43, 0xfd, 0x19,
	0x4f, 0x47, 0x33, 0xdf, 0x11, 0xb4, 0xe4, 0x07, 0xe3, 0x13, 0x88, 0xf9, 0xae, 0xa0, 0x25, 0x6d,
	0x4a, 0xac, 0xdd, 0x6f, 0x8b, 0xf8, 0x96, 0x56, 0x17, 0xb7, 0x67, 0x66, 0xda, 0xe6, 0x7b, 0x42,
	0x57, 0xd2, 0xc3, 0x6f, 0x61, 0x52, 0xeb, 0xd2, 0xfd, 0xad, 0xf9, 0xbe, 0x70, 0x5e, 0x5a, 0x8f,
	0x38, 0x87, 0xb0, 0xee, 0xdf, 0x90, 0x7e, 0x37, 0xe6, 0x83, 0x12, 0x70, 0xe9, 0x3a, 0xfb, 0x8e,
	0xf8, 0xa8, 0xda, 0xd0, 0x29, 0x85, 0xad, 0x09, 0x21, 0xf4, 0x1e, 0xbe, 0x35, 0x37, 0xd7, 0xe5,
	0x92, 0x8a, 0xbb, 0xd8, 0x76, 0x71, 0x8d, 0x46, 0x08, 0xea, 0x29, 0xcc, 0x0d, 0x21, 0xcf, 0xbe,
	0x7f, 0xec, 0x07, 0x8f, 0xfc, 0xcd, 0x13, 0xec, 0x13, 0xba, 0x55, 0xbc, 0x1f, 0x06, 0x9d, 0x07,
	0xb6, 0xeb, 0x7d, 0x81, 0x89, 0x59, 0x45, 0xb3, 0x50, 0x6a, 0xf6, 0xd8, 0x36, 0xdd, 0xfc, 0x47,
	0xe3, 0xee, 0x7f, 0x5c, 0x87, 0x72, 0x4d, 0xfc, 0xa9, 0x16, 0x3a, 0x96, 0xff, 0x39, 0x95, 0x4c,
	0x06, 0x5b, 0xc9, 0x3f, 0xed, 0x26, 0x0b, 0x19, 0x97, 0x5f, 0x19, 0x21, 0x35, 0x58, 0x1e, 0x80,
	0xba, 0xb0, 0x94, 0xf5, 0x87, 0x48, 0xe8, 0x4e, 0x76, 0x12, 0x4f, 0xee, 0x7f, 0x27, 0x2d, 0x67,
	0xdf, 0xad, 0x67, 0xfc, 0xb7, 0x91, 0x23, 0x2b, 0x83, 0x47, 0x11, 0x2f, 0xa3, 0x86, 0x78, 0x39,
	0xf7, 0xcf, 0x62, 0xf4, 0xec, 0xf8, 0x03, 0x30, 0xb7, 0x30, 0x49, 0x92, 0xb0, 0x72, 0x34, 0xa8,
	0x55, 0x97, 0x3e, 0x91, 0xee, 0xbc, 0xb8, 0x92, 0x34, 0x49, 0xe8, 0x95, 0x9c, 0x03, 0x5a, 0x46,
	0xd5, 0x69, 0x8e, 0xde, 0x32, 0xf2, 0xed, 0x1d, 0x30, 0xd3, 0x65, 0xcd, 0xe8, 0xd5, 0x9c, 0x6c,
	0x96, 0xac, 0xea, 0xe7, 0xd1, 0xf4, 0xe6, 0x80, 0x99, 0x2e, 0x53, 0xcd, 0xa1, 0x92, 0x5d, 0xcd,
	0x3a, 0x1a, 0x15, 0x1f, 0x16, 0x33, 0xaa, 0x4d, 0xd1, 0x6a, 0xf6, 0x04, 0xe5, 0xd5, 0xa5, 0x8e,
	0xae, 0xbb, 0xcf, 0x61, 0x3e, 0x59, 0x77, 0x8a, 0x5e, 0xce, 0x2e, 0xd5, 0xc8, 0x28, 0x4e, 0x1d,
	0x4d, 0x22, 0x45, 0x41, 0x15, 0x3c, 0x0d, 0xa3, 0x90, 0x2c, 0x35, 0x1b, 0x8d, 0xc2, 0x17, 0xb0,
	0x98, 0x51, 0x09, 0x9a, 0xa3, 0xb3, 0xdc, 0x9a, 0xd1, 0xd1, 0x68, 0x11, 0xb8, 0x94, 0x5d, 0xde,
	0x89, 0xde, 0x18, 0x3a, 0x45, 0x99, 0x14, 0x47, 0x9e, 0xa5, 0xcf, 0x60, 0x56, 0xaf, 0xd5, 0x44,
	0xd9, 0x03, 0x07, 0xcb, 0x39, 0x47, 0x93, 0xe9, 0x13, 0x80, 0xb8, 0x18, 0x13, 0xbd, 0x98, 0xf7,
	0xed, 0x44, 0xb5, 0xe6, 0x68, 0x5f, 0x6e, 0xc0, 0x0c, 0x0d, 0x83, 0x22, 0x9d, 0x03, 0x65, 0x5f,
	0xcf, 0xa8, 0x8a, 0xff, 0xd1, 0xbe, 0xf9, 0x11, 0x00, 0xfd, 0x26, 0xdf, 0x98, 0x9e, 0xcf, 0x27,
	0xbb, 0x70, 0x29, 0xbb, 0x0e, 0x33, 0x6f, 0x52, 0x87, 0x14, 0x6d, 0x8e, 0xac, 0xf2, 0xf8, 0x70,
	0x94, 0xa3, 0xf2, 0x74, 0x6d, 0xeb, 0x68, 0x5f, 0xfe, 0x94, 0x5d, 0x47, 0xc9, 0x7f, 0x23, 0x40,
	0xb7, 0x73, 0x82, 0x47, 0xea, 0xff, 0x0a, 0x46, 0xe5, 0x7a, 0x9a, 0xa5, 0xd8, 0x0f, 0xf9, 0xf2,
	0xc0, 0xdf, 0x29, 0x8c, 0xf6, 0xe5, 0x8f, 0xa1, 0x24, 0xaa, 0x70, 0x46, 0xfe, 0x6e, 0x76, 0xc6,
	0x68, 0xba, 0x96, 0xa7, 0x0d, 0xf3, 0xc9, 0x1a, 0xd6, 0x1c, 0xef, 0x93, 0x55, 0xe8, 0xfa, 0x44,
	0x21, 0xef, 0x00, 0xe6, 0x12, 0xf5, 0xaa, 0x39, 0x61, 0x3b, 0xa3, 0xa6, 0x35, 0xc7, 0x0d, 0x64,
	0x54, 0xfc, 0xfc, 0x16, 0x2c, 0xa4, 0x0a, 0x6d, 0x4e, 0xb5, 0xff, 0xd7, 0x86, 0x44, 0xa8, 0xc1,
	0xa2, 0x18, 0x02, 0x68, 0xb0, 0x64, 0x06, 0xbd, 0x3e, 0x3c, 0xf8, 0xa4, 0xea, 0x67, 0x97, 0xef,
	0x8c, 0x88, 0xae, 0xa9, 0xee, 0x6a, 0x03, 0xb7, 0x55, 0x5d, 0x4c, 0x2b, 0x38, 0xc1, 0x61, 0x7f,
	0x6f, 0xb7, 0xbe, 0xc7, 0xaf, 0x1b, 0xcf, 0x65, 0x89, 0x37, 0xa9, 0x07, 0xf5, 0x1d, 0x59, 0xaa,
	0x7b, 0x3e, 0x1f, 0xfd, 0x5c, 0x1a, 0x97, 0xfa, 0xec, 0x30, 0xe3, 0x4a, 0x96, 0x09, 0x8f, 0x46,
	0xc1, 0x06, 0xc4, 0x56, 0xdc, 0xd6, 0x7e, 0xad, 0x4a, 0xed, 0xba, 0x8a, 0x3d, 0xbb, 0x7f, 0xbe,
	0x4b, 0xaf, 0x9d, 0x28, 0x35, 0xde, 0x0e, 0x82, 0xe3, 0x5e, 0x37, 0x87, 0xc2, 0x40, 0x49, 0xf2,
	0x13, 0xad, 0x90, 0xcf, 0x60, 0xa6, 0xc9, 0xac, 0xff, 0x70, 0xdb, 0xf6, 0xdb, 0x39, 0xeb, 0x23,
	0xa3, 0x1a, 0x79, 0x34, 0x31, 0xbe, 0x07, 0x17, 0x06, 0x6a, 0xac, 0x50, 0xb6, 0xf5, 0xe7, 0x94,
	0x1d, 0x2f, 0xaf, 0x8e, 0x86, 0xad, 0x48, 0x76, 0x34, 0x92, 0xb2, 0x92, 0x2a, 0x47, 0xac, 0x8c,
	0xea, 0xe1, 0xd3, 0xc8, 0x0d, 0xd4, 0x66, 0x3d, 0x82, 0x4b, 0xd9, 0x95, 0x4e, 0x4f, 0x40, 0xf3,
	0xcd, 0x53, 0x30, 0x33, 0x0b, 0xa8, 0x0e, 0xe1, 0xc2, 0x40, 0x59, 0x72, 0x8e, 0x6a, 0x73, 0xca,
	0x97, 0x47, 0x35, 0xf6, 0x85, 0x54, 0xe9, 0x71, 0xce, 0x79, 0x21, 0xb3, 0x40, 0x79, 0x39, 0xe7,
	0x10, 0x93, 0x28, 0xc9, 0xfa, 0x98, 0x79, 0x69, 0xed, 0x15, 0xe9, 0x34, 0x3f, 0x70, 0xfb, 0x94,
	0x17, 0xa5, 0xb4, 0xfb, 0x97, 0x35, 0x4b, 0xc3, 0xdc, 0x7f, 0xb2, 0x82, 0x3a, 0xd7, 0xfd, 0x0f,
	0x54, 0x67, 0x7d, 0x0e, 0xf3, 0xc9, 0x52, 0xeb, 0x1c, 0x77, 0x93, 0x55, 0x8f, 0x3d, 0xd2, 0x0c,
	0xac, 0xdf, 0xff, 0xb4, 0xda, 0x76, 0xc9, 0x6a, 0x37, 0x0c, 0xbe, 0xc0, 0x2d, 0x72, 0x10, 0x06,
	0xab, 0xad, 0xa0, 0x73, 0xc7, 0x8d, 0x9c, 0x3b, 0x7c, 0xdc, 0xeb, 0x72, 0xa0, 0xfa, 0xa3, 0xeb,
	0xd7, 0x23, 0x1c, 0x9e, 0xb8, 0x2d, 0x7c, 0x47, 0xff, 0x1b, 0xec, 0x83, 0x29, 0xf6, 0xf7, 0xd7,
	0x6f, 0xfe, 0x2a, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xd7, 0x84, 0x8e, 0x1d, 0x5b, 0x00, 0x00,
}
